<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mail</name>
    </assembly>
    <members>
        <member name="T:Limilabs.Client.Authentication.Google.Gmail2LeggedOAuth">
            <summary>
            This class allows you to sign-in using Gmail 2-legged OAuth. It's a wrapper over generic <see cref="T:Limilabs.Client.Authentication.OAuth"/> class.
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.Gmail2LeggedOAuth.#ctor(System.String,System.String)">
            <summary>
            Creates new Gmail2LeggedOAuth object.
            </summary>
            <param name="consumerKey">Consumer key.</param>
            <param name="consumerSecret">Consumer secret.</param>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.Gmail2LeggedOAuth.GetXOAuthKeyForImap(System.String)">
            <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/> methods.
            </summary>
            <param name="email">Email of the mailbox you want access.</param>
            <returns>XOAuthKey.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.Gmail2LeggedOAuth.GetXOAuthKeyForSmtp(System.String)">
            <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)"/> methods.
            </summary>
            <param name="email">Email of the mailbox you want access.</param>
            <returns>XOAuthKey.</returns>
        </member>
        <member name="T:Limilabs.Client.Authentication.Google.GmailOAuth">
            <summary>
            This class allows you to sign-in using Google 3-legged OAuth. It's a wrapper over generic <see cref="T:Limilabs.Client.Authentication.OAuth"/> class.
            </summary>
        </member>
        <member name="P:Limilabs.Client.Authentication.Google.GmailOAuth.ConsumerToken">
            <summary>
            Gets consumer token.
            </summary>
        </member>
        <member name="P:Limilabs.Client.Authentication.Google.GmailOAuth.RequestToken">
            <summary>
            Gets request token.
            </summary>
        </member>
        <member name="P:Limilabs.Client.Authentication.Google.GmailOAuth.AccessToken">
            <summary>
            Gets or sets access token.
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.#ctor">
            <summary>
            Creates new GmailOAuth object with consumer key and consumer secret set to "anonymous".
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.#ctor(System.String,System.String)">
            <summary>
            Creates new GmailOAuth object.
            </summary>
            <param name="consumerKey">Consumer key.</param>
            <param name="consumerSecret">Consumer secret.</param>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.#ctor(Limilabs.Client.Authentication.Google.OAuthToken)">
            <summary>
            Creates new GmailOAuth object.
            </summary>
            <param name="consumerToken">Consumer token (consumer key and consumer secret).</param>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.String)">
            <summary>
            Gets url you should redirect your user to, in order for him to authorize Google access.
            Default scopes are <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.ImapAndSmtp"/> and <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.UserInfoEmailScope"/>
            </summary>
            <param name="callback">Callback address. Google will redirect user to this address after authorization. Your application needs to read the oauth_verifier url parameter.</param>
            <returns>Url you should redirect the user to.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.String,System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})">
            <summary>
            Gets url you should redirect your user to, in order for him to authorize IMAP access.
            </summary>
            <param name="callback">Callback address. Google will redirect user to this address after authorization. Your application needs to read the oauth_verifier url parameter.</param>
            <param name="scopes">Scopes you request access to.</param>
            <returns>Url you should redirect the user to.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl">
            <summary>
            Gets url you should redirect your user to, in order for him to authorize IMAP access.
            This method uses oob instead of callback this means that your user will need to copy verification code to your application.
            </summary>
            <returns>Url you should redirect the user to.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})">
            <summary>
            Gets url you should redirect your user to, in order for him to authorize IMAP access.
            This method uses oob instead of callback this means that your user will need to copy verification code to your application.
            </summary>
            <param name="scopes">Scopes you request access to.</param>
            <returns>Url you should redirect the user to.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAccessToken(System.String)">
            <summary>
            Contacts Google to exchange an authorized request token for an access token.
            </summary>
            <param name="oauthVerifier">oauth_verifier url parameter.</param>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.SetAccessToken(Limilabs.Client.Authentication.Google.OAuthToken)">
            <summary>
            Sets access token. Typically you don't need to use this method, as <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAccessToken(System.String)"/> methods retrieves access token for you.
            </summary>
            <param name="accessToken">Access token.</param>        
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForImap">
            <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/> and <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)"/> methods.
            </summary>
            <returns>XOAuthKey.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForImap(System.String)">
            <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/> and <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)"/> methods.
            </summary>
            <param name="email">Email address.</param>
            <returns>XOAuthKey.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForSmtp">
            <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)"/> and <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)"/> methods.
            </summary>
            <returns>XOAuthKey.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForSmtp(System.String)">
            <summary>
            Gets XOAuthKey that can be used by <see cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)"/> and <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)"/> methods.
            </summary>
            <param name="email">Email address.</param>
            <returns>XOAuthKey.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GmailOAuth.RevokeToken(System.String)">
            <summary>
            Revokes access for specified token (retrieved using <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForImap"/> or  <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetXOAuthKeyForSmtp"/> method)
            </summary>
            <param name="oauthImapKey">Token to revoke access for.</param>
        </member>
        <member name="T:Limilabs.Client.Authentication.Google.GoogleApi">
            <summary>
            Provides access to Google API.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH2(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH2(System.String,System.String)"/>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.#ctor(System.String)">
            <summary>
            Creates new instance of this class.
            </summary>
            <param name="accessToken">Access token.</param>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.#ctor(Limilabs.Client.Authentication.Google.OAuthToken,Limilabs.Client.Authentication.Google.OAuthToken)">
            <summary>
            Creates new instance of this class.
            </summary>
            <param name="consumer">Consumer token.</param>
            <param name="accessToken">Access token.</param>
            <seealso cref="P:Limilabs.Client.Authentication.Google.GmailOAuth.AccessToken"/>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.GetEmail">
            <summary>
            Gets email address of the user using https://www.googleapis.com/userinfo/v2/me endpoint.
            You need to specify <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.UserInfoEmailScope"/> scope to be able to use this method.
            </summary>
            <returns>User's email address.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.GetEmailPlus">
            <summary>
            Gets email address of the user using https://www.googleapis.com/plus/v1/people/me endpoint.
            You need to specify <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.EmailScope"/> to be able to use this method.
            Remember to turn on "Google+ API" in Google Developer Console.
            </summary>
            <returns>User's email address.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.GetContacts">
            <summary>
            Gets all contacts of the default user.
            You need to specify <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.ContactsScope"/> when calling <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})"/> or <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.String,System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})"/> to be able to use this method.
            </summary>
            <returns>User's contacts.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.GetContacts(System.String)">
            <summary>
            Gets all contacts of the specified user.
            You need to specify <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.ContactsScope"/> when calling <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})"/> or <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAuthorizationUrl(System.String,System.Collections.Generic.List{Limilabs.Client.Authentication.Google.GoogleScope})"/> to be able to use this method.
            </summary>
            <param name="email">Email address for which contacts should be downloaded.</param>
            <returns>User's contacts.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GoogleApi.RevokeToken(System.String)">
            <summary>
            Revokes specified token.
            </summary>
            <param name="token">Token to revoke.</param>
        </member>
        <member name="T:Limilabs.Client.Authentication.Google.GoogleScope">
            <summary>
            Represents Google scope (permission). 
            You can use static fields of this class like: <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.ImapAndSmtp"/>, <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.UserInfoEmailScope"/> and <see cref="F:Limilabs.Client.Authentication.Google.GoogleScope.ContactsScope"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.Google.GoogleScope.Mail">
            <summary>
            IMAP, POP3 and SMTP access (https://mail.google.com/).
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.Google.GoogleScope.ImapAndSmtp">
            <summary>
            IMAP and SMTP access (https://mail.google.com/).
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.Google.GoogleScope.UserInfoEmailScope">
            <summary>
            Email address access (https://www.googleapis.com/auth/userinfo.email).
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.Google.GoogleScope.EmailScope">
            <summary>
            Email address access (email).
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.Google.GoogleScope.ContactsScope">
            <summary>
            Contacts access (https://www.google.com/m8/feeds/).
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.GoogleScope.#ctor(System.String)">
            <summary>
            Creates new Google scope.
            </summary>
            <param name="url">Scope url.</param>
        </member>
        <member name="T:Limilabs.Client.Authentication.Google.OAuthToken">
            <summary>
            Represents OAuth token nad token secret.
            </summary>
        </member>
        <member name="P:Limilabs.Client.Authentication.Google.OAuthToken.Token">
            <summary>
            Gets OAuth token.
            </summary>
        </member>
        <member name="P:Limilabs.Client.Authentication.Google.OAuthToken.TokenSecret">
            <summary>
            Gets OAuth token secret.
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.OAuthToken.#ctor(System.String,System.String)">
            <summary>
            Creates new OAuthToken object.
            </summary>
            <param name="token">OAuth token.</param>
            <param name="tokenSecret">OAuth token secret.</param>
        </member>
        <member name="T:Limilabs.Client.Authentication.Google.ReturnUrl">
            <summary>
            Provides easy access to url parameters required to finish OAuth authorization.
            </summary>
        </member>
        <member name="P:Limilabs.Client.Authentication.Google.ReturnUrl.OAuthToken">
            <summary>
            Gets oauth_token url parameter, that can be used to retrieve <see cref="T:Limilabs.Client.Authentication.Google.GmailOAuth"/> class from permanent storage.
            </summary>
        </member>
        <member name="P:Limilabs.Client.Authentication.Google.ReturnUrl.OAuthVerifier">
            <summary>
            Gets oauth_verifier url parameter, that can be used to retrieve access token by using <see cref="M:Limilabs.Client.Authentication.Google.GmailOAuth.GetAccessToken(System.String)"/> method.
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.Google.ReturnUrl.#ctor(System.String)">
            <summary>
            Creates new instance of this class.
            </summary>
            <param name="returnUrl">Raw return url e.g. "https://www.yourwebsite.com?oauth_verifier=XXX&amp;oauth_token=YYY".</param>
        </member>
        <member name="T:Limilabs.Client.Authentication.HttpMethod">
            <summary>
            HTTP protocol method used by <see cref="T:Limilabs.Client.Authentication.OAuth"/> authentication (<see cref="M:Limilabs.Client.Authentication.IOAuth.HttpMethod(Limilabs.Client.Authentication.HttpMethod)"/>).
            </summary>
            <seealso cref="T:Limilabs.Client.Authentication.OAuth"/>
            <seealso cref="T:Limilabs.Client.Authentication.IOAuth"/>
            <seealso cref="T:Limilabs.Client.Authentication.ISignedOAuth"/>
        </member>
        <member name="F:Limilabs.Client.Authentication.HttpMethod.GET">
            <summary>
            GET method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.HttpMethod.POST">
            <summary>
            POST method.
            </summary>
        </member>
        <member name="T:Limilabs.Client.Authentication.IOAuth">
            <summary>
            Represents not signed OAuth request.
            </summary>
            <seealso cref="T:Limilabs.Client.Authentication.OAuth"/>
            <seealso cref="T:Limilabs.Client.Authentication.ISignedOAuth"/>
        </member>
        <member name="M:Limilabs.Client.Authentication.IOAuth.Consumer(System.String,System.String)">
            <summary>
            Sets the consumer.
            </summary>
            <param name="consumerKey">Consumer key</param>
            <param name="consumerSecret">Consumer secret</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.IOAuth.SignatureMethod(Limilabs.Client.Authentication.SignatureType)">
            <summary>
            Sets the signature method.
            </summary>
            <param name="signatureMethod">Signature method</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.IOAuth.HttpMethod(Limilabs.Client.Authentication.HttpMethod)">
            <summary>
            Sets HTTP method (GET or POST).
            </summary>
            <param name="httpMethod">HTTP method (GET or POST).</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.IOAuth.TimeStamp(System.String)">
            <summary>
            Sets the timestamp. Timestamp is generated automatically if not set.
            This method should be used in tests only.
            </summary>
            <param name="timestamp">Timestamp</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.IOAuth.Nonce(System.String)">
            <summary>
            Sets nonce. Nonce is generated automatically if not set.
            This method should be used in tests only.
            </summary>
            <param name="nonce">Nonce.</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.IOAuth.Token(System.String)">
            <summary>
            Sets OAuth token (oauth_token).
            </summary>
            <param name="token">Token to set.</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.IOAuth.TokenSecret(System.String)">
            <summary>
            Sets OAuth token secret (oauth_token_secret).
            </summary>
            <param name="tokenSecret">Token secret to set.</param>
            <returns>This OAuth object.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.IOAuth.AddParameter(System.String,System.String)">
            <summary>
            Adds new parameter to this request.
            </summary>
            <param name="name">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <returns>This OAuth object.</returns>
            <seealso cref="T:Limilabs.Client.Authentication.OAuthParameterName"/>
        </member>
        <member name="M:Limilabs.Client.Authentication.IOAuth.Sign">
            <summary>
            Signs this request and creates signed OAuth object.
            </summary>
            <returns>Signed OAuth object.</returns>
        </member>
        <member name="T:Limilabs.Client.Authentication.ISignedOAuth">
            <summary>
            Represents signed OAuth request.
            </summary>
            <seealso cref="T:Limilabs.Client.Authentication.OAuth"/>
            <seealso cref="T:Limilabs.Client.Authentication.IOAuth"/>
        </member>
        <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetUrl">
            <summary>
            Gets entire url including parameters, OAuth parameters and signature.
            </summary>
            <returns>Url including parameters, OAuth parameters and signature.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetUrlBase">
            <summary>
            Gets base url of this request.
            </summary>
            <returns>Base url of this request.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetXOAuthKey">
            <summary>
            Gets XOAuth key that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/> or <see cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)"/> login methods.
            </summary>
            <returns>XOAuth key.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetSignature">
            <summary>
            Gets signature of this request.
            </summary>
            <returns>Request signature.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetNormalizedUrl">
            <summary>
            Gets normalized url (parameters are sorted by name) of this request.
            </summary>
            <returns>Normalized url.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetNormalizedParameters">
            <summary>
            Gets normalized parameter (sorted by name) of this request.
            </summary>
            <returns>Normalized parameter list.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ISignedOAuth.GetParameters">
            <summary>
            Gets parameter collection of this request.
            This collection includes all OAuth parameters and signature.
            </summary>
            <returns>Request parameter collection. Includes all OAuth parameters and signature</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ISignedOAuth.ExecuteWebRequest">
            <summary>
            Executes a web request using HTTP protocol, and method specified by <see cref="M:Limilabs.Client.Authentication.IOAuth.HttpMethod(Limilabs.Client.Authentication.HttpMethod)"/>.
            </summary>
            <returns>Parameter list returned by the server.</returns>
        </member>
        <member name="T:Limilabs.Client.Authentication.Outlook.OutlookApi">
            <summary>
            Provides access to Outlook API.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH2(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH2(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)"/>
        </member>
        <member name="M:Limilabs.Client.Authentication.Outlook.OutlookApi.#ctor(System.String)">
            <summary>
            Creates new instance of this class.
            </summary>
            <param name="accessToken">Access token.</param>
        </member>
        <member name="M:Limilabs.Client.Authentication.Outlook.OutlookApi.GetEmail">
            <summary>
            Gets email address of the user.
            </summary>
            <returns>User's email address.</returns>
        </member>
        <member name="T:Limilabs.Client.Authentication.Outlook.OutlookScope">
            <summary>
            Represents Outlook scope (permission). 
            You can use static fields of this class like: <see cref="F:Limilabs.Client.Authentication.Outlook.OutlookScope.ImapAndSmtp"/>, <see cref="F:Limilabs.Client.Authentication.Outlook.OutlookScope.EmailAddress"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.Outlook.OutlookScope.ImapAndSmtp">
            <summary>
            IMAP and SMTP access (wl.imap").
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.Outlook.OutlookScope.EmailAddress">
            <summary>
            Email address access (wl.emails).
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.Outlook.OutlookScope.OfflineAccess">
            <summary>
            Offline aaccess (wl.offline_access).
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.Outlook.OutlookScope.#ctor(System.String)">
            <summary>
            Creates new Google scope.
            </summary>
            <param name="url">Scope url.</param>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Constants.SecPkgContextAttribute.SECPKG_ATTR_SIZES">
            <summary>
            The pBuffer parameter contains a pointer to a SecPkgContext_Sizes structure.
            Queries the sizes of the structures used in the per-message functions.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Constants.SECURITY_STATUS.SEC_I_CONTINUE_NEEDED">
            <summary>
            "The function completed successfully, but must be called again to complete the context"
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Constants.SECURITY_STATUS.SEC_I_COMPLETE_NEEDED">
            <summary>
            The function completed successfully, but CompleteToken must be called
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Constants.SECURITY_STATUS.SEC_I_COMPLETE_AND_CONTINUE">
            <summary>
            The function completed successfully, but both CompleteToken and this function must be called to complete the context
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.SSPI.Ntlm.MessageBase.Write(System.IO.BinaryWriter)">
            <summary>
            12 bytes
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.SSPI.Ntlm.Ntlm2Response.Ntlmv2Hash(System.String,System.String,System.String)">
             Creates the NTLMv2 Hash of the user's password.
            
             @param target The authentication target (i.e., domain).
             @param user The username.
             @param password The password.
            
             @return The NTLMv2 Hash, used in the calculation of the NTLMv2
             and LMv2 Responses. 
        </member>
        <member name="M:Limilabs.Client.Authentication.SSPI.Ntlm.Ntlm2Response.getNTLMv2Response(System.String,System.String,System.String,System.Byte[],System.Byte[],System.Byte[],System.DateTime)">
             Calculates the NTLMv2 Response for the given challenge, using the
             specified authentication target, username, password, target information
             block, and client nonce.
            
             @param target The authentication target (i.e., domain).
             @param user The username. 
             @param password The user's password.
             @param targetInformation The target information block from the Type 2
             message.
             @param challenge The Type 2 challenge from the server.
             @param clientNonce The random 8-byte client nonce. 
            
             @return The NTLMv2 Response.
        </member>
        <member name="M:Limilabs.Client.Authentication.SSPI.Ntlm.Ntlm2Response.createBlob(System.Byte[],System.Byte[],System.DateTime)">
             Creates the NTLMv2 blob from the given target information block and
             client nonce.
            
             @param targetInformation The target information block from the Type 2
             message.
             @param clientNonce The random 8-byte client nonce.
            
             @return The blob, used in the calculation of the NTLMv2 Response.
        </member>
        <member name="M:Limilabs.Client.Authentication.SSPI.Ntlm.Ntlm2Response.getLMv2Response(System.String,System.String,System.String,System.Byte[],System.Byte[])">
             Calculates the LMv2 Response for the given challenge, using the
             specified authentication target, username, password, and client
             challenge.
            
             @param target The authentication target (i.e., domain).
             @param user The username.
             @param password The user's password.
             @param challenge The Type 2 challenge from the server.
             @param clientNonce The random 8-byte client nonce.
            
             @return The LMv2 Response. 
        </member>
        <member name="M:Limilabs.Client.Authentication.SSPI.Ntlm.Ntlm2Response.getNTLM2SessionResponse(System.String,System.Byte[],System.Byte[])">
             Calculates the NTLM2 Session Response for the given challenge, using the
             specified password and client nonce.
            
             @param password The user's password.
             @param challenge The Type 2 challenge from the server.
             @param clientNonce The random 8-byte client nonce.
            
             @return The NTLM2 Session Response.  This is placed in the NTLM
             response field of the Type 3 message; the LM response field contains
             the client nonce, null-padded to 24 bytes.
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateUnicode">
            <summary>
            The client sets this flag to indicate that it supports Unicode strings.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateOem">
            <summary>
            This is set to indicate that the client supports OEM strings.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.RequestTarget">
            <summary>
            This requests that the server send the authentication target with the Type 2 reply.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.Unknown1">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateSign">
            <summary>
            Specifies that authenticated communication between the client and server should carry a digital signature (message integrity).
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateSeal">
            <summary>
            Specifies that authenticated communication between the client and server should be encrypted (message confidentiality).
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateDatagramStyle">
            <summary>
            Indicates that datagram authentication is being used.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateLanManagerKey">
            <summary>
            Indicates that the Lan Manager Session Key should be used for signing and sealing authenticated communications.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateNetware">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateNtlm">
            <summary>
            Indicates that NTLM authentication is supported.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.Unknown2">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateAnonymous">
            <summary>
            Sent by the client in the Type 3 message to indicate that an anonymous context has been established. This also affects the response fields (as detailed in the "Anonymous Response" section).
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateDomainSupplied">
            <summary>
            When set, the client will send with the message the name of the domain in which the workstation has membership.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateWorkstationSupplied">
            <summary>
            Indicates that the client is sending its workstation name with the message. 
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateLocalCall">
            <summary>
            Sent by the server to indicate that the server and client are on the same machine. Implies that the client may use the established local credentials for authentication instead of calculating a response to the challenge.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateAlwaysSign">
            <summary>
            Indicates that communication between the client and server after authentication should carry a "dummy" signature.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.TargetTypeDomain">
            <summary>
            Sent by the server in the Type 2 message to indicate that the target authentication realm is a domain.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.TargetTypeServer">
            <summary>
            Sent by the server in the Type 2 message to indicate that the target authentication realm is a server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.TargetTypeShare">
            <summary>
            Sent by the server in the Type 2 message to indicate that the target authentication realm is a share. Presumably, this is for share-level authentication. Usage is unclear.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateNtlm2Key">
            <summary>
            Indicates that this client supports the NTLM2 signing and sealing scheme; if negotiated, this can also affect the response calculations. 
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.RequestInitResponse">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.RequestAcceptResponse">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.RequestNonNTSessionKey">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateTargetInfo">
            <summary>
            Sent by the server in the Type 2 message to indicate that it is including a Target Information block in the message. The Target Information block is used in the calculation of the NTLMv2 response.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.Unknown3">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.Unknown4">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.Unknown5">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.Unknown6">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.Unknown7">
            <summary>
            This flag's usage has not been identified.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.Negotiate128">
             <summary>
            Indicates that this client supports strong (128-bit) encryption. 
             </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.NegotiateKeyExchange">
            <summary>
            Indicates that the client will provide an encrypted master key in the "Session Key" field of the Type 3 message.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPI.Ntlm.NtlmFlags.Negotiate56">
            <summary>
            Indicates that this client supports medium (56-bit) encryption. 
            </summary>
        </member>
        <member name="T:Limilabs.Client.Authentication.SSPI.Ntlm.OSVersion">
            <summary>
            8 bytes
            </summary>
        </member>
        <member name="T:Limilabs.Client.Authentication.SSPI.Ntlm.SecurityBuffer">
            <summary>
            8 bytes
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.SSPI.SSPIAuthentication.GetNextMessage(System.Byte[])">
            <summary>
            Gets the next message.
            </summary>
            <param name="inToken">Null if it's the initial response.</param>
        </member>
        <member name="T:Limilabs.Client.Authentication.SSPIException">
            <summary>
            Represents SSPI exception.
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.SSPIException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of TemplateException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="T:Limilabs.Client.Authentication.SSPIMechanism">
             <summary>
             Represents SSPI mechanism.
             </summary>
             <remarks>
             SSPI authentication methods (NTLM, Kerberos, Negotiate) can work in two modes:
             
             1. The user specifies their credentials explicitly (like other authentication methods work), and authentication token is created from them.
             
             2. Integrated Windows Authentication (IWA). 
             The authentication token is created by Windows from the credentials of the currently logged Windows user. 
             The application never deals with the account password. 
             IWA mode provides increased security and spares the end user from entering their credentials.
             
             IWA, however, cannot be used when the currently logged Windows user is not an interactive user. 
             
             In web applications, you often deal with system users (like NETWORK SERVICE, ASPNET, etc). 
             To be able to use IWA in an ASP.NET application, the application itself must run under the context of an interactive user 
             (&lt;authentication mode="Windows"/&gt; in web.config).
            
             Also, the user from whose context the authentication token is constructed, must have a valid mailbox on the e-mail server. 
             This is important as even if the given user is registered in the Active Directory and can log in the domain, 
             it does not necessarily mean that the system has already provisioned their mailbox.
             </remarks>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM">
            <summary>
            NTLM mechanism.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos">
            <summary>
            Kerberos mechanism. Kerberos is the technological successor to NTLM.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate">
            <summary>
            Negotiate mechanism. Selects Kerberos and if not available, NTLM protocol.
            </summary>
        </member>
        <member name="T:Limilabs.Client.Authentication.OAuth">
            <summary>
            This class allows you to create signed OAuth requests.
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.OAuth.ForUrl(System.String)">
            <summary>
            Creates new OAuth object for specific url.
            </summary>
            <param name="url">Base url.</param>
            <returns>OAuth object.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.OAuth.Limilabs#Client#Authentication#IOAuth#Token(System.String)">
            <summary>
            oauth_token
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.OAuth.Limilabs#Client#Authentication#IOAuth#TokenSecret(System.String)">
            <summary>
            oauth_token_secret
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.OAuth2.OAuthUtilities.AuthorizeWithBearerToken(System.Net.HttpWebRequest,System.String)">
            <summary>
            Authorizes an HTTP request using an OAuth 2.0 access token in an HTTP Authorization header.
            </summary>
            <param name="request">The request to authorize.</param>
            <param name="accessToken">The access token previously obtained from the Authorization Server.</param>
        </member>
        <member name="T:Limilabs.Client.Authentication.OAuthParameterName">
            <summary>
            Groups all OAuth parameter names.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthConsumerKey">
            <summary>
            'oauth_consumer_key' parameter name.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthCallback">
            <summary>
            'oauth_callback' parameter name.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthVersion">
            <summary>
            'oauth_version' parameter name.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthSignatureMethod">
            <summary>
            'oauth_signature_method' parameter name.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthSignature">
            <summary>
            'oauth_signature' parameter name.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthTimestamp">
            <summary>
            'oauth_timestamp' parameter name.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthNonce">
            <summary>
            'oauth_nonce' parameter name.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthToken">
            <summary>
            'oauth_token' parameter name.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthTokenSecret">
            <summary>
            'oauth_token_secret' parameter.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.OAuthParameterName.OAuthVerifier">
            <summary>
            'oauth_verifier' parameter.
            </summary>
        </member>
        <member name="T:Limilabs.Client.Authentication.ParameterList">
            <summary>
            Represents <see cref="T:Limilabs.Client.Authentication.QueryParameter"/> collection.
            </summary>
            <seealso cref="M:Limilabs.Client.Authentication.ISignedOAuth.GetNormalizedParameters"/>
            <seealso cref="M:Limilabs.Client.Authentication.ISignedOAuth.GetParameters"/>
            <seealso cref="M:Limilabs.Client.Authentication.ISignedOAuth.ExecuteWebRequest"/>
            <seealso cref="T:Limilabs.Client.Authentication.OAuthParameterName"/>
        </member>
        <member name="P:Limilabs.Client.Authentication.ParameterList.Count">
            <summary>
            Gets the number of parameters in this collection.
            </summary>
        </member>
        <member name="P:Limilabs.Client.Authentication.ParameterList.Item(System.String)">
            <summary>
            Gets parameter by name.
            </summary>
            <param name="name">Name of the parameter to search for.</param>
            <returns>Query parameter with specified name -or- <see langword="null"/> if not found.</returns>
            <seealso cref="T:Limilabs.Client.Authentication.OAuthParameterName"/>
        </member>
        <member name="M:Limilabs.Client.Authentication.ParameterList.GetValue(System.String)">
            <summary>
            Gets value of the parameter by name.
            </summary>
            <param name="name">Name of the parameter to search for.</param>
            <returns>Value of the query parameter with specified name -or- <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ParameterList.Add(System.String,System.String)">
            <summary>
            Adds new query parameter with specified name and value to this collection.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:Limilabs.Client.Authentication.ParameterList.Add(Limilabs.Client.Authentication.QueryParameter)">
            <summary>
            Adds specified query parameter to this collection.
            </summary>
            <param name="queryParameter">Parameter to add.</param>
        </member>
        <member name="M:Limilabs.Client.Authentication.ParameterList.SortByName">
            <summary>
            Sorts parameters by name.
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.ParameterList.Render">
            <summary>
            Renders parameter list to string in url format ("name=value&amp;name2=value2").
            Values are always encoded and never quoted.
            </summary>
            <returns>Parameters in url format.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ParameterList.RenderAsHeader">
            <summary>
            Renders parameter list to string in http header format ("name=value,name2=value2").
            </summary>
            <returns>Parameters in url format.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ParameterList.Remove(System.String)">
            <summary>
            Removes all parameters with specified name.
            </summary>
            <param name="name">Name of the parameters to remove.</param>
        </member>
        <member name="M:Limilabs.Client.Authentication.ParameterList.Parse(System.String)">
            <summary>
            Parses specified query string and creates parameter collection.
            </summary>
            <param name="queryString">Query string to parse.</param>
            <returns>New parameter list.</returns>
        </member>
        <member name="M:Limilabs.Client.Authentication.ParameterList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Enumerator that iterates through the collection</returns>
        </member>
        <member name="T:Limilabs.Client.Authentication.QueryParameter">
            <summary>
            Represents query parameter.
            </summary>
            <seealso cref="M:Limilabs.Client.Authentication.IOAuth.AddParameter(System.String,System.String)"/>
            <seealso cref="T:Limilabs.Client.Authentication.ParameterList"/>
        </member>
        <member name="P:Limilabs.Client.Authentication.QueryParameter.Name">
            <summary>
            Gets parameter name.
            </summary>
        </member>
        <member name="P:Limilabs.Client.Authentication.QueryParameter.Value">
            <summary>
            Gets parameter value.
            </summary>
        </member>
        <member name="M:Limilabs.Client.Authentication.QueryParameter.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of query parameter.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="T:Limilabs.Client.Authentication.SignatureType">
            <summary>
            Signature types used by <see cref="T:Limilabs.Client.Authentication.OAuth"/> authentication (<see cref="M:Limilabs.Client.Authentication.IOAuth.SignatureMethod(Limilabs.Client.Authentication.SignatureType)"/>).
            </summary>
            <seealso cref="T:Limilabs.Client.Authentication.OAuth"/>
            <seealso cref="T:Limilabs.Client.Authentication.IOAuth"/>
            <seealso cref="T:Limilabs.Client.Authentication.ISignedOAuth"/>
        </member>
        <member name="F:Limilabs.Client.Authentication.SignatureType.HMACSHA1">
            <summary>
            HMACSHA1 method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SignatureType.PLAINTEXT">
            <summary>
            Plaint text method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.Authentication.SignatureType.RSASHA1">
            <summary>
            Not supported RSASHA1 method.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapConfiguration">
            <summary>
            Represents <see cref="T:Limilabs.Client.IMAP.Imap"/> configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapConfiguration.AlwaysQuoteFolders">
            <summary>
            Gets or sets a value indicating if mailbox (folder) names should be always quoted. 
            Default is false. Coremail servers default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapConfiguration.UseLiteralOnDoubleQuoteInFolders">
            <summary>
            Gets or sets a value indicating if mailbox (folder) containing double quotes should use literals. 
            Default is false. Exchange servers default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapConfiguration.AlwaysConcatRN">
            <summary>
            Gets or sets a value indicating \r\n isa always concatenated when sending data to server, so it is written in a single write operation. 
            Default is false. Yahoo servers default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapConfiguration.RetryAuthWithoutInitialResponse">
            <summary>
            Gets or sets value indicating if AUTHENTICATE command should be retried without initial response on failure.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapConfiguration.AuthWithoutInitialResponse">
            <summary>
            Gets or sets the boolean value indicating if AUTHENTICATE command should be used without initial response only.
            Default is false. 
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapConfiguration.AuthenticationEncoding">
            <summary>
            Gets or sets text encoding used when providing credentials.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapReferralException">
            <summary>
            Represents an IMAP server error response, that contains REFERRAL information.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapReferralException.ImapUrl">
            <summary>
            Gets IMAP URL from REFFERAL response code.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapReferralException.Server">
            <summary>
            Gets the server address extracted from IMAP URL from REFFERAL response code.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.ImapReferralException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of ImapResponseException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapUTF8Extension">
            <summary>
            Represents IMAP UTF8 extension.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapUTF8Extension.Version">
            <summary>
            UTF8 support version.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.FolderStatusUpdatedEventArgs">
            <summary>
            Represents <see cref="E:Limilabs.Client.IMAP.FolderStatus.Updated"/> event arguments.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.MimeTextStructure">
             <summary>
             Represents data part of a mime tree stored on an IMAP server.
            
             You can obtain instance of this class using <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Int64)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByUID(System.Int64)"/>.
            
             You can download actual content of such part using one of following methods:
             <see cref="M:Limilabs.Client.IMAP.Imap.GetTextByUID(Limilabs.Client.IMAP.MimeTextStructure)"/>, 
             <see cref="M:Limilabs.Client.IMAP.Imap.GetTextByUID(Limilabs.Client.IMAP.MimeTextStructure,System.Int64)"/>, 
             <see cref="M:Limilabs.Client.IMAP.Imap.GetTextByUID(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeTextStructure})"/>.
             </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeTextStructure.Charset">
            <summary>
            Gets the charset of this part.
            </summary>
            <seealso cref="P:Limilabs.Client.IMAP.MimeTextStructure.Encoding"/>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeTextStructure.CharsetMatch">
            <summary>
            Gets the result of matching <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Charset"/> to <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Encoding"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeTextStructure.Encoding">
            <summary>
            Gets the encoding of this part.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeTextStructure.Text">
            <summary>
            Gets text represented by this part.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)"/> to fill this property.
            May be null, if server responds with NIL response.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.MimeCalendarStructure">
            <summary>
            Represents part of a mime tree containing text/calendar data stored on an IMAP server. You can download actual content of such part using one <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeCalendarStructure.Appointment">
            <summary>
            Gets the appointment, remember to use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> before accessing this property.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.MimeVCardStructure">
            <summary>
            Represents part of a mime tree containing text/vcard data stored on an IMAP server. You can download actual content of such part using one <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeVCardStructure.VCard">
            <summary>
            Gets the vcard, remember to use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> before accessing this property.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.CriterionParenthesesMode">
            <summary>
            Represents how parentheses are used in genereted query.
            You can find more details here: <a href="https://www.limilabs.com/blog/imap-search-requires-parentheses">IMAP search requires parentheses</a>.
            </summary>
            <see cref="M:Limilabs.Client.IMAP.FluentSearch.Parentheses(Limilabs.Client.IMAP.CriterionParenthesesMode)"/>
        </member>
        <member name="F:Limilabs.Client.IMAP.CriterionParenthesesMode.Never">
            <summary>
            Don't use parentheses at all. This setting may lead to incorrect query being generated.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.CriterionParenthesesMode.Always">
            <summary>
            Parentheses are always used (this affects <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/>, <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)"/>, <see cref="M:Limilabs.Client.IMAP.Expression.Not(Limilabs.Client.IMAP.ICriterion)"/>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.CriterionParenthesesMode.OnNestedAnd">
            <summary>
            Parentheses are used only when nested <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/> is used. This is the default setting.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.RawEnvelope">
            <summary>
            Representing raw data received from the IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.RawEnvelope.Date">
            <summary>
            Gets raw <see cref="P:Limilabs.Client.IMAP.Envelope.Date"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.RawEnvelope.Subject">
            <summary>
            Gets raw <see cref="P:Limilabs.Client.IMAP.Envelope.Subject"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.RawEnvelope.InReplyTo">
            <summary>
            Gets raw <see cref="P:Limilabs.Client.IMAP.Envelope.InReplyTo"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.RawEnvelope.MessageID">
            <summary>
            Gets raw <see cref="P:Limilabs.Client.IMAP.Envelope.MessageID"/>.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapResponseException">
            <summary>
            Represents an IMAP server error response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapResponseException.Response">
            <summary>
            Gets IMAP server response that caused this exception to be thrown.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.ImapResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of ImapResponseException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="T:Limilabs.Client.IMAP.MimeBaseStructure">
            <summary>
            Base class for classes representing MIME tree parts stored on an IMAP server.
            </summary>    
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeBaseStructure.ID">
            <summary>
             Gets the id of this part.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeBaseStructure.UID">
            <summary>
             Gets the unique id (UID) of the message, that this part belongs to.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber">
            <summary>
             Gets the message number of the message, that this part belongs to.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeBaseStructure.ContentType">
            <summary>
            Gets the content type of this part. 
            </summary>
            <remarks>
            <see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain"/> is assumed when <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.HasContentType"/> is false.
            </remarks>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeBaseStructure.HasContentType">
            <summary>
            Gets boolean value indicating, if content-type was specified explicitly for this entity.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapUTF8Version">
            <summary>
            Represents UTF8 support version supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapUTF8Version.Only">
            <summary>
            AUTH=ONLY authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapUTF8Version.Accept">
            <summary>
            AUTH=ACCEPT authentication method.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.SequenceSet">
            <summary>
            Represents IMAP sequence set (collection of <see cref="T:Limilabs.Client.IMAP.Range"/> elements).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SequenceSet.Ranges">
            <summary>
            Gets all ranges represented by this sequence.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.SequenceSet.#ctor(System.Collections.Generic.List{System.Int64})">
            <summary>
            Creates new sequence containing specified ids. IDs are sorted and combined using <see cref="T:Limilabs.Client.IMAP.Range"/> instances.
            </summary>
            <param name="ids">IDs.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.SequenceSet.#ctor(System.Int64)">
            <summary>
            Creates new sequence containing specified id.
            </summary>
            <param name="id">ID.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.SequenceSet.#ctor(Limilabs.Client.IMAP.Range)">
            <summary>
            Creates new sequence containing specified range.
            </summary>
            <param name="range">Range.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.SequenceSet.#ctor(System.Collections.Generic.List{Limilabs.Client.IMAP.Range})">
            <summary>
            Creates new sequence containing specified ranges.
            </summary>
            <param name="ranges">Ranges.</param>
        </member>
        <member name="T:Limilabs.Client.IMAP.FluentThread">
            <summary>
            Represents IMAP threading query. You can use <see cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)"/> method to create this object.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Search" />
            <remarks>
            <see cref="F:Limilabs.Client.IMAP.ResultType.Uids" /> is default, use <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)"/> method to change the result type.
            </remarks>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentThread.SetThreadMethod(Limilabs.Client.IMAP.ThreadMethod)">
            <summary>
            Sets threading method. You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedThreadMethods"/> method to get all methods supported by remote server.
            </summary>
            <param name="method">Threading method remote server should use.</param>
            <returns>This threading query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)">
            <summary>
            Sets the result type (message numbers or UIDs) of this threading query.
            </summary>
            <param name="resultType">Result type.</param>
            <returns>This threading query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentThread.UseEncoding(System.Text.Encoding)">
            <summary>
            Forces the use of specified encoding.
            </summary>
            <param name="encoding">Search parameters encoding.</param>
            <returns>This threading query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentThread.Where(Limilabs.Client.IMAP.ICriterion)">
            <summary>
            Adds search criteria to this threading query.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/> and other <see cref="T:Limilabs.Client.IMAP.Expression"/> methods to create a valid search query.
            You can also pass <see cref="T:Limilabs.Client.IMAP.SimpleImapQuery"/> to this method.
            </summary>
            <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/> to join several criterions.</param>
            <returns>This threading query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentThread.GetThreads">
            <summary>
            Issues the threading query and retrieves results, that match the search criteria, using server-side threading.
            </summary>
            <returns>List of message threads.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentThread.op_Implicit(Limilabs.Client.IMAP.FluentThread)~System.Collections.Generic.List{Limilabs.Client.IMAP.MessageThread}">
            <summary>
            Issues the threading query and retrieves results, that match the search criteria, using server-side threading.
            </summary>
            <param name="thread">Threading query.</param>
            <returns>List of message threads.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.Envelope">
            <summary>
             Represents combined information about envelope (subject, from to, ...) and structure (attachments) of the email stored on the IMAP server.
             You can use  <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})"/>
             methods to get MessageInfos for specified emails.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.UID">
            <summary>
             Gets UID of this message assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.MessageNumber">
            <summary>
             Gets message number assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.Raw">
            <summary>
             Gets object representing raw data received from the IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.Subject">
            <summary>
            Gets the subject of the message ('Subject' header). 
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.InReplyTo">
            <summary>
            Gets or sets parent message id of the message ('In-Reply-To' header).
            Without surrounding brackets (&lt; and &gt;)
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.MessageID">
            <summary>
            Gets or sets id of the message ('Message-ID' header).
            Without surrounding brackets (&lt; and &gt;)
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.Date">
            <summary>
            Gets the send date of the message ('Date' header). 
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.From">
            <summary>
            Gets the author(s) of the message ('From' header).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.Sender">
            <summary>
            Gets mailbox of the agent responsible for the actual transmission ('Sender' header).
            If 'Sender' is empty you should use <see cref="P:Limilabs.Client.IMAP.Envelope.From"/> property.
            </summary>
            <remarks>
            'Sender' field is not required if 'From' property contains only one <see cref="T:Limilabs.Mail.Headers.MailBox"/>.
            'Sender' property is filled when message is from more than one person ('From' contains more than one mailbox).
            In such case it is needed to provide information which mailbox is responsible for the actual transmission.
            </remarks>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.ReplyTo">
            <summary>
            Gets 'Reply-to' field, mailbox(es) to which the author of the message suggests that replies be sent.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.To">
            <summary>
            Gets 'To' field, address(es) of the primary recipient(s) of the message.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.Cc">
            <summary>
            Gets the addresses of others who are to receive the message, 
            even tough the content of the message may not be directed at them ('CC', Carbon Copy header). 
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.Bcc">
            <summary>
            Gets the addresses of others who are to receive the message ('BCC', Blind Carbon Copy header), 
            tough the content of the message may not be directed at them. 
            This collection can be modified.
            May be empty.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.InternalDateString">
            <summary>
            Gets a string representing the internal date of the message (INTERNALDATE).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.InternalDate">
            <summary>
            Gets the internal date of the message (INTERNALDATE).
            May be <c>null</c> in case of parsing error.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.GmailThreadId">
            <summary>
            Gmail provides a thread ID (X-GM-THRID) to associate groups of messages in the same manner as in the Gmail web interface.
            The thread ID is a 64-bit unsigned integer.
            This property is set only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1"/> extension support.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.GmailMessageId">
            <summary>
            Gmail provides a unique message ID (X-GM-MSGID) for each email so that a unique message may be identified across multiple folders. 
            The message ID is a 64-bit unsigned integer.
            This property is set only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1"/> extension support.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Envelope.Size">
            <summary>
            Size of the message.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.FolderFlag">
            <summary>
            Represents flag used by IMAP protocol to mark folders.
            Static fields of this class represent most common flags (e.g. <see cref="F:Limilabs.Client.IMAP.FolderFlag.XInbox"/>, <see cref="F:Limilabs.Client.IMAP.FolderFlag.Sent"/>, ...).
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GetFolders"/> 
            <seealso cref="P:Limilabs.Client.IMAP.FolderInfo.Flags"/>
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.XInbox">
            <summary>
            "\Inbox" flag used by XLIST command.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.XAllMail">
            <summary>
            "\AllMail" flag used by XLIST command.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.XImportant">
            <summary>
            "\Important" flag used by XLIST command.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.XSpam">
            <summary>
            "\Spam" flag used by XLIST command.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.XStarred">
            <summary>
            "\Starred" flag used by XLIST command.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.All">
            <summary>
            This folder presents all messages in the user's message store (\All).
            Implementations MAY omit some messages, such as, perhaps, those in \Trash and \Junk.  
            When this special use is supported, it is almost certain to represent a virtual folder.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Archive">
            <summary>
            This folder is used to archive messages (\Archive). 
            The meaning of an "archival" folder is server-dependent; typically, it will be used to get messages out of the inbox, 
            or otherwise keep them out of the user's way, while still making them accessible.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Drafts">
            <summary>
            This folder is used to hold draft messages - typically, messages that are being composed but have not yet been sent (\Drafts).
            In some server implementations, this might be a virtual folder,
            containing messages from other folders that are marked with the <see cref="F:Limilabs.Client.IMAP.Flag.Draft"/> message flag.  
            Alternatively, this might just be advice that a client put drafts here.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Flagged">
            <summary>
            This folder presents all messages marked in some way as "important" (\Flagged). 
            When this special use is supported, it is likely to represent a virtual folder collecting messages (from other folders) 
            that are marked with the "\Flagged" message flag.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Junk">
            <summary>
            This folder is where messages deemed to be junk mail are held (\Junk).
            Some server implementations might put messages here automatically.  
            Alternatively, this might just be advice to a client-side spam filter.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Sent">
            <summary>
            This folder is used to hold copies of messages that have been sent (\Sent).  
            Some server implementations might put messages here automatically.  
            Alternatively, this might just be advice that a client save sent messages here. 
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Trash">
            <summary>
            This folder is used to hold messages that have been deleted or marked for deletion (\Trash).  
            In some server implementations, this might be a virtual folder, containing messages from other folders. 
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.HasChildren">
            <summary>
            The presence of this attribute indicates that the folder has child folders that are accessible to the user (\HasChildren).
            </summary>
            <remarks>
            <a href="https://www.limilabs.com/mail/rfc/3348">RFC 3348</a>
            </remarks>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.HasNoChildren">
            <summary>
            The presence of this attribute indicates that the folder has NO child mailboxes that are accessible to the user.  
            If a folder has the <see cref="F:Limilabs.Client.IMAP.FolderFlag.NoInferiors"/> attribute, the
            <see cref="F:Limilabs.Client.IMAP.FolderFlag.HasNoChildren"/> attribute is redundant and SHOULD be omitted. (\HasNoChildren).         
            </summary>
            <remarks>
            <a href="https://www.limilabs.com/mail/rfc/3348">RFC 3348</a>
            </remarks>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.NoInferiors">
            <summary>
            It is not possible for any child levels of hierarchy to exist under this name; 
            no child levels exist now and none can be created in the future (\Noinferiors). This flag also implies <see cref="F:Limilabs.Client.IMAP.FolderFlag.HasNoChildren"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.NoSelect">
            <summary>
             It is not possible to use this name as a selectable folder (\Noselect).
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.NonExistent">
            <summary>
             Indicates that a folder name does not refer to an existing mailbox (\NonExistent). This flag also implies <see cref="F:Limilabs.Client.IMAP.FolderFlag.NoSelect"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Remote">
            <summary>
             Indicates that a folder is remote folder. (\Remote).
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Subscribed">
            <summary>
             Indicates that a folder is subscribed. (\Subscribed).
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Marked">
            <summary>
            The folder has been marked as "interesting" by the server; 
            The folder probably contains messages that have been added since the last time the folder was selected -or-
            has a non-zero RECENT message count. (\Marked).
             </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.FolderFlag.Unmarked">
            <summary>
            The folder has been marked as "uninteresting" by the server; 
            The folder does not contain any additional messages since the last time the folder was selected -or-
            has a zero RECENT message count. (\Unmarked).
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.GmailMessageLabels">
            <summary>
            Represents Gmail labels associated with an email message.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.GmailMessageLabels.UID">
            <summary>
             Gets UID of this message assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.GmailMessageLabels.MessageNumber">
            <summary>
             Gets message number assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.GmailMessageLabels.Labels">
            <summary>
            Gets Gmail labels associated with the specified message.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.IDInformation">
            <summary>
            Represents client identification information used by ID command (<see cref="F:Limilabs.Client.IMAP.ImapExtension.ID"/>)
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.IDInformation.Name">
            <summary>
            Gets or sets name of the program.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.IDInformation.Version">
            <summary>
            Gets or sets version number of the program.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.IDInformation.Os">
            <summary>
            Gets or sets name of the operating system.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.IDInformation.OsVersion">
            <summary>
            Gets or sets version of the operating system.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.IDInformation.Vendor">
            <summary>
            Gets or sets vendor of the program.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.IDInformation.SupportUrl">
            <summary>
            Gets or sets support URL for the program.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.IDInformation.Contact">
            <summary>
            Gets or sets contact email for the program.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapAuthenticationMethod">
            <summary>
            Represents authentication methods supported by the remote server.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods"/> method to obtain the list of all methods supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.Login">
            <summary>
            AUTH=LOGIN authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.Plain">
            <summary>
            AUTH=PLAIN authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.CramMD5">
            <summary>
            AUTH=CRAM-MD5 authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.DigestMD5">
            <summary>
            AUTH=DIGEST-MD5 authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.XOAuth">
            <summary>
            AUTH=XOAUTH authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.XOAuth2">
            <summary>
            AUTH=XOAUTH2 authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.NTLM">
            <summary>
            AUTH=NTLM authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.GssApi">
            <summary>
            AUTH=GSSAPI authentication method.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapAuthExtension">
            <summary>
            Represents IMAP AUTH extension.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapAuthExtension.Method">
            <summary>
            Authentication method.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapExtension">
            <summary>
            Represents extensions supported by the remote server.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/> method to obtain the list of all extensions supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.IMAP4rev1">
            <summary>
            Represents IMAP4rev1 extension.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.Idle">
            <summary>
            Represents IDLE extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.Idle"/> or <see cref="M:Limilabs.Client.IMAP.Imap.Idle(System.TimeSpan)"/> to wait for mailbox changes. 
            (<a href="https://www.limilabs.com/mail/rfc/2177">RFC 2177</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus">
            <summary>
            Represents UIDPLUS extension. You can use return value of <see cref="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,Limilabs.Mail.IMail)"/>, <see cref="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,System.Byte[])"/>, copy and move methods.
            (<a href="https://www.limilabs.com/mail/rfc/4315">RFC 4315</a>)
             </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.XList">
            <summary>
            Represents XLIST extension. You can <see cref="T:Limilabs.Client.IMAP.CommonFolders"/> class to get common folder names (e.g. Spam, Sent items).
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.Sort">
            <summary>
            Represents SORT extension. You can use <see cref="M:Limilabs.Client.IMAP.FluentSearch.Sort(Limilabs.Client.IMAP.ISorter)"/> to sort search results.
            (<a href="https://www.limilabs.com/mail/rfc/5256">RFC 5256</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.Auth">
            <summary>
            Represents AUTH extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods"/> to obtain all authentication methods supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.StartTLS">
            <summary>
            Represents STARTTLS extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.StartTLS"/> to secure the connection.
            (<a href="https://www.limilabs.com/mail/rfc/2595">RFC 2595</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.LoginDisabled">
            <summary>
            <see cref="F:Limilabs.Client.IMAP.ImapAuthenticationMethod.Login"/> is disabled.
            <see cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> is going to invoke <see cref="M:Limilabs.Client.IMAP.Imap.UseBestLogin(System.String,System.String)"/> method.
            (<a href="https://www.limilabs.com/mail/rfc/2595">RFC 2595</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.Namespace">
            <summary>
            Represents NAMESPACE extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetNamespaces"/> method.  
            (<a href="https://www.limilabs.com/mail/rfc/2342">RFC 2342</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.Quota">
            <summary>
            Represents QUOTA extension. You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetQuota(System.String)"/> and <see cref="M:Limilabs.Client.IMAP.Imap.GetQuotaRoot(Limilabs.Client.IMAP.FolderInfo)"/> methods.
            (<a href="https://www.limilabs.com/mail/rfc/2087">RFC 2087</a>).
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1">
            <summary>
            Represents Gmail X-GM-EXT-1 extensions: X-GM-RAW, X-GM-MSGID, X-GM-THRID, X-GM-LABELS.
            
            <seealso cref="P:Limilabs.Client.IMAP.Envelope.GmailThreadId"/>, 
            <seealso cref="P:Limilabs.Client.IMAP.Envelope.GmailMessageId"/>
            <seealso cref="M:Limilabs.Client.IMAP.Expression.GmailThreadId(System.Decimal)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Expression.GmailMessageId(System.Decimal)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Expression.GmailRawSearch(System.String)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Expression.GmailLabel(System.String)"/>
            <seealso cref="P:Limilabs.Client.IMAP.MessageInfo.GmailLabels"/>
            
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Collections.Generic.List{System.Int64})"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Int64,System.String)"/>
            </summary>
            (http://code.google.com/apis/gmail/imap/)
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.ID">
            <summary>
            Represents ID extension. 
            (<a href="https://www.limilabs.com/mail/rfc/2971">RFC 2971</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.SASLIR">
            <summary>
            Represents SASL-IR (SASL initial client response) extension. 
            Servers that support this extension will accept an optional initial client response with the AUTHENTICATE command for any SASL mechanisms which support it.
            (<a href="https://www.limilabs.com/mail/rfc/4959">RFC 4959</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.SpecialUse">
            <summary>
            Represents SPECIAL-USE extension. 
            Servers that support this extension will return new folder flags identifying Special-Use folders.
            (<a href="https://www.limilabs.com/mail/rfc/6154">RFC 6154</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.Move">
            <summary>
            Represents MOVE extension. Allows using MOVE command for <see cref="M:Limilabs.Client.IMAP.Imap.MoveByUID(System.Int64,Limilabs.Client.IMAP.FolderInfo)"/> and <see cref="M:Limilabs.Client.IMAP.Imap.MoveByNumber(System.Int64,Limilabs.Client.IMAP.FolderInfo)"/> methods.
            (<a href="https://www.limilabs.com/mail/rfc/6851">RFC 6851</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.ESearch">
            <summary>
            Represents ESEARCH extension. Extension to SEARCH command for controlling what kind of information is returned.
            (<a href="https://www.limilabs.com/mail/rfc/4731">RFC 4731</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.MultiSearch">
            <summary>
            Represents MULTISEARCH extension. Extension to SEARCH command for multi-folder (multi-mailbox) searching.
            (<a href="https://www.limilabs.com/mail/rfc/6237">RFC 6237</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.Compress">
            <summary>
            Represents COMPRESS extension. 
            Servers that support this extension allow communication compression. You can turn compression on by using <see cref="M:Limilabs.Client.IMAP.Imap.Compress"/> method.
            (<a href="https://www.limilabs.com/mail/rfc/4959">RFC 4959</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapExtension.ImapUTF8">
            <summary>
            Represents UTF8 extension.
            (<a href="https://www.limilabs.com/mail/rfc/6855">RFC 6855</a>)
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapCommand">
            <summary>
            This class is for internal use only. Please do not use this class directly.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapSortExtension">
            <summary>
            Represents IMAP SORT extension.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapSortExtension.Version">
            <summary>
            SORT version.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapThreadExtension">
            <summary>
            Represents IMAP THREAD extension.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapThreadExtension.Method">
            <summary>
            Authentication method.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.MessageThread">
            <summary>
            Represents message thread.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)"/>
            <remarks>
            Either <see cref="P:Limilabs.Client.IMAP.MessageThread.UID"/> or <see cref="P:Limilabs.Client.IMAP.MessageThread.MessageNumber"/> property is set.
            You can decide which by using <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)"/> method.
            The situations in which both this properties are null are also valid - it means that the root message does not match the search criteria, but it's <see cref="P:Limilabs.Client.IMAP.MessageThread.Children"/> do.
            </remarks>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageThread.UID">
            <summary>
            Gets UID of the message that is the root of this thread.
            This property is set by default. 
            It may be null if <see cref="F:Limilabs.Client.IMAP.ResultType.Numbers"/> is specified using <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageThread.MessageNumber">
            <summary>
            Gets message number of the message that is the root of this thread.
            This property is null unless <see cref="F:Limilabs.Client.IMAP.ResultType.Numbers"/> is specified using <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageThread.Children">
            <summary>
            Gets child threads of this thread.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.MessageThread.ToString">
            <summary>
            Returns text representation of this object.
            </summary>
            <returns>Text representation of this object.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.SubFolders">
            <summary>
            Represents a value indicating how many sub folder levels should be downloaded.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GetFolders(Limilabs.Client.IMAP.SubFolders)"/>
        </member>
        <member name="F:Limilabs.Client.IMAP.SubFolders.All">
            <summary>
            All sub folders should be downloaded.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.SubFolders.Direct">
            <summary>
            Only direct subfolders should be downloaded
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ThreadMethod">
            <summary>
            Represents threading method supported by the remote server.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.SupportedThreadMethods"/> method to obtain the list of all methods supported by the remote server.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)"/>
        </member>
        <member name="F:Limilabs.Client.IMAP.ThreadMethod.OrderedSubject">
            <summary>
            Represemtes THREAD=ORDEREDSUBJECT threading method.
            </summary>
            <remarks>
            The ORDEREDSUBJECT threading algorithm is also referred to as "poor man's threading".
            The searched messages are sorted by base subject and then by the sent date.  
            The messages are then split into separate threads, with each thread containing messages with the same base subject text. 
            Finally, the threads are sorted by the sent date of the first message in the thread.
            
            The top level or "root" in ORDEREDSUBJECT threading contains the first message of every thread.
            All messages in the root are siblings of each other.  
            The second message of a thread is the child of the first message, and subsequent messages of the
            thread are siblings of the second message and hence children of the message at the root.  
            Hence, there are no grandchildren in ORDEREDSUBJECT threading.
            
            Children in ORDEREDSUBJECT threading do not have descendants.
            Client implementations SHOULD treat descendants of a child in a server response as being siblings of that child.
            </remarks>
        </member>
        <member name="F:Limilabs.Client.IMAP.ThreadMethod.References">
            <summary>
            Represemtes THREAD=REFERENCES threading method.
            </summary>
            <remarks>
            The REFERENCES threading algorithm threads the searched messages by grouping them together in parent/child 
            relationships based on which messages are replies to others. The parent/child relationships are built using two methods:
            reconstructing a message's ancestry using the references contained within it; and checking the original (not base)
            subject of a message to see if it is a reply to (or forward of) another message.
            </remarks>
        </member>
        <member name="M:Limilabs.Client.IMAP.ThreadMethod.ChooseBest(System.Collections.Generic.IList{Limilabs.Client.IMAP.ThreadMethod})">
            <summary>
            Chooses best threading method available. Returns null when no method is available.
            </summary>
            <param name="methods">All available methods.</param>
            <returns>Best threading method or null when no method is available.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.MessageInfo">
            <summary>
             Represents information about envelope (subject, from to, ...) of the email stored on the IMAP server.
             You can use <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})" /> and <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})" /> methods to get information about specified emails.
            </summary>
             <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Int64)"/>
             <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Int64)"/> 
             <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})"/>
             <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})"/> 
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageInfo.UID">
            <summary>
             Gets UID of this message assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageInfo.MessageNumber">
            <summary>
             Gets message number assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure">
            <summary>
            Gets a structure of this email message. Here you'll find information about <see cref="P:Limilabs.Client.IMAP.BodyStructure.Attachments"/>, <see cref="P:Limilabs.Client.IMAP.BodyStructure.Text">plain text</see> and <see cref="P:Limilabs.Client.IMAP.BodyStructure.Html"/> message parts.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageInfo.Envelope">
            <summary>
            Gets an envelope of this email message  Here you'll find basic information like <see cref="P:Limilabs.Client.IMAP.Envelope.Subject"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.From"/> and <see cref="P:Limilabs.Client.IMAP.Envelope.To"/> addresses.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageInfo.Flags">
            <summary>
            Gets flags assigned to this email message on an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageInfo.GmailLabels">
            <summary>
            Gets Gmail labels assigned to this email message on the IMAP server.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.QuotaLimit">
            <summary>
            Represents quota limit.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.QuotaLimit.Name">
            <summary>
            Limit name (e.g. STORAGE, MESSAGE).
            STORAGE - Sum of messages' RFC822.SIZE, in units of 1024 octets,
            MESSAGE - Number of messages
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.QuotaLimit.Current">
            <summary>
            Current usage.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.QuotaLimit.Maximum">
            <summary>
            Maximum limit.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.Range">
            <summary>
            Represents a range. You can use <see cref="M:Limilabs.Client.IMAP.Range.From(System.Int64)"/>, <see cref="M:Limilabs.Client.IMAP.Range.Create(System.Int64,System.Int64)"/>, <see cref="M:Limilabs.Client.IMAP.Range.One(System.Int64)"/> static methods to create an instance of this class.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Range.Start">
            <summary>
            Gets range start.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Range.End">
            <summary>
            Gets range end.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Range.IsEmpty">
            <summary>
            Gets the information if this object represents empty set. Always returns false.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.Range.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Creates new range. Consider using <see cref="M:Limilabs.Client.IMAP.Range.From(System.Int64)"/> or <see cref="M:Limilabs.Client.IMAP.Range.Create(System.Int64,System.Int64)"/> static methods to create an instance of this class.
            </summary>
            <param name="start">Range start.</param>
            <param name="end">Range end.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Range.Render">
            <summary>
            Renders this object as a string (3956:3958, 3956:*, *, 3958).
            </summary>
            <returns>Object rendered as a string.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Range.Create(System.Int64,System.Int64)">
            <summary>
            Creates new range with start and end defined.
            </summary>
            <param name="start">Range start.</param>
            <param name="end">Range end.</param>
            <returns>New range.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Range.From(System.Int64)">
            <summary>
            Creates new range with only start defined. 
            It always includes the UID of the last message in the mailbox, 
            even if <paramref name="start"/> is higher than any assigned UID value (<a href="https://www.limilabs.com/mail/rfc/3501">RFC 3501</a> 6.4.8).
            </summary>
            <param name="start">Range start.</param>
            <returns>New range.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Range.One(System.Int64)">
            <summary>
            Creates new range with only one element defined. 
            </summary>
            <param name="id">One element.</param>
            <returns>New range.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Range.Last">
            <summary>
            Creates new range representing last element (*). 
            </summary>
            <returns>New range.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Range.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Limilabs.Client.IMAP.Range"/>.
            </summary>
            <returns>
            A string that represents the current <see cref="T:Limilabs.Client.IMAP.Range"/>.
            </returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.NamespaceInfo">
            <summary>
            Represents IMAP namespace info.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.NamespaceInfo.Name">
            <summary>
            Namespace name.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.NamespaceInfo.SeparatorCharacter">
            <summary>
            Path separator character.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.MessageFlags">
            <summary>
            Represents flags associated with an email message..
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageFlags.UID">
            <summary>
             Gets UID of this message assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageFlags.MessageNumber">
            <summary>
             Gets message number assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageFlags.Unseen">
            <summary>
            Gets the boolean value indicating if message was seen or not. Searches <see cref="P:Limilabs.Client.IMAP.MessageFlags.Flags"/> for <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageFlags.Flags">
            <summary>
            Gets flags associated with the specified message.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.MessageData">
            <summary>
            Represents data for specific message downloaded from IMAP server.
            You can use <see cref="T:Limilabs.Mail.MailBuilder"/> on <see cref="P:Limilabs.Client.IMAP.MessageData.EmlData"/> to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageData.UID">
            <summary>
             Gets the UID of the message on the IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageData.MessageNumber">
            <summary>
             Gets the message number on the IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MessageData.EmlData">
            <summary>
            Eml data requested. You can use <see cref="T:Limilabs.Mail.MailBuilder"/> on this property to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.Namespaces">
            <summary>
            Represents IMAP server namespaces available for currently logged in user.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Namespaces.Personal">
            <summary>
             Personal namespaces.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Namespaces.Others">
            <summary>
             Other users' namespace.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Namespaces.Shared">
            <summary>
             Namespaces shared with other users.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.Quota">
            <summary>
            Represents quota. Quota can have several limits and can be shared by several folders (<a href="https://www.limilabs.com/mail/rfc/2087">RFC 2087</a>).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Quota.Name">
            <summary>
            Quota root name.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Quota.Limits">
            <summary>
            Gets all limits in this quota.
            You can use <see cref="P:Limilabs.Client.IMAP.Quota.Storage"/> and <see cref="P:Limilabs.Client.IMAP.Quota.Message"/> properties to easily access common limits.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Quota.Storage">
            <summary>
            Gets STORAGE limit (sum of messages' RFC822.SIZE, in units of 1024 octets) or null if not found.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Quota.Message">
            <summary>
            Gets MESSAGE limit (number of messages) or null if not found.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.Status">
            <summary>
            Status of the specified folder, returned by <see cref="M:Limilabs.Client.IMAP.Imap.Status(System.String)"/> and <see cref="M:Limilabs.Client.IMAP.Imap.Status(Limilabs.Client.IMAP.FolderInfo)"/> methods.
            </summary>
            <seealso cref="T:Limilabs.Client.IMAP.FolderStatus"/>
        </member>
        <member name="P:Limilabs.Client.IMAP.Status.MessageCount">
            <summary>
            Total message count in the mailbox.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Status.Unseen">
            <summary>
            Number of messages with <see cref="F:Limilabs.Client.IMAP.Flag.Unseen"/> flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Status.Recent">
            <summary>
            Number of messages with <see cref="F:Limilabs.Client.IMAP.Flag.Recent"/> flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Status.UIDNext">
             <summary>
             UIDNEXT: The next unique identifier value.
             The next unique identifier value is the predicted value that will be assigned to a new message in the mailbox.  
             Unless the unique identifier validity (<see cref="P:Limilabs.Client.IMAP.Status.UIDValidity"/>) also changes , the next unique identifier value 
             MUST NOT change unless new messages are added to the mailbox; 
             and  the next unique identifier value 
             MUST change whenever new messages are added to the mailbox, even if those new messages are subsequently deleted.
            
             The next unique identifier value is intended to provide a means for a client to determine whether 
             any messages have been delivered to the mailbox since the previous time it checked this value.
             </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Status.UIDValidity">
            <summary>
            UIDVALIDITY: The unique identifier validity value.
            
            Any change of unique identifiers between sessions MUST be detectable using the change of UIDVALIDITY.
            If unique identifiers from an earlier session fail to persist in this session, 
            the UIDVALIDITY value MUST be greater than the one used in the earlier session.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.UploadMessageInfo">
            <summary>
            Represents information about the email message that is being uploaded (e.g. flags, internal date).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.UploadMessageInfo.Flags">
            <summary>
            Message flags.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.UploadMessageInfo.InternalDate">
            <summary>
            Internal date of the message.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.UploadMessageInfo.#ctor">
            <summary>
            Creates new instance of UploadMessageInfo class.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.UploadMessageInfo.SetInternalDate(System.DateTime)">
            <summary>
             Sets internal date of the message.
            </summary>
            <param name="dateTime">Internal date to set.</param>
        </member>
        <member name="T:Limilabs.Client.IMAP.MimeStructure">
            <summary>
            Represents data part of a mime tree stored on an IMAP server.
            
            You can obtain instance of this class using <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Int64)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByUID(System.Int64)"/>.
            
            You can download actual content of such part using following methods:
            <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/>, 
            <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure,System.Int64)"/>, 
            <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeStructure})"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeStructure.HasFileName">
            <summary>
            Gets a boolean value indicating if <see cref="P:Limilabs.Client.IMAP.MimeStructure.FileName"/> is set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeStructure.FileName">
            <summary>
            Gets the suggested file name of this part. May be <c>null</c> or empty. 
            Consider using <see cref="P:Limilabs.Client.IMAP.MimeStructure.SafeFileName"/> as it is guaranteed to contain valid file name.
            </summary>
            <remarks>
              It is important that you should not blindly use the suggested filename.  
              The suggested filename SHOULD be checked (and possibly changed) to see that it conforms to local file system conventions,
              does not overwrite an existing file, and does not present a security problem.
            </remarks>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeStructure.SafeFileName">
            <summary>
            Gets the safe file name of this part. All special characters and path are removed.
            If the file name is not specified (<see cref="P:Limilabs.Client.IMAP.MimeStructure.FileName"/> is <see langword="null"/> or empty) generates random file name in format "att_d1be267b623941159a159158138a636e.dat".
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeStructure.ContentTransferEncoding">
            <summary>
            Gets the content transfer encoding of this part.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeStructure.ContentId">
            <summary>
            Content id of the part. Without enclosing '&lt;' and '&gt;'.
            You can use <see cref="T:Limilabs.Mail.Headers.ContentIdHelper"/> to extract content id from cid url.
            </summary>
            <remarks>E.g. 01@mobile</remarks>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeStructure.Size">
            <summary>
            Gets the size of this part in bytes.
            Note that this size is the size in attachment's transfer encoding and not the resulting size after any decoding.
            This means that, for example, base64 encoded files, are in fact 37% smaller than the value of this property.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.MimeStructure.EstimateSize"/>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeStructure.TransferSize">
            <summary>
            Gets the size of this part in bytes.
            Note that this size is the size in attachment's transfer encoding and not the resulting size after any decoding.
            This means that, for example, base64 encoded files, are in fact 37% smaller than the value of this property.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.MimeStructure.EstimateSize"/>
        </member>
        <member name="P:Limilabs.Client.IMAP.MimeStructure.Data">
            <summary>
            Gets data represented by this part.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)"/> to fill this property.
            May be null, if server responds with NIL response.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.MimeStructure.EstimateActualSize">
            <summary>
             Estimates actual attachment size.
             Bases on assumption that <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Base64"/>, <see cref="F:Limilabs.Mail.Headers.MimeEncoding.UUE"/> and <see cref="F:Limilabs.Mail.Headers.MimeEncoding.XUUE"/> encoded files are 37% smaller.
            </summary>
            <returns>Estimated size of the attachment.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.MimeStructure.EstimateSize">
            <summary>
             Estimates actual attachment size.
             Bases on assumption that <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Base64"/>, <see cref="F:Limilabs.Mail.Headers.MimeEncoding.UUE"/> and <see cref="F:Limilabs.Mail.Headers.MimeEncoding.XUUE"/> encoded files are 37% smaller.
            </summary>
            <returns>Estimated size of the attachment.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.FluentSearch">
            <summary>
            Represents IMAP search query. You can use <see cref="M:Limilabs.Client.IMAP.Imap.Search"/> method to create this object.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Search" />
            <remarks>
            <see cref="F:Limilabs.Client.IMAP.ResultType.Uids" /> is default, use <see cref="M:Limilabs.Client.IMAP.FluentSearch.ResultsAs(Limilabs.Client.IMAP.ResultType)"/> method to change the result type.
            </remarks>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentSearch.ResultsAs(Limilabs.Client.IMAP.ResultType)">
            <summary>
            Sets the result type (message numbers or UIDs) of this search query.
            </summary>
            <param name="resultType">Result type.</param>
            <returns>This search query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentSearch.Parentheses(Limilabs.Client.IMAP.CriterionParenthesesMode)">
            <summary>
            Sets the parentheses mode to use when rendering <see cref="T:Limilabs.Client.IMAP.ICriterion"/> lists.
            </summary>
            <param name="parentheses">Parentheses mode.</param>
            <returns>This search query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentSearch.UseEncoding(System.Text.Encoding)">
            <summary>
            Forces the use of specified encoding. Some servers do not support this feature.
            This method has no effect when server supports UTF8=ACCEPT.
            </summary>
            <param name="encoding">Search parameters encoding.</param>
            <returns>This search query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentSearch.NoCharset">
            <summary>
            Forces the client not to use CHARSET command.
            Some servers (e.g. Exchange 2007) fail to understand CHARSET command.
            </summary>
            <returns>This search query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentSearch.Where(Limilabs.Client.IMAP.ICriterion)">
            <summary>
            Adds where condition to this search.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/> and other <see cref="T:Limilabs.Client.IMAP.Expression"/> methods to create a valid search query.
            You can also pass <see cref="T:Limilabs.Client.IMAP.SimpleImapQuery"/> to this method.
            </summary>
            <param name="criterion">Search criteria.</param>
            <returns>This search query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentSearch.Sort(Limilabs.Client.IMAP.ISorter)">
            <summary>
            Adds sort criteria to this search. 
            Use <see cref="M:Limilabs.Client.IMAP.SortBy.Multiple(Limilabs.Client.IMAP.ISorter[])"/> and other <see cref="T:Limilabs.Client.IMAP.SortBy"/> class properties to create a valid sort expression.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Sort"/>. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/> method.
            </summary>
            <param name="sorter">Sort criteria.</param>
            <returns>This search query object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentSearch.GetList">
            <summary>
            Issues the search query and retrieves UIDs or message numbers of messages, that match the search criteria, using server-side searching.
            </summary>
            <returns>List of UIDs or numbers.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FluentSearch.op_Implicit(Limilabs.Client.IMAP.FluentSearch)~System.Collections.Generic.List{System.Int64}">
            <summary>
            Issues the search query and retrieves UIDs or message numbers of messages, that match the search criteria, using server-side searching.
            </summary>
            <param name="search">Search query.</param>
            <returns>List of UIDs or numbers.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.BodyStructure">
            <summary>
            Represents structure of the email stored on the IMAP server.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByUID(System.Collections.Generic.List{System.Int64})"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByNumber(System.Collections.Generic.List{System.Int64})"/> methods to get the structure of the specified emails.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Int64)"/> 
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})"/> 
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.UID">
            <summary>
             Gets UID of this message assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.MessageNumber">
            <summary>
             Gets message number assigned by an IMAP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.Text">
            <summary>
            Gets the object representing 'text/plain' body of this email message. May be <c>null</c> if no text/plain data is present. 
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.Html">
            <summary>
            Gets the object representing 'text/html' body of this email message. May be <c>null</c> if no HTML data is present.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.Rtf">
            <summary>
            Gets the object representing 'text/rtf' or 'application/rtf' body of this email message. May be <c>null</c> if no RTF data is present.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.Visuals">
            <summary>
            Gets the list of all visual elements in this email message.
            E.g. Images embedded inside HTML email.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.NonVisuals">
            <summary>
            Gets the list of all non visual elements in this email message.
            E.g. Attached data files.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.Alternatives">
            <summary>
            Gets the list of alternative elements in this email message.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.Attachments">
            <summary>
            Gets the list of all attachments in this email message.
            Including <see cref="P:Limilabs.Client.IMAP.BodyStructure.Alternatives"/>, <see cref="P:Limilabs.Client.IMAP.BodyStructure.Visuals"/> and <see cref="P:Limilabs.Client.IMAP.BodyStructure.NonVisuals"/>.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)"/> to get the part's content.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.Appointments">
            <summary>
            Gets the list of all structures representing appointments in this email message.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.VCards">
            <summary>
            Gets the list of all structures representing vCards in this email message.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.BodyStructure.NameIsEnoughToTreatAsAttachment">
            <summary>
            Default value for <see cref="P:Limilabs.Client.IMAP.MimeStructure.IsAttachment"/> when no INLINE not ATTACHMENT is specified and NAME is there.        
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Response.BodyStructureResponse.NameIsEnoughToTreatAsAttachment(Limilabs.Client.ServerType)"/>
        </member>
        <member name="T:Limilabs.Client.IMAP.ISorter">
            <summary>
            Represents IMAP sort criteria.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.ISorter.Render(Limilabs.Client.IMAP.ImapCommand)">
            <summary>
            Renders current sorter object to specified command list.
            </summary>
            <param name="command">Command list to render on.</param>
        </member>
        <member name="T:Limilabs.Client.IMAP.FolderInfo">
            <summary>
            Represents IMAP folder (mailbox) info.
            </summary>
            <remarks>
            INBOX name is case insensitive, all other names may be case sensitive.
            </remarks>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderInfo.Name">
            <summary>
            Gets the full folder name.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderInfo.ShortName">
            <summary>
            Gets the name of the last (deepest) path level name.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderInfo.SeparatorCharacter">
            <summary>
            Gets the folder path separator character.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderInfo.Flags">
            <summary>
            Gets flags associated with this folder.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderInfo.IsInbox">
            <summary>
            Gets the boolean value indicating, if this instance is INBOX folder.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderInfo.Parent">
            <summary>
            Gets the parent of this folder.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderInfo.SubFolders">
            <summary>
            Gets the direct sub folders of this folder.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderInfo.CanSelect">
            <summary>
            Gets the value indicating if you can select this folder. (Searches for <see cref="F:Limilabs.Client.IMAP.FolderFlag.NoSelect"/> or <see cref="F:Limilabs.Client.IMAP.FolderFlag.NonExistent"/>  flag)
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderInfo.HasChildren">
            <summary>
            Gets the value indicating if this folder has children. 
            <see cref="F:Limilabs.Client.IMAP.FolderFlag.HasNoChildren"/> or <see cref="F:Limilabs.Client.IMAP.FolderFlag.NoInferiors"/> flag results in false, <see cref="F:Limilabs.Client.IMAP.FolderFlag.HasChildren"/> in true, null otherwise.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.FolderInfo.GetImapName">
            <summary>
            Returns folder name as sent by the server.
            </summary>
            <returns>UTF7 encoded folder name.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FolderInfo.ToString">
            <summary>
            Returns <see cref="P:Limilabs.Client.IMAP.FolderInfo.Name"/> property.
            </summary>
            <returns><see cref="P:Limilabs.Client.IMAP.FolderInfo.Name"/> property.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FolderInfo.CompareTo(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes (&lt;0), 
            follows (&gt;0), or occurs in the same position (=0) in the sort order as the other object.
            </summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FolderInfo.Equals(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.FolderInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FolderInfo.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FolderInfo.op_Equality(Limilabs.Client.IMAP.FolderInfo,Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Client.IMAP.FolderInfo"/> objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.FolderInfo.op_Inequality(Limilabs.Client.IMAP.FolderInfo,Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Client.IMAP.FolderInfo"/> objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.ResultType">
            <summary>
            Defines result type for IMAP searches.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Search"/>
            <seealso cref="M:Limilabs.Client.IMAP.FluentSearch.ResultsAs(Limilabs.Client.IMAP.ResultType)"/>
        </member>
        <member name="F:Limilabs.Client.IMAP.ResultType.Uids">
            <summary>
            Result should be returned in form of unique message ids.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ResultType.Numbers">
            <summary>
            Result should be returned in form of message numbers.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.SortBy">
            <summary>
            Represents expressions that can be used by <see cref="M:Limilabs.Client.IMAP.FluentSearch.Sort(Limilabs.Client.IMAP.ISorter)"/> methods.
            To join several sort criteria use <see cref="M:Limilabs.Client.IMAP.SortBy.Multiple(Limilabs.Client.IMAP.ISorter[])"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Search" />
        </member>
        <member name="M:Limilabs.Client.IMAP.SortBy.Reverse(Limilabs.Client.IMAP.ISorter)">
             <summary>
             Reverses specified sorter. Descending order is used.
             Note: REVERSE only reverses a single criterion, and does not
             affect the implicit "sequence number" sort criterion if all
             other criteria are identical.  Consequently, a sort of
             REVERSE SUBJECT is not the same as a reverse ordering of a
             SUBJECT sort.  This can be avoided by use of additional
             criteria, e.g., SUBJECT DATE vs. REVERSE SUBJECT REVERSE
             DATE.  In general, however, it's better (and faster, if the
            client has a "reverse current ordering" command) to reverse
            the results in the client instead of issuing a new SORT.
             </summary>
             <param name="sorter">Sort criteria</param>
             <returns>New sorter.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.SortBy.Multiple(Limilabs.Client.IMAP.ISorter[])">
            <summary>
            Returns multiple sort criteria.
            </summary>
            <param name="sorters">Sort criteria to join.</param>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.SortBy.Arrival">
            <summary>
            Internal date and time of the message.  This differs from the
            ON criteria in SEARCH, which uses just the internal date.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.SortBy.Cc">
            <summary>
            Sorts on local part of the first "cc" address.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.SortBy.Date">
            <summary>
            Sent date and time, as described in section 2.2.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.SortBy.From">
            <summary>
            Sorts on local part of the first "From" address.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.SortBy.Size">
            <summary>
            Size of the message in octets.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.SortBy.Subject">
            <summary>
            Base subject text.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.SortBy.To">
            <summary>
             Sorts on local part of the first "To" address.
            </summary>
            <returns>New sorter.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.CommonFolders">
            <summary>
            Identifies common folders using names and flags returned by <see cref="F:Limilabs.Client.IMAP.ImapExtension.XList"/> or <see cref="F:Limilabs.Client.IMAP.ImapExtension.SpecialUse"/> extensions 
            of <see cref="M:Limilabs.Client.IMAP.Imap.GetFolders"/> method.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GetFolders"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GetFolders(System.String)"/>
        </member>
        <member name="P:Limilabs.Client.IMAP.CommonFolders.Inbox">
            <summary>
            Inbox folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.XInbox"/> or name "INBOX").
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.CommonFolders.AllMail">
            <summary>
            AllMail folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.All"/> or <see cref="F:Limilabs.Client.IMAP.FolderFlag.XAllMail"/>).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.CommonFolders.Drafts">
            <summary>
            Drafts folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Drafts" />).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.CommonFolders.Important">
            <summary>
            Important folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.XImportant"/>).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.CommonFolders.Sent">
            <summary>
            Sent folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Sent" />).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.CommonFolders.Spam">
            <summary>
            Spam folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Junk"/>, <see cref="F:Limilabs.Client.IMAP.FolderFlag.XSpam"/>).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.CommonFolders.Flagged">
            <summary>
            Flagged folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Flagged"/> or <see cref="F:Limilabs.Client.IMAP.FolderFlag.XStarred"/>).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.CommonFolders.Trash">
            <summary>
            Trash folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Trash" />).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.CommonFolders.Archive">
            <summary>
            Important folder (<see cref="F:Limilabs.Client.IMAP.FolderFlag.Archive"/>).
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.CommonFolders.#ctor(System.Collections.Generic.List{Limilabs.Client.IMAP.FolderInfo})">
            <summary>
            Initializes a new instance of the CommonFolders object.
            </summary>
            <param name="folders">Folder list returned by <see cref="M:Limilabs.Client.IMAP.Imap.GetFolders"/>.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.CommonFolders.#ctor(System.Collections.Generic.List{Limilabs.Client.IMAP.FolderInfo},System.Boolean)">
            <summary>
            Initializes a new instance of the CommonFolders object.
            </summary>
            <param name="folders">Folder list returned by <see cref="M:Limilabs.Client.IMAP.Imap.GetFolders"/>.</param>
            <param name="recognizeByName">Specifies if folders should be also recognized by using its names. Default is true.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.CommonFolders.FindFolderByFlag(System.String)">
            <summary>
            Finds folder with specified flag.
            </summary>
            <param name="flag">Flag to search for.</param>
            <returns>Folder having the specified flag.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.CommonFolders.FindFolderByFlag(Limilabs.Client.IMAP.FolderFlag)">
            <summary>
            Finds folder with specified flag.
            </summary>
            <param name="flag">Flag to search for.</param>
            <returns>Folder having the specified flag.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.CommonFolders.GetAll">
            <summary>
            Returns all folders.
            </summary>
            <returns>List of all folders.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.Flag">
            <summary>
            Represents flag used by IMAP protocol to mark email messages.
            Static fields represent most common, system flags.
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/> and <see cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/> to set or remove a flag.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)"/>    
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>   
            <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.All">
            <summary>
            Gets \ALL flag. It repesents all messages in the mailbox.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Seen">
            <summary>
            Gets \SEEN flag. Message has been read.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)"/>    
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>   
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.New">
            <summary>
            Gets \NEW flag. It represents messages that have the <see cref="F:Limilabs.Client.IMAP.Flag.Recent"/> flag set but not the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag. This is functionally equivalent to "(\RECENT \UNSEEN)".
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Recent">
            <summary>
            Gets \RECENT flag (don't confuse it with <see cref="F:Limilabs.Client.IMAP.Flag.Unseen"/>). Message is "recently" arrived in this mailbox.  
            </summary>
            <remarks>
            This session is the first session to have been notified about this message; 
            if the session is read-write, subsequent sessions will not see \Recent set for this message.  
            This flag can not be altered by the client.
            </remarks>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Old">
            <summary>
            Gets \OLD flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Recent"/> flag set. 
            This is functionally equivalent to "NOT \RECENT" (as opposed to "NOT \NEW").
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Draft">
            <summary>
            Gets \DRAFT flag. Message has not completed composition (marked as a draft).
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Deleted">
            <summary>
            Gets \DELETED flag. Message is "deleted" for removal by later EXPUNGE.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Flagged">
            <summary>
            Gets \FLAGGED flag. Message is "flagged" for urgent/special attention.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Answered">
            <summary>
            Gets \ANSWERED flag. Message has been answered.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Unseen">
            <summary>
            Gets \UNSEEN flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag set.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)"/>    
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>   
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Unanswered">
            <summary>
            Gets \UNANSWERED flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Answered"/> flag set.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Undeleted">
            <summary>
            Gets \UNDELETED flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Deleted"/> flag set.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Undraft">
            <summary>
            Gets \UNDRAFT flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Draft"/> flag set.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Unflagged">
            <summary>
            Gets \UNFLAGGED flag. It represents messages that do not have the <see cref="F:Limilabs.Client.IMAP.Flag.Flagged"/> flag set.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Star">
            <summary>
            Gets \* flag. It indicates, that it is possible to create new keywords by attempting to store those flags in the mailbox (<see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags"/>).
            You can use <see cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/> to do so.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.MDNSent">
            <summary>
            Gets $MDNSent flag. It indicates if Message Disposition Notification (MDN) was sent for particular message.
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsMDNSent"/> to check if server supports $MDNSent.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Forwarded">
            <summary>
            Gets the keyword that specifies that the message was resent to another email address, embedded within or attached to a new message.  
            This keyword is set by the mail client when it successfully forwards the message to another email address.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.SubmitPending">
            <summary>
            Gets the keyword that designates the message as awaiting to be submitted.
            This keyword allows storing messages waiting to be submitted in the same mailbox 
            where messages that were already submitted  and/or are being edited are stored.
            </summary>
            <remarks>
            A message that has both $Submitted and $SubmitPending IMAP keywords set is a message being actively submitted.
            </remarks>
        </member>
        <member name="F:Limilabs.Client.IMAP.Flag.Submitted">
            <summary>
            Gets the keyword that designates the message as being sent out.
            </summary>
            <remarks>
            A message that has both $Submitted and $SubmitPending IMAP keywords set is a message being actively submitted.
            </remarks>
        </member>
        <member name="P:Limilabs.Client.IMAP.Flag.IsSystemFlag">
            <summary>
            Gets information if this is a system flag. All system flags begin with "\" character.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Flag.Name">
            <summary>
            Gets the name of this flag. E.g. SEEN, UNFLAGGED.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Flag.FullName">
            <summary>
            Gets the full name of this flag. This property includes backslash for system flags E.g. \SEEN, \UNFLAGGED, MYFLAG.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.Flag.#ctor(System.String)">
            <summary>
            Creates new instance of the Flag object with specified name.
            </summary>
            <param name="name">Name of the flag.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Flag.Equals(Limilabs.Client.IMAP.Flag)">
            <summary>
             Determines whether the specified <see cref="T:Limilabs.Client.IMAP.Flag"/> object is equal to the current one.
             Names are compared case insensitive.
            </summary>
             <param name="other">The <see cref="T:Limilabs.Client.IMAP.Flag"/> to compare with the current <see cref="T:Limilabs.Client.IMAP.Flag"/></param>
             <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Flag.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            Names are compared case insensitive.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Flag.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:Limilabs.Client.IMAP.Flag"/>.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Flag.op_Equality(Limilabs.Client.IMAP.Flag,Limilabs.Client.IMAP.Flag)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Client.IMAP.Flag"/> objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Flag.op_Inequality(Limilabs.Client.IMAP.Flag,Limilabs.Client.IMAP.Flag)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Client.IMAP.Flag"/> objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Flag.ToString">
            <summary>
            Returns <see cref="P:Limilabs.Client.IMAP.Flag.FullName"/> property.
            </summary>
            <returns><see cref="P:Limilabs.Client.IMAP.Flag.FullName"/> property.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.Expression">
            <summary>
            Represents expressions that can be used by <see cref="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.ICriterion)"/> or <see cref="M:Limilabs.Client.IMAP.FluentSearch.Where(Limilabs.Client.IMAP.ICriterion)"/>  methods.
            To join several criteria use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/> or <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Search" />
            <seealso cref="T:Limilabs.Client.IMAP.FluentSearch" />
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.ICriterion)" />
            <seealso cref="T:Limilabs.Client.IMAP.SimpleImapQuery" />
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.All">
            <summary>
            Creates criterion to find all messages.
            </summary>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Subject(System.String)">
            <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's SUBJECT field.
            </summary>
            <param name="subject">Subject fragment to search for.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])">
            <summary>
            Creates conjunction between expressions (AND).
            </summary>
            <param name="criterions">Criteria to AND.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)">
            <summary>
            Creates disjunction between two expressions (OR).
            </summary>
            <param name="first">First expression.</param>
            <param name="second">Second expression.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.UID(Limilabs.Client.IMAP.Range)">
            <summary>
            Creates criterion to find messages with UIDs within the specified range.
            </summary>
            <param name="range">UID range.</param>
            <returns>New expression.</returns>
            <example>
            List&lt;long&gt; uids = imap.Search().Where(Expression.UID(Range.From(1024)));
            </example>
            <seealso cref="M:Limilabs.Client.IMAP.Range.From(System.Int64)"/> <seealso cref="P:Limilabs.Client.IMAP.Range.End"/> <seealso cref="M:Limilabs.Client.IMAP.Range.Create(System.Int64,System.Int64)"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.From(System.String)">
            <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's FROM field.
            </summary>
            <param name="from">Address to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.To(System.String)">
            <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's TO field.
            </summary>
            <param name="to">Address to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Cc(System.String)">
            <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's CC field.
            </summary>
            <param name="cc">Address to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Bcc(System.String)">
            <summary>
            Creates criterion to find messages that contain the specified string in the envelope structure's BCC field.
            </summary>
            <param name="bcc">Address to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Not(Limilabs.Client.IMAP.ICriterion)">
            <summary>
            Creates criterion to find messages that do not match the specified search key.
            </summary>
            <param name="criterion">Criterion that must not be matched.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.HasFlag(Limilabs.Client.IMAP.Flag)">
            <summary>
            Creates criterion to find messages that have specified flag set.
            </summary>
            <param name="flag">Flag that should be set.</param>
            <returns>New expression.</returns>
            <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
            <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Body(System.String)">
            <summary>
            Creates criterion to find messages that contain the specified string in the body of the message.
            </summary>
            <param name="text">Body fragment to search for.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Text(System.String)">
            <summary>
            Creates criterion to find messages that contain the specified string in the header or body of the message.
            </summary>
            <param name="text">Header or Body fragment to search for.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Larger(System.Int64)">
            <summary>
            Creates criterion to find messages with an [RFC-2822] size larger than the specified number of octets.
            </summary>
            <param name="largerThan">Size to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Smaller(System.Int64)">
            <summary>
            Creates criterion to find messages with an [RFC-2822] size smaller than the specified number of octets.
            </summary>
            <param name="smallerThan">Size to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.On(System.DateTime)">
            <summary>
             Creates criterion to find messages whose internal date (disregarding time and timezone) is within the specified date.
            
            In other words, "ON 13-APR-2000" means messages with an INTERNALDATE text which starts with "13-APR-2000", 
            even if timezone differential from the local timezone is sufficient to move that INTERNALDATE into the previous or next day.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.SentOn(System.DateTime)">
            <summary>
             Creates criterion to find messages whose [RFC-2822] Date: header (disregarding time and timezone) is within the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Before(System.DateTime)">
            <summary>
             Creates criterion to find messages whose internal date (disregarding time and timezone), assigned by an IMAP server, is earlier than the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.SentBefore(System.DateTime)">
            <summary>
             Creates criterion to find messages whose [RFC-2822] Date: header (disregarding time and timezone) is earlier than the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Since(System.DateTime)">
            <summary>
             Creates criterion to find messages whose internal date (disregarding time and timezone), assigned by an IMAP server, is within or later than the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.SentSince(System.DateTime)">
            <summary>
             Creates criterion to find messages whose [RFC-2822] Date: header (disregarding time and timezone) is within or later than the specified date.
            </summary>
            <param name="dateTime">Date to match.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.Header(System.String,System.String)">
            <summary>
             Creates criterion to find messages that have a header with the specified field-name (as defined in [RFC-2822]) and that contains the specified string
             in the text of the header (what comes after the colon). If the string to search is zero-length, 
             this matches all messages that have a header line with the specified field-name regardless of the contents.
            </summary>
            <param name="header">Header name.</param>
            <param name="value">Header value.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.HasHeader(System.String)">
            <summary>
             Creates criterion to find messages that have specified header.
            </summary>
            <remarks>Does not work with Exchange server. </remarks>
            <param name="header">Header name.</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.HasKeyword(System.String)">
            <summary>
            Creates criterion to find messages with the specified keyword flag set.
            </summary>
            <param name="keyword">Keyword that should be set.</param>
            <returns>New expression.</returns>
            <remarks>
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.GmailMessageId(System.String)">
            <summary>
            Creates criterion to find messages with specified Gmail message id (X-GM-MSGID).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1"/> extension support.
            </summary>
            <param name="gmailMessageId">Gmail's message id.</param>
            <returns>New expression.</returns>
            <seealso cref="P:Limilabs.Client.IMAP.Envelope.GmailMessageId"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.GmailMessageId(System.Decimal)">
            <summary>
            Creates criterion to find messages with specified Gmail message id (X-GM-MSGID).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1"/> extension support.
            </summary>
            <param name="gmailMessageId">Gmail's message id.</param>
            <returns>New expression.</returns>
            <seealso cref="P:Limilabs.Client.IMAP.Envelope.GmailMessageId"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.GmailThreadId(System.String)">
            <summary>
            Creates criterion to find messages with specified Gmail thread id (X-GM-THRID).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1"/> extension support.
            </summary>
            <param name="threadId">Gmail's thread id.</param>
            <returns>New expression.</returns>        
            <seealso cref="P:Limilabs.Client.IMAP.Envelope.GmailThreadId"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.GmailThreadId(System.Decimal)">
            <summary>
            Creates criterion to find messages with specified Gmail thread id (X-GM-THRID).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1"/> extension support.
            </summary>
            <param name="threadId">Gmail's thread id.</param>
            <returns>New expression.</returns>
            <seealso cref="P:Limilabs.Client.IMAP.Envelope.GmailThreadId"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.GmailRawSearch(System.String)">
            <summary>
            Creates criterion to find messages with specified Gmail thread id (X-GM-THRID).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1"/> extension support.
            </summary>
            <param name="search">Gmail's raw search string (e.g. "has:attachment in:unread").</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.GmailLabel(System.String)">
            <summary>
            Creates criterion to find messages with specified Gmail label (X-GM-LABELS).
            This method can be used only if server advertises <see cref="F:Limilabs.Client.IMAP.ImapExtension.XGMailExtensions1"/> extension support.
            </summary>
            <param name="label">Gmail's label (e.g. @"\Inbox", "Important", "my label").</param>
            <returns>New expression.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Expression.MessageId(System.String)">
            <summary>
            Creates criterion to find messages, that have a message-id header, 
            that contains specified value (contains the specified string in the text of the header).
            If the string to search is zero-length, this matches all messages that have a Message-ID header name regardless of the contents.
            </summary>
            <remarks>
            Some servers (Yahoo) require the search argument to be in exactly the same format, as the email header value.
            It's incorrect behavior, but there is a workaround for it: you can use <see cref="P:Limilabs.Mail.IMail.Headers"/> collection:
            <code>
            IMail email = ...
            Expression.MessageId(email.Headers["Message-ID"])
            </code>
            </remarks>
            <param name="messageId">Message id.</param>
            <returns>New expression.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.ICriterion">
            <summary>
            Represents IMAP search criteria.
            Use one of the <see cref="T:Limilabs.Client.IMAP.Expression"/> static methods to create classes implementing this interface (e.g. <see cref="M:Limilabs.Client.IMAP.Expression.Subject(System.String)"/> or <see cref="M:Limilabs.Client.IMAP.Expression.From(System.String)"/>).
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.ICriterion.Render(Limilabs.Client.IMAP.ImapCommand)">
            <summary>
            Renders current criteria object to specified command.
            </summary>
            <param name="command">Command to render on.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.ICriterion.IsASCII">
            <summary>
            Returns true if this criterion requires only ASCII characters to be rendered.
            </summary>
            <returns>True if this criterion requires only ASCII characters to be rendered, false otherwise.</returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.Imap">
            <summary>
            IMAP client implementation. 
            It allows listing, moving, copying, downloading, uploading and deleting emails from IMAP servers.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Imap.DefaultPort">
            <summary>
            Default IMAP protocol port (143).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32)"/> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.Imap.DefaultSSLPort">
            <summary>
            Default IMAP protocol over SSL port (993).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)"/> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Imap.CommandTagLength">
            <summary>
            Gets or set the length of the generated unique command identifier.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Imap.IDInformation">
            <summary>
            Represents client information send to the server on connection using ID command (<see cref="F:Limilabs.Client.IMAP.ImapExtension.ID"/>).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Imap.ServerGreeting">
            <summary>
            Gets the server greeting (initial response).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Imap.ServerIDInformation">
            <summary>
            Gets the server ID information.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Imap.CurrentFolder">
            <summary>
            Gets the status of the currently selected folder.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.Imap.Configuration">
            <summary>
            Gets IMAP protocol configuration.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.#ctor">
            <summary>
            Initializes new instance of the Imap class.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes new instance of the Imap class.
            </summary>
            <param name="addressFamily">Address family.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Connect(System.String)">
            <summary>
            Connects to IMAP server on port 143. Use <see cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)"/> when SSL connection is needed.
            </summary>
            <param name="host">Target host name or IP address.</param>
            <exception cref="T:Limilabs.Client.ServerException">DNS resolving error, connection error.</exception>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Initial error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)">
            <summary>
            Connects to IMAP server using SSL on port 993.
            </summary>
            <param name="host">Target host name or IP address.</param>
            <seealso cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)"/>
            <exception cref="T:Limilabs.Client.ServerException">DNS resolving error, connection error.</exception>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Initial error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.BeginConnect(System.String)">
            <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.IMAP.Imap.DefaultPort"/>.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.BeginConnect(System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.IMAP.Imap.DefaultPort"/>.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.BeginConnectSSL(System.String)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.IMAP.Imap.DefaultSSLPort"/> and SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.BeginConnectSSL(System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.IMAP.Imap.DefaultSSLPort"/> and SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.StartTLS">
            <summary>
            Sends 'STARTTLS' command and initializes SSL connection (if required issues CAPABILITY command afterwards).
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.StartTLS"/>. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/> method.
            </summary>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UseBestLogin(System.String,System.String)">
            <summary>
            Logs user in using best method available. 
            When no AUTH capability is found, this method switches to SSL (<see cref="M:Limilabs.Client.IMAP.Imap.StartTLS"/>) and tries again.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)">
            <summary>
            Logs user in using LOGIN command. 
            When LOGIN command is disabled by including the LOGINDISABLED capability this method tries to log-in using <see cref="M:Limilabs.Client.IMAP.Imap.UseBestLogin(System.String,System.String)"/>.
            Unless SSL connection is used this method sends the password in clear text.
            You can check which authentication methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods"/> method.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.ProxyAuth(System.String)">
            <summary>
            Sends PROXYAUTH command. Allows an authorised administrator to proxy into any user's mailbox.
            PROXYAUTH is not a standard IMAP command and your server may reject it.
            You can try <see cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> in such case.
            </summary>
            <param name="user">User mailbox to access.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.InternalLogin(System.String,System.String)">
            <summary>
            This method does not switch to UseBestLogin when LOGINDISABLED is found.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/>  <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="adminUser">Administrator's user.</param>
            <param name="adminPassword">Administrator's password.</param>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/>  <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE CRAM-MD5 command. This method does NOT send the password in clear text.
            You can check which authentication methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods"/> method.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE DIGEST-MD5 command. This method does NOT send the password in clear text.
            You can check which authentication methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods"/> method.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UseBestLogin(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)"/>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginDIGEST(System.String,System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE DIGEST-MD5 command. This method does NOT send the password in clear text.
            You can check which authentication methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods"/> method.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <param name="uri">Host and service name (host ["/" service-name]) part of digest-uri parameter, if null realm is used.</param>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI">
            <summary>
            Logs user in using <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/> mechanism. Target will be constructed as "imap/" + TargetHost name.
            </summary>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            Target will be constructed as "imap/" + TargetHost name.
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "imap/" + fully qualified target name.</param>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            Target will be constructed as "imap/" + TargetHost name.
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <param name="userWithDomain">User's login (e.g. "domain/user").</param>
            <param name="password">User's password.</param>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String,System.String)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <param name="userWithDomain">User's login (e.g. "domain/user").</param>
            <param name="password">User's password.</param>
            <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "imap/" + fully qualified target name.</param>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginOAUTH(System.String)">
            <summary>
            Logs user in using AUTHENTICATE XOAUTH command. This method does NOT send the password.
            You can use <see cref="T:Limilabs.Client.Authentication.OAuth"/> class to create the key.
            You can check which authentication methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods"/> method.
            </summary>
            <param name="key">XOAuth key. The key will be encoded using BASE64. You can use <see cref="M:Limilabs.Client.Authentication.ISignedOAuth.GetXOAuthKey" /> method to create this key.</param>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.LoginOAUTH2(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE XOAUTH2 command. This method does NOT send the password.
            You can use <a href="http://www.dotnetopenauth.net/">DotNetOpenAuth</a> to create the key.
            You can check which authentication methods remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods"/> method.
            </summary>
            <param name="user">User's login (email address).</param>
            <param name="accessToken">OAuth 2.0 access token.</param>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.IMAP.Imap.LoginCRAM(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Close">
            <summary>
            Sends LOGOUT command. Releases all resources acquired by this object.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Close(System.Boolean)">
            <summary>
            Sends LOGOUT command. Releases all resources acquired by this object.
            </summary>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response to LOGOUT command.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SendCommand(System.String)">
            <summary>
            Sends command and waits for the server response.
            </summary>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command e.g. "NOOP".</param>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
            <returns>IMAP response object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SendCommand(System.String,System.Boolean)">
            <summary>
            Sends command and waits for the server response.
            </summary>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command e.g. "NOOP".</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</param>
            <returns>IMAP response object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.ReceiveResponse(System.String)">
            <summary>
            Receives the response ending with specified request tag.
            </summary>
            <param name="tag">Request tag</param>
            <returns>IMAP response object.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Capability">
            <summary>
            Sends CAPABILITY command. Consider using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/>, <see cref="M:Limilabs.Client.IMAP.Imap.SupportedThreadMethods"/> or <see cref="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods"/> methods as they are faster.
            </summary>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
            <returns>Server's capability list.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SupportedExtensions">
            <summary>
            Lists extensions supported by the remote server (e.g. <see cref="F:Limilabs.Client.IMAP.ImapExtension.Sort"/>, <see cref="F:Limilabs.Client.IMAP.ImapExtension.XList"/>, <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>)
            </summary>
            <returns>Extensions supported by remote server.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SupportedAuthenticationMethods">
            <summary>
            Lists authentication methods supported by the remote server.
            </summary>
            <returns>Authentication methods supported by remote server.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SupportedThreadMethods">
            <summary>
            Lists threading methods supported by the remote server.
            </summary>
            <returns>Authentication methods supported by remote server.</returns>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetQuotaRoot(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Gets quotas for specified folder.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Quota"/>, you can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/> method.
            </summary>
            <param name="folder">Folder name.</param>
            <returns>Quotas for specified folder.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetQuotaRoot(System.String)">
            <summary>
            Gets quotas for specified folder.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Quota"/>, you can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/> method.
            </summary>
            <param name="folder">Folder name.</param>
            <returns>Quotas for specified folder.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetQuota(System.String)">
            <summary>
            Gets quota with specified name.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Quota"/>, you can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/> method.
            </summary>
            <param name="name">Name of the quota.</param>
            <returns>Quota with specified name.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SelectInbox">
            <summary>
            Selects 'INBOX' as a current folder (mailbox) so that messages inside can be accessed.
            Select command will remove the <see cref="F:Limilabs.Client.IMAP.Flag.Recent"/> flag since the folder has now been viewed 
            (This is not the same as the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> IMAP flag).
            </summary>
            <returns>Status of the folder (mailbox). It can be updated by subsequent <see cref="M:Limilabs.Client.IMAP.Imap.Noop" /> commands or other commands.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Select(System.String)">
            <summary>
            Selects specified folder (mailbox) as the current folder so that messages inside can be accessed.
            Select command will remove the <see cref="F:Limilabs.Client.IMAP.Flag.Recent"/> flag since the folder has now been viewed 
            (This is not the same as the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> IMAP flag).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder name.</param>
            <returns>Status of the folder (mailbox). It can be updated by subsequent <see cref="M:Limilabs.Client.IMAP.Imap.Noop" /> or other commands.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Select(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Selects specified folder (mailbox) as the current folder so that messages inside can be accessed.
            Select command will remove the <see cref="F:Limilabs.Client.IMAP.Flag.Recent"/> flag since the folder has now been viewed 
            (This is not the same as the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> IMAP flag).
            </summary>
            <remarks>
            If folder.Flags contain <see cref="F:Limilabs.Client.IMAP.FolderFlag.XInbox"/> this method invokes <see cref="M:Limilabs.Client.IMAP.Imap.SelectInbox"/> method.
            </remarks>
            <param name="folder">Folder to select.</param>
            <returns>Status of the folder (mailbox). It can be updated by subsequent <see cref="M:Limilabs.Client.IMAP.Imap.Noop" /> or other commands.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.ExamineInbox">
            <summary>
            Selects 'INBOX' as a current read-only folder (mailbox) so that messages inside can be accessed.
            Examine command will not reset the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag
            </summary>
            <returns>Status of the folder (mailbox).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Examine(System.String)">
            <summary>
            Selects specified folder (mailbox) as the current read-only folder so that messages inside can be accessed.
            Examine command will not reset the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder name.</param>
            <returns>Status of the folder (mailbox).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Selects specified folder (mailbox) as the current read-only folder so that messages inside can be accessed.
            Examine command will not reset the <see cref="F:Limilabs.Client.IMAP.Flag.Recent" /> flag.
            </summary>
            <remarks>
            If folder.Flags contain <see cref="F:Limilabs.Client.IMAP.FolderFlag.XInbox"/> this method invokes <see cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox"/>.
            </remarks>
            <param name="folder">Folder name.</param>
            <returns>Status of the folder (mailbox).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Status(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            The STATUS command requests the status of the indicated mailbox.
            It does not change the currently selected mailbox, nor does it affect the state of any messages in the queried mailbox (messages don't lose the <see cref="F:Limilabs.Client.IMAP.Flag.Recent"/>) flag.
            This command MUST NOT be used as a "check for new messages in the selected mailbox" operation 
            (You should rather use <see cref="T:Limilabs.Client.IMAP.FolderStatus"/> and <see cref="M:Limilabs.Client.IMAP.Imap.Noop"/> or <see cref="P:Limilabs.Client.IMAP.FolderStatus.UIDNext"/>) or <see cref="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.Flag)"/>).
            STATUS command is not guaranteed to be fast in its response.
            </summary>
            <param name="folder">Folder name.</param>
            <returns>Status information of the specified folder.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Status(System.String)">
            <summary>
            The STATUS command requests the status of the indicated mailbox.
            It does not change the currently selected mailbox, nor does it affect the state of any messages in the queried mailbox (messages don't lose the <see cref="F:Limilabs.Client.IMAP.Flag.Recent"/>) flag.
            This command MUST NOT be used as a "check for new messages in the selected mailbox" operation 
            (You should rather use <see cref="T:Limilabs.Client.IMAP.FolderStatus"/> and <see cref="M:Limilabs.Client.IMAP.Imap.Noop"/> or <see cref="P:Limilabs.Client.IMAP.FolderStatus.UIDNext"/>) or <see cref="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.Flag)"/>).
            STATUS command is not guaranteed to be fast in its response.
            </summary>
            <param name="folder">Folder name.</param>
            <returns>Status information of the specified folder.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CloseCurrentFolder">
            <summary>
            Issues CLOSE command to the server.
            Unless Examine was used to open folder, CLOSE command permanently removes all messages that have the <see cref="F:Limilabs.Client.IMAP.Flag.Deleted"/> flag set from the currently selected folder, 
            and returns to the authenticated state from the selected state (no folder is selected).
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Select(System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.Select(Limilabs.Client.IMAP.FolderInfo)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.SelectInbox"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.Examine(System.String)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod)">
            <summary>
            Creates new threading query.
            </summary>
            <example>
            List&lt;<see cref="T:Limilabs.Client.IMAP.FluentThread"/>&gt; threads = imap.Thread(ThreadMethod.OrderedSubject).Where(Expression.Text("text"));
            </example>
            <example>
            List&lt;<see cref="T:Limilabs.Client.IMAP.FluentThread"/>&gt; threads = imap.Thread(ThreadMethod.OrderedSubject).Where(Expression.Text("text")).ResultAs(<see cref="F:Limilabs.Client.IMAP.ResultType.Numbers"/>);
            </example>
            <param name="method">Threading method that should be used.</param>
            <returns>New threading query.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Thread(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)">
            <summary>
            Gets threaded messages, that match specified search criteria, using server-side threading.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/>, <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)"/> and other <see cref="T:Limilabs.Client.IMAP.Expression"/> methods to create a valid search query.
            </summary>
            <param name="method">Threading method that should be used.</param>
            <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/> to join several criterions.</param>
            <returns>List of message threads.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.ThreadNumbers(Limilabs.Client.IMAP.ThreadMethod,Limilabs.Client.IMAP.ICriterion)">
            <summary>
            Gets threaded messages, that match specified search criteria, using server-side threading. Uses <see cref="F:Limilabs.Client.IMAP.ResultType.Numbers"/> as <see cref="M:Limilabs.Client.IMAP.FluentThread.ResultsAs(Limilabs.Client.IMAP.ResultType)"/> method parameter.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/>, <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)"/> and other <see cref="T:Limilabs.Client.IMAP.Expression"/> methods to create a valid search query.
            </summary>
            <param name="method">Threading method that should be used.</param>
            <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/> to join several criterions.</param>
            <returns>List of message threads.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetAll">
            <summary>
            Gets UIDs of all messages in the current folder (mailbox) sorted from oldest to newest. Equivalent to Search(Expression.All()).
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GetMessageByUID(System.Int64)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.GetHeadersByUID(System.Int64)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.PeekMessageByUID(System.Int64)"/>
            <returns>UID list sorted from oldest to newest.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Search">
            <summary>
            Creates new search query.
            </summary>
            <example>
            List&lt;long&gt; uids = imap.Search().Where(Expression.Subject("report")).Sort(SortBy.Date());
            </example>
            <example>
            List&lt;long&gt; numbers = imap.Search().Where(Expression.Header("Message-ID", "id")).ResultAs(<see cref="F:Limilabs.Client.IMAP.ResultType.Numbers"/>);
            </example>
            <returns>New search query.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SearchFlag(Limilabs.Client.IMAP.Flag)">
            <summary>
            Gets UIDS of all messages in the current folder (mailbox) with specified flag sorted from oldest to newest. Equivalent to Search(Expression.HasFlag(flag))
            </summary>
            <param name="flag">Flag to search for.</param>
            <returns>UID list sorted from oldest to newest.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.Flag)">
            <summary>
            Gets UIDS of all messages in the current folder (mailbox) with specified flag sorted from oldest to newest. Equivalent to Search(Expression.HasFlag(flag))
            </summary>
            <param name="flag">Flag to search for.</param>
            <returns>UID list sorted from oldest to newest.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.ICriterion)">
            <summary>
            Gets UIDS of all messages that match specified search criteria using server-side searching sorted from oldest to newest.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/>, <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)"/> and other <see cref="T:Limilabs.Client.IMAP.Expression"/> methods to create a valid search query.
            You can also pass <see cref="T:Limilabs.Client.IMAP.SimpleImapQuery"/> to this method.
            </summary>
            <example>
            List&lt;long&gt; uids = imap.Search(Expression.And(Expression.Subject("report"), Expression.HasFlag(Flag.Unseen)));
            </example>
            <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/> to join several criterions.</param>
            <returns>UID list sorted from oldest to newest.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SearchNumbers(Limilabs.Client.IMAP.Flag)">
            <summary>
            Gets numbers of all messages in the current folder (mailbox) with specified flag sorted from oldest to newest.
            Equivalent to Search().Where(Expression.HasFlag(flag)).ResultsAs(ResultType.Numbers)
            </summary>
            <param name="flag">Flag to search for.</param>
            <returns>List of message numbers sorted from oldest to newest.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SearchNumbers(Limilabs.Client.IMAP.ICriterion)">
            <summary>
            Gets numbers of all messages that match specified criteria sorted from oldest to newest.
            Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/>, <see cref="M:Limilabs.Client.IMAP.Expression.Or(Limilabs.Client.IMAP.ICriterion,Limilabs.Client.IMAP.ICriterion)"/> and other <see cref="T:Limilabs.Client.IMAP.Expression"/> methods to create a valid search query.
            You can also pass <see cref="T:Limilabs.Client.IMAP.SimpleImapQuery"/> to this method.
            </summary>
            <example>
            List&lt;long&gt; uids = imap.SearchNumber(Expression.And(Expression.Subject("report"), Expression.HasFlag(Flag.Unseen)));
            </example>
            <param name="criterion">Search criteria. Use <see cref="M:Limilabs.Client.IMAP.Expression.And(Limilabs.Client.IMAP.ICriterion[])"/> to join several criterions</param>
            <returns>List of message numbers sorted from oldest to newest.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByUID(System.Int64)">
            <summary>
            Gets headers of the specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <param name="uid">Unique-id of the message to peek headers for.</param>
            <returns>Email message headers or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByNumber(System.Int64)">
            <summary>
            Gets headers of the specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Email message headers or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets all headers of the specified email messages from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <param name="uids">Unique-ids of email messages to peek headers for.</param>
            <returns>List of message data objects containing message headers.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets all headers of the specified email messages from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>List of message data objects containing message headers.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByUID(System.Int64)">
            <summary>
            Gets all headers of the specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <param name="uid">Unique-id of the message to get headers for.</param>
            <returns>Email message headers or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByNumber(System.Int64)">
            <summary>
            Gets all headers of the specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Email message headers or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets all headers of the specified email messages from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <param name="uids">Unique-ids of email messages to get headers for.</param>
            <returns>List of message data objects containing message headers.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets all headers of the specified email messages from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>List of message data objects containing message headers.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetSpecificHeadersByUID(System.Int64,System.String[])">
            <summary>
            Gets specific headers of the specified email message from server.
            </summary>
            <param name="uid">Unique-id of the message to get headers for.</param>
            <param name="headers">Headers to get.</param>
            <returns>Message data object containing specific message headers or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetSpecificHeadersByNumber(System.Int64,System.String[])">
            <summary>
            Gets specific headers of the specified email message from server.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="headers">Headers to get.</param>
            <returns>Message data object containing message headers or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetSpecificHeadersByUID(System.Collections.Generic.List{System.Int64},System.String[])">
            <summary>
            Gets specific headers of the specified email messages from server.
            </summary>
            <param name="uids">Unique-ids of email messages to get headers for.</param>
            <param name="headers">Headers to get.</param>
            <returns>List of message data objects containing specific messages headers.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetSpecificHeadersByNumber(System.Collections.Generic.List{System.Int64},System.String[])">
            <summary>
            Gets specific headers of the specified email messages from server.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="headers">Headers to get.</param>
            <returns>List of message data objects containing specific messages headers.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekSpecificHeadersByUID(System.Int64,System.String[])">
            <summary>
            Gets specific headers of the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <param name="uid">Unique-id of the message to peek headers for.</param>
            <param name="headers">Headers to get.</param>
            <returns>Message data object containing specific message headers or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekSpecificHeadersByNumber(System.Int64,System.String[])">
            <summary>
            Gets specific headers of the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="headers">Headers to get.</param>
            <returns>Message data object containing message headers or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekSpecificHeadersByUID(System.Collections.Generic.List{System.Int64},System.String[])">
            <summary>
            Gets specific headers of the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <param name="uids">Unique-ids of email messages to peek headers for.</param>
            <param name="headers">Headers to get.</param>
            <returns>List of message data objects containing specific messages headers.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekSpecificHeadersByNumber(System.Collections.Generic.List{System.Int64},System.String[])">
            <summary>
            Gets specific headers of the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="headers">Headers to get.</param>
            <returns>List of message data objects containing specific messages headers.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekMessageByUID(System.Int64)">
            <summary>
            Gets specified email message from server. This method in contrast to <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageByUID(System.Int64)"/> does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <param name="uid">Unique-id of the message to peek.</param>
            <returns>Email message or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekMessageByNumber(System.Int64)">
            <summary>
            Gets specified email message from server. This method in contrast to <see cref="M:Limilabs.Client.IMAP.Imap.GetMessageByNumber(System.Int64)"/> does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Email message or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetMessageByUID(System.Int64)">
            <summary>
            Gets specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            This method sets the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> unless folder is selected with <see cref="M:Limilabs.Client.IMAP.Imap.Examine(System.String)"/>, <see cref="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)"/>  or <see cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox"/>.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>Email message or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetMessageByNumber(System.Int64)">
            <summary>
            Gets specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            This method sets the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> unless folder is selected with <see cref="M:Limilabs.Client.IMAP.Imap.Examine(System.String)"/>, <see cref="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)"/> or <see cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox"/>.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Email message or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Int64)">
            <summary>
            Gets message information for the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uid">Unique-id of the message to get information for.</param>
            <returns>Message information (including <see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure"/>) or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Int64)">
            <summary>
            Gets message information for the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Message information (including <see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure"/>) or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets message information for specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uids">Unique-ids of email messages to get information for.</param>
            <returns>Message information (including <see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure"/>)</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByUID(Limilabs.Client.IMAP.SequenceSet)">
            <summary>
            Gets message information for the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="sequence">UID sequence of email messages to get information for.</param>
            <returns>Message information (including <see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure"/>)</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets message information for the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>Message information (including <see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure"/>)</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetMessageInfoByNumber(Limilabs.Client.IMAP.SequenceSet)">
            <summary>
            Gets message information for the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="sequence">Number sequence of email messages to get information for.</param>
            <returns>Message information (including <see cref="P:Limilabs.Client.IMAP.MessageInfo.Envelope"/> and <see cref="P:Limilabs.Client.IMAP.MessageInfo.BodyStructure"/>)</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByUID(System.Int64)">
            <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.From"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.To"/>...) 
            of the specified email message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uid">Unique-id of the message to get envelope for.</param>
            <returns>Envelope information of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByNumber(System.Int64)">
            <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.From"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.To"/>...) 
            of the specified email message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Envelope information of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.From"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.To"/>...) 
            of the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uids">Unique-ids of email messages to get envelope for.</param>
            <returns>Envelope information of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByUID(Limilabs.Client.IMAP.SequenceSet)">
            <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.From"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.To"/>...) 
            of the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="sequence">UID sequence of email messages to get envelope for.</param>
            <returns>Envelope information of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.From"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.To"/>...) 
            of the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>Envelope information of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetEnvelopeByNumber(Limilabs.Client.IMAP.SequenceSet)">
            <summary>
            Gets the envelope (<see cref="P:Limilabs.Client.IMAP.Envelope.Subject"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.From"/>, <see cref="P:Limilabs.Client.IMAP.Envelope.To"/>...) 
            of the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="sequence">Number sequence of email messages to get envelope for.</param>
            <returns>Envelope information for specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByUID(System.Int64)">
            <summary>
            Gets the structure of the specified message.
            </summary>
            <param name="uid">Unique-id of the message to get structure for.</param>
            <returns>Structure of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByNumber(System.Int64)">
            <summary>
            Gets the structure of the specified message. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <returns>Structure of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets the structure of the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="uids">Unique-ids of email messages to get structure for.</param>
            <returns>Structure of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByUID(Limilabs.Client.IMAP.SequenceSet)">
            <summary>
            Gets the structure of the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="sequence">UID sequence of email messages to get structure for.</param>
            <returns>Structure of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets the structure of the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>Structure of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetBodyStructureByNumber(Limilabs.Client.IMAP.SequenceSet)">
            <summary>
            Gets the structure of the specified email messages. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> flag.
            </summary>
            <param name="sequence">Number sequence of email messages to get structure for.</param>
            <returns>Structure of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByUID(Limilabs.Client.IMAP.MimeStructure)">
            <summary>
            Gets MIME headers for specified MIME entity using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>.
            </summary>
            <param name="structure">MIME entity to get headers for.</param>
            <returns>Headers of the requested MIME entity. You can use <see cref="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.Byte[])"/> to parse them.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetHeadersByNumber(Limilabs.Client.IMAP.MimeStructure)">
            <summary>
            Gets MIME headers for specified MIME entity using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>.
            </summary>
            <param name="structure">MIME entity to get headers for.</param>
            <returns>Headers of the requested MIME entity. You can use <see cref="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.Byte[])"/> to parse them.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByUID(Limilabs.Client.IMAP.MimeStructure)">
            <summary>
            Peeks MIME headers for specified MIME entity using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>.
            </summary>
            <param name="structure">MIME entity to get headers for.</param>
            <returns>Headers of the requested MIME entity. You can use <see cref="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.Byte[])"/> to parse them.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekHeadersByNumber(Limilabs.Client.IMAP.MimeStructure)">
            <summary>
            Peeks MIME headers for specified MIME entity using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>.
            </summary>
            <param name="structure">MIME entity to get headers for.</param>
            <returns>Headers of the requested MIME entity. You can use <see cref="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.Byte[])"/> to parse them.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure)">
            <summary>
            Gets data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>.
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetDataByUID(Limilabs.Client.IMAP.MimeStructure,System.Int64)">
            <summary>
            Gets data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. 
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <param name="count">Number of bytes (decoded) to get.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetDataByUID(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeStructure})">
            <summary>
            Gets data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. 
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structures">List of MIME entity to get data for.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure)">
            <summary>
            Gets data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>. 
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(Limilabs.Client.IMAP.MimeStructure,System.Int64)">
            <summary>
            Gets data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>. 
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <param name="count">Number of bytes (decoded) to get.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetDataByNumber(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeStructure})">
            <summary>
            Gets data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>. 
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structures">List of MIME entity to get data for.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetTextByUID(Limilabs.Client.IMAP.MimeTextStructure)">
            <summary>
            Gets text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetTextByUID(Limilabs.Client.IMAP.MimeTextStructure,System.Int64)">
            <summary>
            Gets text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <param name="count">Number of bytes (decoded) to get.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetTextByUID(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeTextStructure})">
            <summary>
            Gets text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structures">List of MIME entity to get data for.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetTextByNumber(Limilabs.Client.IMAP.MimeTextStructure)">
            <summary>
            Gets text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetTextByNumber(Limilabs.Client.IMAP.MimeTextStructure,System.Int64)">
            <summary>
            Gets text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <param name="count">Number of bytes (decoded) to get.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetTextByNumber(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeTextStructure})">
            <summary>
            Gets text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structures">List of MIME entity to get data for.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekDataByUID(Limilabs.Client.IMAP.MimeStructure)">
            <summary>
            Peeks data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. 
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekDataByUID(Limilabs.Client.IMAP.MimeStructure,System.Int64)">
            <summary>
            Peeks data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>.
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <param name="count">Number of bytes (decoded) to get.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekDataByUID(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeStructure})">
            <summary>
            Peeks data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. 
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structures">List of MIME entity to get data for.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekDataByNumber(Limilabs.Client.IMAP.MimeStructure)">
            <summary>
            Peeks data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>.
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekDataByNumber(Limilabs.Client.IMAP.MimeStructure,System.Int64)">
            <summary>
            Peeks data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>.
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <param name="count">Number of bytes (decoded) to get.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekDataByNumber(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeStructure})">
            <summary>
            Peeks data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>.
            Fills <see cref="P:Limilabs.Client.IMAP.MimeStructure.Data"/> and <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/> in case of <see cref="T:Limilabs.Client.IMAP.MimeTextStructure"/>.
            </summary>
            <param name="structures">List of MIME entity to get data for.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekTextByUID(Limilabs.Client.IMAP.MimeTextStructure)">
            <summary>
            Peeks text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekTextByUID(Limilabs.Client.IMAP.MimeTextStructure,System.Int64)">
            <summary>
            Peeks text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <param name="count">Number of bytes (decoded) to get.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekTextByUID(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeTextStructure})">
            <summary>
            Peeks text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.UID"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structures">List of MIME entity to get data for.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekTextByNumber(Limilabs.Client.IMAP.MimeTextStructure)">
            <summary>
            Peeks text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekTextByNumber(Limilabs.Client.IMAP.MimeTextStructure,System.Int64)">
            <summary>
            Peeks text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structure">MIME entity to get data for.</param>
            <param name="count">Number of bytes (decoded) to get.</param>
            <returns>Part's data -or- null if server responds with NIL response.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.PeekTextByNumber(System.Collections.Generic.List{Limilabs.Client.IMAP.MimeTextStructure})">
            <summary>
            Peeks text data of the specified part using <see cref="P:Limilabs.Client.IMAP.MimeBaseStructure.MessageNumber"/>. Fills <see cref="P:Limilabs.Client.IMAP.MimeTextStructure.Text"/>.
            </summary>
            <param name="structures">List of MIME entity to get data for.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByUID(System.Int64)">
            <summary>
            Gets flags for the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})"/>
            <param name="uid">Unique-id of the message to get flags for.</param>
            <returns>List containing flags of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByNumber(System.Int64)">
            <summary>
            Gets flags for the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})"/>
            <param name="messageNumber">1 based message number.</param>
            <returns>List containing flags of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets flags for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})"/>
            <param name="uids">Unique-ids of email messages to get flags for.</param>
            <returns>List containing flags of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByUID(Limilabs.Client.IMAP.SequenceSet)">
            <summary>
            Gets flags for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})"/>
            <param name="sequence">UID sequence of email messages to get flags for.</param>
            <returns>List containing flags of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets flags for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})"/>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>List containing flags of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFlagsByNumber(Limilabs.Client.IMAP.SequenceSet)">
            <summary>
            Gets flags for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <seealso cref="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})"/> <see cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})"/>
            <param name="sequence">Number sequence of email messages to get flags for.</param>
            <returns>List containing flags of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)">
            <summary>
            Flags the message with specified flag.
            </summary>
            <param name="uid">Unique-id of the message to flag.</param>
            <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.</param>
            <returns>List containing flags of the specified message after the change or null when <paramref name="uid" /> is incorrect.</returns>
            <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags"/> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)">
            <summary>
            Flags the message with specified flag.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.</param>
            <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
            <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags"/> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
            <summary>
            Flags email messages with specified flag.
            </summary>
            <param name="uids">Unique-ids of email messages to flag.</param>
            <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.</param>
            <returns>List containing flags of the specified messages after the change.</returns>
            <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags"/> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
            <summary>
            Flags email messages with specified flag.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="flag">Flag to be added. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.</param>
            <returns>List containing flags of the specified messages after the change.</returns>        
            <remarks>
            You can use <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags"/> to check, if selected folder supports custom flags.
            Exchange 2007 and 2010 do not support custom flags (keywords).
            </remarks>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)">
            <summary>
            Removes specified flag from the message.
            </summary>
            <param name="uid">Unique-id of the message to remove flag from.</param>
            <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.</param>
            <returns>List containing flags of the specified message after the change or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)">
            <summary>
            Removes specified flag from the message.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.</param>
            <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessageByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
            <summary>
            Removes specified flag from messages.
            </summary>
            <param name="uids">Unique-ids of email messages to remove flag from.</param>
            <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.</param>
            <returns>List containing flags of the specified messages after the change.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UnflagMessageByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.Flag)">
            <summary>
            Removes specified flag from messages.
            </summary>
            <param name="messageNumbers">1 based message number.</param>
            <param name="flag">Flag to be removed. For specifying system flags you can use static fields e.g. <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.</param>
            <returns>List containing flags of the specified messages after the change.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)">
            <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)"/>
            <param name="uid">Unique-id of the message.</param>
            <returns>List containing flags of the specified message after the change or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)">
            <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)"/>
            <param name="messageNumber">1 based message number.</param>
            <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})"/>
            <param name="uids">Unique-ids of the messages.</param>
            <returns>List containing flags of the specified messages after the change.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Flags message with <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})"/>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>List containing flags of the specified messages after the change.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Int64)">
            <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message. 
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Int64)"/>
            <param name="uid">Unique-id of the message.</param>
            <returns>List containing flags of the specified message after the change or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Int64)">
            <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Int64)"/>
            <param name="messageNumber">1 based message number.</param>
            <returns>List containing flags of the specified message after the change or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message. 
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByUID(System.Collections.Generic.List{System.Int64})"/>
            <param name="uids">Unique-ids of the messages.</param>
            <returns>List containing flags of the specified messages after the change.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MarkMessageUnseenByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Removes <see cref="F:Limilabs.Client.IMAP.Flag.Seen" /> flag from the message.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.MarkMessageSeenByNumber(System.Collections.Generic.List{System.Int64})"/>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>List containing flags of the specified messages after the change.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Int64)">
            <summary>
            Gets Gmail labels for the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            You can label message using <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)"/> method.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)"/>
            <param name="uid">Unique-id of the message to get Gmail labels for.</param>
            <returns>List containing Gmail labels of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByNumber(System.Int64)">
            <summary>
            Gets Gmail labels for the specified email message from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Int64,System.String)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Int64)"/>
            <param name="messageNumber">1 based message number.</param>
            <returns>List containing Gmail labels of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets Gmail labels for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)"/>
            <param name="uids">Unique-ids of email messages to get Gmail labels for.</param>
            <returns>List containing Gmail labels of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailGetLabelsByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Gets Gmail labels for the specified email messages from server. Does not set the <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)"/>
            <param name="messageNumbers">1 based message numbers.</param>
            <returns>List containing Gmail labels of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Labels email messages with specified label.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)"/>
            <param name="uids">Unique-ids of email messages to label.</param>
            <param name="label">Label to be added.</param>
            <returns>List containing Gmail labels of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Labels email messages with specified label.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)"/>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="label">Label to be added.</param>
            <returns>List containing Gmail labels of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String})">
            <summary>
            Labels email messages with specified labels.
            </summary>
            <param name="uids">Unique-ids of email messages to label.</param>
            <param name="labels">Labels to be added.</param>
            <returns>List containing Gmail labels of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String})">
            <summary>
            Labels email messages with specified labels.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="labels">Labels to be added.</param>
            <returns>List containing Gmail labels of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)">
            <summary>
            Labels the message with specified label.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Int64,System.String)"/>
            <param name="uid">Unique-id of the message to label.</param>
            <param name="label">Label to be added.</param>
            <returns>List containing Gmail labels of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Int64,System.String)">
            <summary>
            Labels the message with specified label.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByNumber(System.Int64,System.String)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)"/>
            <param name="messageNumber">1 based message number.</param>
            <param name="label">Label to be added.</param>
            <returns>List containing Gmail labels of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Labels the message with specified labels.
            </summary>
            <param name="uid">Unique-id of the message to label.</param>
            <param name="labels">Labels to be added.</param>
            <returns>List containing Gmail labels of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Labels the message with specified labels.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="labels">Labels to be added.</param>
            <returns>List containing Gmail labels of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Int64,System.String)">
            <summary>
            Removes specified label from the message.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Int64,System.String)"/>
            <param name="uid">Unique-id of the message to remove specified label from.</param>
            <param name="label">Label to be removed.</param>
            <returns>List containing Gmail labels of the specified message or null when <paramref name="uid" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByNumber(System.Int64,System.String)">
            <summary>
            Removes specified label from the message.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Int64,System.String)"/> 
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Int64,System.String)"/> 
            <param name="messageNumber">1 based message number.</param>
            <param name="label">Label to be removed.</param>
            <returns>List containing Gmail labels of the specified message or null when <paramref name="messageNumber" /> is incorrect.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Removes specified label from messages.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)"/>
            <param name="uids">Unique-ids of email messages to remove specified label from.</param>
            <param name="label">Label to be removed.</param>
            <returns>List containing Gmail labels of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Removes specified label from messages.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailLabelMessageByNumber(System.Collections.Generic.List{System.Int64},System.String)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.GmailUnlabelMessageByUID(System.Collections.Generic.List{System.Int64},System.String)"/>
            <param name="messageNumbers">1 based message number.</param>
            <param name="label">Label to be removed.</param>
            <returns>List containing Gmail labels of the specified messages.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessageByUID(System.Int64)">
            <summary>
            Deletes message specified by the <paramref name="uid"/>. Issues EXPUNGE command after.
            </summary>
            <param name="uid">Unique-id of the message to flag.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessageByNumber(System.Int64)">
            <summary>
            Deletes message specified by the <paramref name="messageNumber"/>. Issues EXPUNGE command after.
            </summary>
            <param name="messageNumber">1 based message number.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessageByUID(System.Collections.Generic.List{System.Int64})">
            <summary>
            Deletes message specified by the <paramref name="uids"/>. Issues EXPUNGE command after.
            </summary>
            <param name="uids">Unique-ids of email messages to flag.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.DeleteMessageByNumber(System.Collections.Generic.List{System.Int64})">
            <summary>
            Deletes messages specified by the <paramref name="messageNumbers"/>. Issues EXPUNGE command after.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CopyByUID(System.Int64,System.String)">
            <summary>
            Copies the specified email message to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="uid">Unique-id of the message.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-id (UID) of the copied message, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CopyByNumber(System.Int64,System.String)">
            <summary>
            Copies the specified email message to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="messageNumber">1 based message number.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-id (UID) of the copied message, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CopyByUID(System.Int64,Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Copies the specified email message to the specified destination folder (mailbox).
            </summary>
            <param name="uid">Unique-id of the message.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-id (UID) of the copied message, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CopyByNumber(System.Int64,Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Copies the specified email message to the specified destination folder (mailbox).
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-id (UID) of the copied message, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CopyByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Copies the specified email messages to the specified destination folder (mailbox).
            </summary>
            <param name="uids">Unique-ids of the messages.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-ids (UIDs) of the copied/moved messages, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CopyByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Copies the specified email messages to the specified destination folder (mailbox).
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-ids (UIDs) of the copied messages, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CopyByUID(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Copies the specified email messages to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="uids">Unique-ids of the messages.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-ids (UIDs) of the copied messages, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CopyByNumber(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Copies the specified email messages to the specified destination folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-ids (UIDs) of the copied messages, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MoveByUID(System.Int64,Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Moves the specified email message to the specified destination folder (mailbox). Uses copy and delete, if <see cref="F:Limilabs.Client.IMAP.ImapExtension.Move"/> is unavailable.
            </summary>
            <param name="uid">Unique-id of the message.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-id (UID) of the copied/moved message, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MoveByNumber(System.Int64,Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Moves the specified email message to the specified destination folder (mailbox). Uses copy and delete, if <see cref="F:Limilabs.Client.IMAP.ImapExtension.Move"/> is unavailable.
            </summary>
            <param name="messageNumber">1 based message number.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-id (UID) of the copied/moved message, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MoveByUID(System.Int64,System.String)">
            <summary>
            Moves the specified email message to the specified destination folder (mailbox). Uses copy and delete, if <see cref="F:Limilabs.Client.IMAP.ImapExtension.Move"/> is unavailable.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="uid">Unique-id of the message.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-id (UID) of the copied/moved message, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MoveByNumber(System.Int64,System.String)">
            <summary>
            Moves the specified email message to the specified destination folder (mailbox). Uses copy and delete, if <see cref="F:Limilabs.Client.IMAP.ImapExtension.Move"/> is unavailable.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="messageNumber">1 based message number.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-id (UID) of the copied/moved message, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, null otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MoveByUID(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Moves the specified email messages to the specified destination folder (mailbox). Uses copy and delete, if <see cref="F:Limilabs.Client.IMAP.ImapExtension.Move"/> is unavailable.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="uids">Unique-ids of the messages.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-ids (UIDs) of the copied/moved messages, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MoveByNumber(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Moves the specified email messages to the specified destination folder (mailbox). Uses copy and delete, if <see cref="F:Limilabs.Client.IMAP.ImapExtension.Move"/> is unavailable.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in mailbox folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-ids (UIDs) of the copied/moved messages, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MoveByUID(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Moves the specified email messages to the specified destination folder (mailbox). Uses copy and delete, if <see cref="F:Limilabs.Client.IMAP.ImapExtension.Move"/> is unavailable.
            </summary>
            <param name="uids">Unique-ids of the messages.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-ids (UIDs) of the copied/moved messages, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.MoveByNumber(System.Collections.Generic.List{System.Int64},Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Moves the specified email messages to the specified destination folder (mailbox). Uses copy and delete, if <see cref="F:Limilabs.Client.IMAP.ImapExtension.Move"/> is unavailable.
            </summary>
            <param name="messageNumbers">1 based message numbers.</param>
            <param name="destinationFolder">Destination folder (mailbox).</param>
            <returns>Newly assigned unique-ids (UIDs) of the copied messages, if the server supports <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus" />, empty otherwise.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetNamespaces">
            <summary>
            Lists all namespaces available for this user.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Namespace"/>. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/> method.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SubscribeFolder(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Subscribes user to specified folder.
            </summary>
            <param name="folder">Folder name to subscribe to.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.SubscribeFolder(System.String)">
            <summary>
            Subscribes user to specified folder.
            </summary>
            <param name="folder">Folder name to subscribe to.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UnsubscribeFolder(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Unsubscribes user from specified folder.
            </summary>
            <param name="folder">Folder name to unsubscribe from.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UnsubscribeFolder(System.String)">
            <summary>
            Unsubscribes user from specified folder.
            </summary>
            <param name="folder">Folder name to unsubscribe from.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetSubscribedFolders">
            <summary>
            Lists all folders (mailboxes) user is subscribed to.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetSubscribedFolders(System.String)">
            <summary>
            Lists folders (mailboxes) user is subscribed to, starting from specified folder.
            </summary>
            <param name="folder">Parent folder (mailbox) to start search from.</param>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetSubscribedFolders(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Lists folders (mailboxes) user is subscribed to, starting from specified folder.
            </summary>
            <param name="folder">Parent folder (mailbox) to start search from.</param>
            <returns>Folder list.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFolders">
            <summary>
            Lists all folders (mailboxes) starting from root.
            Folders starting with '#' are usually shared between users. You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetNamespaces"/> to obtain information about shared folders.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Folder list.</returns>
            <seealso cref="T:Limilabs.Client.IMAP.CommonFolders"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(Limilabs.Client.IMAP.SubFolders)">
            <summary>
            Lists all folders (mailboxes) starting from root.
            Folders starting with '#' are usually shared between users. You can use <see cref="M:Limilabs.Client.IMAP.Imap.GetNamespaces"/> to obtain information about shared folders.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="subFolders">Sub folder level to download.</param>
            <returns>Folder list.</returns>
            <seealso cref="T:Limilabs.Client.IMAP.CommonFolders"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(System.String)">
            <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). 
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="parent">Parent folder (mailbox) to start search from.</param>
            <returns>Folder list.</returns>
            <seealso cref="T:Limilabs.Client.IMAP.CommonFolders"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). 
            </summary>
            <param name="parent">Parent folder (mailbox) to start search from.</param>
            <returns>Folder list.</returns>
            <seealso cref="T:Limilabs.Client.IMAP.CommonFolders"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(System.String,Limilabs.Client.IMAP.SubFolders)">
            <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). 
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="parent">Parent folder (mailbox) to start search from.</param>
            <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
            <returns>Folder list.</returns>
            <seealso cref="T:Limilabs.Client.IMAP.CommonFolders"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFolders(Limilabs.Client.IMAP.FolderInfo,Limilabs.Client.IMAP.SubFolders)">
            <summary>
            Lists all folders (mailboxes) under specified folder (mailbox). 
            </summary>
            <param name="parent">Parent folder (mailbox) to start search from.</param>
            <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
            <returns>Folder list.</returns>
            <seealso cref="T:Limilabs.Client.IMAP.CommonFolders"/>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.CreateFolder(System.String)">
            <summary>
             Creates a folder (mailbox) with the given name.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder name.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.DeleteFolder(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Permanently removes a folder (mailbox) with the given name.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths.
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            
            The DELETE command MUST NOT remove inferior hierarchical names. For example, if a mailbox "foo" has an inferior "foo.bar" 
            (assuming "." is the hierarchy delimiter character), removing "foo" MUST NOT remove "foo.bar".  
            
            It is an error to attempt to delete a name that has inferior hierarchical names and also has the \Noselect mailbox name attribute.
            
            It is permitted to delete a name that has inferior hierarchical names and does not have the \Noselect mailbox name attribute.  
            In this case, all messages in that mailbox are removed, and the name will acquire the \Noselect mailbox name attribute.
            </remarks>
            <param name="folder">Folder name.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.DeleteFolder(System.String)">
            <summary>
            Permanently removes a folder (mailbox) with the given name.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths.
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            
            The DELETE command MUST NOT remove inferior hierarchical names. For example, if a mailbox "foo" has an inferior "foo.bar" 
            (assuming "." is the hierarchy delimiter character), removing "foo" MUST NOT remove "foo.bar".  
            
            It is an error to attempt to delete a name that has inferior hierarchical names and also has the \Noselect mailbox name attribute.
            
            It is permitted to delete a name that has inferior hierarchical names and does not have the \Noselect mailbox name attribute.  
            In this case, all messages in that mailbox are removed, and the name will acquire the \Noselect mailbox name attribute.
            </remarks>
            <param name="folder">Folder name.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.RenameFolder(Limilabs.Client.IMAP.FolderInfo,System.String)">
            <summary>
             Changes the name of a folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="existingFolder">Existing folder name.</param>
            <param name="newFolder">New folder name.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.RenameFolder(System.String,System.String)">
            <summary>
             Changes the name of a folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="existingFolder">Existing folder name.</param>
            <param name="newFolder">New folder name.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFoldersTree(Limilabs.Client.IMAP.SubFolders)">
            <summary>
            Lists folder tree roots starting from root. 
            In contrast to GetFolders method only roots are returned. You can use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders"/> to access sub folders.
            </summary>
            <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
            <returns>Folder tree roots (use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders"/> to access sub folders).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFoldersTree(Limilabs.Client.IMAP.FolderInfo,Limilabs.Client.IMAP.SubFolders)">
            <summary>
            Lists folder tree roots starting from specified folder (mailbox).
            In contrast to GetFolders method only roots are returned. You can use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders"/> to access sub folders.
            </summary>
            <param name="parent">Parent folder (mailbox) to start search from.</param>
            <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
            <returns>Folder tree roots (use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders"/> to access sub folders).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.GetFoldersTree(System.String,Limilabs.Client.IMAP.SubFolders)">
            <summary>
            Lists folder tree roots starting from specified folder (mailbox).
            In contrast to GetFolders method only roots are returned. You can use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders"/> to access sub folders.
            </summary>
            <param name="parent">Parent folder (mailbox) to start search from.</param>
            <param name="subFolders">Indicates how many sub folder levels should be downloaded.</param>
            <returns>Folder tree roots (use <see cref="P:Limilabs.Client.IMAP.FolderInfo.SubFolders"/> to access sub folders).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.DeleteFolderRecursively(System.String)">
            <summary>
            Permanently removes all sub folders and folder (mailbox) with the given name.
            </summary>
            <param name="folder">Folder name to remove.</param>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.DeleteFolderRecursively(Limilabs.Client.IMAP.FolderInfo)">
            <summary>
            Permanently removes all sub folders and folder (mailbox) specified.
            </summary>
            <param name="folder">Folder to remove.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,System.Byte[],Limilabs.Client.IMAP.UploadMessageInfo)">
            <summary>
            Uploads message to specified folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder to upload.</param>
            <param name="eml">Message to upload.</param>
            <param name="messageInfo">Additional message information (e.g. flags, internal date, Gmail labels).</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,Limilabs.Mail.IMail)">
            <summary>
            Uploads message to specified folder (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder name to upload to.</param>
            <param name="email">Message to upload.</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,System.Byte[])">
            <summary>
            Uploads message to specified folder (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
            <param name="folder">Folder name to upload to.</param>
            <param name="eml">Message to upload.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.String,Limilabs.Mail.IMail,Limilabs.Client.IMAP.UploadMessageInfo)">
            <summary>
            Uploads specified email message to the specified folder (mailbox).
            </summary>
            <remarks>
            IMAP servers may differ in the separator character used in folder hierarchy paths. 
            Common separator chars are '.' and '/'. For example: "Inbox/Folder" or "Inbox.Folder".
            </remarks>
            <param name="folder">Folder to upload.</param>
            <param name="email">Message to upload.</param>
            <param name="messageInfo">Additional message information (e.g. flags, internal date, Gmail labels).</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Client.IMAP.FolderInfo,Limilabs.Mail.IMail)">
            <summary>
            Uploads specified email message to the specified folder (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
            <param name="folder">Folder to upload  to.</param>
            <param name="email">Message to upload.</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Client.IMAP.FolderInfo,System.Byte[])">
            <summary>
            Uploads message to specified folder (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
            <param name="folder">Folder to upload  to.</param>
            <param name="eml">Message to upload.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Client.IMAP.FolderInfo,Limilabs.Mail.IMail,Limilabs.Client.IMAP.UploadMessageInfo)">
            <summary>
            Uploads message to specified folder (mailbox).
            </summary>
            <param name="folder">Folder to upload.</param>
            <param name="email">Message to upload.</param>
            <param name="messageInfo">Additional message information (e.g. flags, internal date).</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Client.IMAP.FolderInfo,System.Byte[],Limilabs.Client.IMAP.UploadMessageInfo)">
            <summary>
            Uploads message to specified folder (mailbox).
            </summary>
            <param name="folder">Folder to upload.</param>
            <param name="eml">Message to upload.</param>
            <param name="messageInfo">Additional message information (e.g. flags, internal date).</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Mail.IMail)">
            <summary>
            Uploads specified email message to the current folder (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
            <param name="email">Message to upload.</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.Byte[])">
            <summary>
            Uploads specified email message to the current (mailbox). Uploaded message has <see cref="F:Limilabs.Client.IMAP.Flag.Seen"/> set.
            Internal date of the resulting message is set to the current date and time.
            </summary>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
            <param name="eml">Message to upload.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(Limilabs.Mail.IMail,Limilabs.Client.IMAP.UploadMessageInfo)">
            <summary>
            Uploads specified email message to the current (mailbox).
            </summary>
            <param name="email">Message to upload.</param>
            <param name="messageInfo">Additional message information (e.g. flags, internal date).</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.UploadMessage(System.Byte[],Limilabs.Client.IMAP.UploadMessageInfo)">
            <summary>
            Uploads specified email email message to the current (mailbox).
            </summary>
            <param name="eml">Message to upload.</param>
            <param name="messageInfo">Additional message information (e.g. flags, internal date).</param>
            <returns>Unique-id of the uploaded message (<c>Null</c> if server does not support <see cref="F:Limilabs.Client.IMAP.ImapExtension.UniqueIdPlus"/>).</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Idle">
            <summary>
            Sends IDLE command. 
            This method hangs until server announces new event in current folder or until <see cref="M:Limilabs.Client.IMAP.Imap.StopIdle"/> command is issued.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Idle"/>. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/> method.
            </summary>
            <returns>New folder status.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Idle(System.TimeSpan)">
            <summary>
            Sends IDLE command. 
            This method hangs until server announces new event in current folder or until <see cref="M:Limilabs.Client.IMAP.Imap.StopIdle"/> command is issued.
            Not all servers support <see cref="F:Limilabs.Client.IMAP.ImapExtension.Idle"/>. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.IMAP.Imap.SupportedExtensions"/> method.
            </summary>
            <param name="timeout">Specifies the timeout after which IDLE command is reissued (this prevents server from disconnecting).</param>
            <returns>New folder status.</returns>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.StopIdle">
            <summary>
            Stops IDLE command started by <see cref="M:Limilabs.Client.IMAP.Imap.Idle"/> or <see cref="M:Limilabs.Client.IMAP.Imap.Idle(System.TimeSpan)"/> method.
            This method is thread-safe.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Noop">
            <summary>
            Sends NOOP command to the server. It does nothing and always succeeds.
            Can be used as a periodic poll for new messages - updates <see cref="T:Limilabs.Client.IMAP.FolderStatus"/> returned by last <see cref="M:Limilabs.Client.IMAP.Imap.Select(System.String)" />, <see cref="M:Limilabs.Client.IMAP.Imap.Select(Limilabs.Client.IMAP.FolderInfo)" /> command.
            Can also be used to reset any inactivity auto-logout timer on the server.
            </summary>
            <exception cref="T:Limilabs.Client.IMAP.ImapResponseException">Throws <see cref="T:Limilabs.Client.IMAP.ImapResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.IMAP.Imap.Compress">
            <summary>
            Turns compression on. Uses deflate algorithm.
            </summary>
            <seealso cref="P:Limilabs.Client.ClientBase.IsCompressed"/>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapResponse">
            <summary>
            Represents IMAP server response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapResponse.StatusLine">
            <summary>
            Gets the status line (including <see cref="P:Limilabs.Client.IMAP.ImapResponse.Tag"/>, <see cref="P:Limilabs.Client.IMAP.ImapResponse.Status"/> and <see cref="P:Limilabs.Client.IMAP.ImapResponse.Message"/>) e.g.: "A0001 OK LOGOUT completed".
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapResponse.Tag">
            <summary>
            Gets tag expected for this response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapResponse.AcceptsUTF8">
            <summary>
            Gets the information if server uses UTF8 encoding.
            </summary>
            <remarks>
            True means that, for example, UTF7 decoding shouldn't performed on folder names.
            </remarks>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapResponse.Status">
            <summary>
             Gets status of this response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapResponse.Message">
            <summary>
            Gets response message (without <see cref="P:Limilabs.Client.IMAP.ImapResponse.Tag"/> and <see cref="P:Limilabs.Client.IMAP.ImapResponse.Status"/>) e.g.: "LOGOUT completed".
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapResponse.Lines">
            <summary>
            Gets all lines of the response except the status line as strings.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapResponse.BinaryLines">
            <summary>
            Gets all lines of the response except the status line.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.ImapResponse.AdditionalResponse">
            <summary>
            Gets additional response enclosed in square brackets e.g. "BADCHARSET (US-ASCII)".
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.ImapResponse.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Limilabs.Client.IMAP.ImapResponse"/>.
            </summary>
            <returns>
            A string that represents the current <see cref="T:Limilabs.Client.IMAP.ImapResponse"/>.
            </returns>
        </member>
        <member name="T:Limilabs.Client.IMAP.FolderStatus">
            <summary>
            Represents folder status: message counts, available flags.
            Returned by <see cref="M:Limilabs.Client.IMAP.Imap.Select(System.String)"/>, <see cref="M:Limilabs.Client.IMAP.Imap.Examine(System.String)"/>, <see cref="M:Limilabs.Client.IMAP.Imap.Select(Limilabs.Client.IMAP.FolderInfo)"/>, <see cref="M:Limilabs.Client.IMAP.Imap.Examine(Limilabs.Client.IMAP.FolderInfo)"/>, <see cref="M:Limilabs.Client.IMAP.Imap.SelectInbox"/>, <see cref="M:Limilabs.Client.IMAP.Imap.ExamineInbox"/> and updated be all other commands.
            </summary>
        </member>
        <member name="E:Limilabs.Client.IMAP.FolderStatus.Updated">
            <summary>
            Represents event that is fired when object is updated.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.Name">
            <summary>
            Gets the name of the folder (mailbox).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.ReadOnly">
            <summary>
            Gets a boolean value indicating if the folder (mailbox) is read only.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags">
            <summary>
            Gets a boolean value indicating if custom flags (keywords) can be created in the folder (mailbox).
            Internally it checks if <see cref="P:Limilabs.Client.IMAP.FolderStatus.PermanentFlags"/> collection contains <see cref="F:Limilabs.Client.IMAP.Flag.Star"/>.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.SupportsMDNSent">
            <summary>
            Gets a boolean value indicating if <see cref="F:Limilabs.Client.IMAP.Flag.MDNSent"/> ($MDNSent) is supported.
            Internally it checks if <see cref="P:Limilabs.Client.IMAP.FolderStatus.PermanentFlags"/> collection contains <see cref="F:Limilabs.Client.IMAP.Flag.MDNSent"/> or <see cref="P:Limilabs.Client.IMAP.FolderStatus.SupportsCustomFlags"/> returns true.
            </summary>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByUID(System.Int64,Limilabs.Client.IMAP.Flag)"/>
            <seealso cref="M:Limilabs.Client.IMAP.Imap.FlagMessageByNumber(System.Int64,Limilabs.Client.IMAP.Flag)"/>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.MessageCount">
            <summary>
            Gets total message count in the folder (mailbox) (EXISTS). 
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.Recent">
            <summary>
            Gets number of messages with <see cref="F:Limilabs.Client.IMAP.Flag.Recent"/> flag set (RECENT). 
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.Expunge">
            <summary>
            Gets numbers of messages that have been permanently removed from the folder (mailbox). 
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.UIDValidity">
            <summary>
            Gets the unique identifier validity value.
            
            Any change of unique identifiers between sessions MUST be detectable using the change of UIDVALIDITY.
            If unique identifiers from an earlier session fail to persist in this session, 
            the UIDVALIDITY value MUST be greater than the one used in the earlier session.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.UIDNext">
             <summary>
             Gets the next unique identifier value.
             
             The next unique identifier value is the predicted value that will be assigned to a new message in the folder (mailbox).
             Unless the unique identifier validity (<see cref="P:Limilabs.Client.IMAP.FolderStatus.UIDValidity"/>) also changes , the next unique identifier value 
             MUST NOT change unless new messages are added to the mailbox; 
             and  the next unique identifier value 
             MUST change whenever new messages are added to the mailbox, even if those new messages are subsequently deleted.
            
             The next unique identifier value is intended to provide a means for a client to determine whether 
             any messages have been delivered to the mailbox since the previous time it checked this value.
             </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.FirstUnseenMessageNumber">
            <summary>
            Gets the message sequence number of the first unseen message in the folder (OK [UNSEEN &lt;n&gt;]) 
            If it's null client can not make any assumptions about the first unseen message, and needs to issue a <see cref="M:Limilabs.Client.IMAP.Imap.Search(Limilabs.Client.IMAP.Flag)"/> with <see cref="F:Limilabs.Client.IMAP.Flag.Unseen"/> if it wants to find it.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.Flags">
            <summary>
            Gets the list of flags available in the folder. 
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.PermanentFlags">
            <summary>
            Gets the list of the known flags that can be change permanently.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.AllFlagsArePermanent">
            <summary>
            Gets boolean value indicating if all flags are permanent (no PERMANENTFLAGS response received from the IMAP server).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.Alerts">
            <summary>
            Gets the list of server alerts (indicated by [ALERT] keyword).
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.Throttled">
            <summary>
            Gets the value indicating that requests are being throttled.
            In this case, your application should back off and perform fewer requests for that user.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.FolderStatus.UIDNotSticky">
            <summary>
             The selected mailbox is supported by a mail store that does not support persistent UIDs; that is, 
            UIDVALIDITY will be different each time the mailbox is selected.  
            Consequently, APPEND or COPY to this mailbox will not return an APPENDUID or COPYUID response code.
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.ImapResponseStatus">
            <summary>
            Represents a status of a <see cref="T:Limilabs.Client.IMAP.ImapResponse"/>.
            </summary>
            <seealso cref="P:Limilabs.Client.IMAP.ImapResponse.Status"/>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.Negative">
            <summary> 
            Negative status ("NO" response). 
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.Positive">
            <summary> 
            Positive status ("OK" response). 
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.Error">
            <summary> 
            Error status ("BAD" response). 
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.SendMoreData">
            <summary> 
            Requires more data status ("+" response). 
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.Bye">
            <summary> 
            BYE response received, server failure occured, connection was closed by the server ("* BYE" response). 
            </summary>
        </member>
        <member name="F:Limilabs.Client.IMAP.ImapResponseStatus.PreAuth">
            <summary> 
            PREAUTH response received, possible only at connection startup greeting.
            It indicates that the connection has already been authenticated by external means
            </summary>
        </member>
        <member name="T:Limilabs.Client.IMAP.SimpleImapQuery">
            <summary>
            Simple IMAP query that can be used instead joining several criteria defined in <see cref="T:Limilabs.Client.IMAP.Expression"/> class.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Subject">
            <summary>
            Messages that contain the specified string in the envelope structure's SUBJECT field.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Body">
            <summary>
             Messages that contain the specified string in the body of the message.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.From">
            <summary>
            Messages that contain the specified string in the envelope structure's FROM field.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.To">
            <summary>
             Messages that contain the specified string in the envelope structure's TO field.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Cc">
            <summary>
            Messages that contain the specified string in the envelope structure's CC field.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Bcc">
            <summary>
             Messages that contain the specified string in the envelope structure's BCC field.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Answered">
            <summary>
            Messages with the \Answered flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Flagged">
            <summary>
            Messages with the \Flagged flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Deleted">
            <summary>
            Messages with the \Deleted flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Draft">
            <summary>
            Messages with the \Draft flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.New">
            <summary>
            Messages that have the \Recent flag set but not the \Seen flag. This is functionally equivalent to "(RECENT UNSEEN)".
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Old">
            <summary>
            Messages that do not have the \Recent flag set.  This is functionally equivalent to "NOT RECENT" (as opposed to "NOT NEW").
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Recent">
            <summary>
             Messages that have the \Recent flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Seen">
            <summary>
            Messages that have the \Seen flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Unanswered">
            <summary>
            Messages that do not have the \Answered flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Undeleted">
            <summary>
            Messages that do not have the \Deleted flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Undraft">
            <summary>
            Messages that do not have the \Draft flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Unflagged">
            <summary>
            Messages that do not have the \Flagged flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.Unseen">
            <summary>
            Messages that do not have the \Seen flag set.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.LargerThen">
            <summary>
            Messages with an [RFC-2822] size larger than the specified number of octets.
            </summary>
        </member>
        <member name="P:Limilabs.Client.IMAP.SimpleImapQuery.SmallerThen">
            <summary>
            Messages with an [RFC-2822] size smaller than the specified number of octets.
            </summary>
        </member>
        <member name="M:Limilabs.Client.IMAP.SimpleImapQuery.Render(Limilabs.Client.IMAP.ImapCommand)">
            <summary>
            Renders current criteria object to specified command list.
            </summary>
            <param name="command">Command to render on.</param>
        </member>
        <member name="M:Limilabs.Client.IMAP.SimpleImapQuery.IsASCII">
            <summary>
            Returns true if this criterion requires only ASCII characters to be rendered.
            </summary>
            <returns>True if this criterion requires only ASCII characters to be rendered, false otherwise.</returns>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3Configuration">
            <summary>
            Represents <see cref="T:Limilabs.Client.POP3.Pop3"/> configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3Configuration.RetryAuthWithoutInitialResponse">
            <summary>
            Gets or sets value indicating if AUTH command should be retried without initial response on failure.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3Configuration.AuthWithoutInitialResponse">
            <summary>
            Gets or sets the boolean value indicating if AUTH command should be used without initial response only.
            Default is false. 
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3Configuration.DisableAPOP">
            <summary>
            Gets or sets the boolean value indicating if APOP login mechanism can be used by <see cref="M:Limilabs.Client.POP3.Pop3.UseBestLogin(System.String,System.String)"/> method. 
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3Configuration.AuthenticationEncoding">
            <summary>
            Gets or sets text encoding used when providing credentials.
            </summary>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3ResponseException">
            <summary>
            Represents an POP3 server error response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3ResponseException.Response">
            <summary>
            Gets POP3 server response that caused this exception to be thrown.
            </summary>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3ResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of Pop3ResponseException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3UTF8Extension">
            <summary>
            Represents POP3 UTF8 extension.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3UTF8Extension.UTF8User">
            <summary>
            Gets boolan value indicating UTF8 USER extension is supported.
            </summary>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3AuthenticationMethod">
            <summary>
            Represents authentication methods supported by the remote server.
            You can use <see cref="M:Limilabs.Client.POP3.Pop3.SupportedAuthenticationMethods"/> method to obtain the list of all methods supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.UserPass">
            <summary>
            USER authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.Plain">
            <summary>
            SASL PLAIN authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.CramMD5">
            <summary>
            SASL CRAM-MD5 authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.DigestMD5">
            <summary>
            SASL DIGEST-MD5 authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.NTLM">
            <summary>
            SASL NTLM authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.GssApi">
            <summary>
            SASL GSSAPI authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3AuthenticationMethod.APOP">
            <summary>
            APOP authentication method.
            </summary>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3Extension">
            <summary>
            Represents extensions supported by the remote server.
            You can use <see cref="M:Limilabs.Client.POP3.Pop3.SupportedExtensions"/> method to obtain the list of all extensions supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3Extension.STLS">
            <summary>
            STLS extension is supported. You can use <see cref="M:Limilabs.Client.POP3.Pop3.STLS"/> to secure the connection.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3Extension.UIDL">
            <summary>
            UIDL extension is supported. You can use <see cref="M:Limilabs.Client.POP3.Pop3.GetAll"/> method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3Extension.Top">
            <summary>
            TOP extension is supported. You can use <see cref="M:Limilabs.Client.POP3.Pop3.GetHeadersByNumber(System.Int64)"/> and <see cref="M:Limilabs.Client.POP3.Pop3.GetHeadersByUID(System.String)"/> method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3Extension.LoginDelay">
            <summary>
            LOGIN-DELAY extension.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3Extension.Sasl">
            <summary>
            SASL extension. You can use <see cref="M:Limilabs.Client.POP3.Pop3.SupportedAuthenticationMethods"/> to obtain all authentication methods supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3Extension.User">
            <summary>
            USER extension is supported. You can use <see cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3Extension.UTF8">
            <summary>
            UTF8 extension. Allows usage of UTF-8 communication between client and server.
            (<a href="https://www.limilabs.com/mail/rfc/6856">RFC 6856</a>)
            </summary>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3LoginDelayExtension">
            <summary>
            Represents POP3 LOGIN-DELAY extension.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3LoginDelayExtension.Value">
            <summary>
            Gets the time interval after an "+OK" response to authentication (PASS, APOP, or AUTH command) before another authentication will be accepted.
            </summary>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3SaslExtension">
            <summary>
            Represents POP3 SASL extension.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3SaslExtension.Methods">
            <summary>
            Gets supported authentication methods.
            </summary>
        </member>
        <member name="T:Limilabs.Client.POP3.AccountStats">
            <summary>
            Represents account statistics. 
            You can use <see cref="M:Limilabs.Client.POP3.Pop3.GetAccountStat"/> to get those information.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.AccountStats.MessageCount">
            <summary>
            Number of messages on server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.AccountStats.MailboxSize">
            <summary>
            Size of all mail messages on the server in octets.
            </summary>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3ResponseStatus">
            <summary>
            Represents a status of a <see cref="T:Limilabs.Client.POP3.Pop3Response"/>.
            </summary>
            <seealso cref="P:Limilabs.Client.POP3.Pop3Response.Status"/>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3ResponseStatus.Negative">
            <summary> 
            Negative status ("-ERR" response). 
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3ResponseStatus.Positive">
            <summary>
            Positive status ("+OK" response). 
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3ResponseStatus.SendMoreData">
            <summary>
            Send more data status ("+ ..." response). 
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3ResponseStatus.Error">
            <summary> 
            Error status (unknown reasponse). 
            </summary>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3">
            <summary>
            POP3 client implementation. 
            It allows listing, downloading and deleting emails from POP3 servers.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3.DefaultPort">
            <summary>
            Default POP3 protocol port (110).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32)"/> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3.DefaultSSLPort">
            <summary>
            Default POP3 protocol over SSL port (995).
            If you need to use different port please use use port parameter in <see cref="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)"/> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3.ServerGreeting">
            <summary>
            Gets the server greeting (initial response).
            </summary>
        </member>
        <member name="F:Limilabs.Client.POP3.Pop3._timeStamp">
            <summary>
            A POP3 server which implements the APOP command will include a timestamp in its banner greeting.
            The syntax of the timestamp corresponds to the Message-ID ("&lt;12214.123@ad12&gt;")
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3.HasTimeStamp">
            <summary>
            Gets the value that indicates if there was a timestamp in server's greeting.
            Usually it means that APOP command (<see cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)"/>) is supported, but not always.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3.Configuration">
            <summary>
            Gets POP3 protocol configuration.
            </summary>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.#ctor">
            <summary>
            Initializes new instance of the Pop3 class.
            </summary>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes new instance of the Pop3 class.
            </summary>
            <param name="addressFamily">Address family.</param>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.Connect(System.String)">
            <summary>
            Connects to POP3 server on port 110. Use <see cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)"/> when SSL connection is needed.
            </summary>
            <param name="host">Host name or IP address.</param>    
            <exception cref="T:Limilabs.Client.ServerException">DNS resolving error, connection error.</exception>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Initial error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)">
            <summary>
            Connects to POP3 server using SSL on port 995.
            </summary>
            <param name="host">Host name or IP address.</param>
            <seealso cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)"/>
            <exception cref="T:Limilabs.Client.ServerException">DNS resolving error, connection error.</exception>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Initial error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.BeginConnect(System.String)">
            <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.POP3.Pop3.DefaultPort"/>.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.BeginConnect(System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.POP3.Pop3.DefaultPort"/>.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.BeginConnectSSL(System.String)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.POP3.Pop3.DefaultSSLPort"/> and SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.BeginConnectSSL(System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.POP3.Pop3.DefaultSSLPort"/> and SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetServerGreeting">
            <summary>
            Receives server's greeting. Extracts the timestamp. Issues CAPA command.
            </summary>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.StartTLS">
            <summary>
            Sends 'STLS' command and initializes SSL connection (issues CAPA command afterwards).
            Not all servers support <see cref="F:Limilabs.Client.POP3.Pop3Extension.STLS"/>. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.POP3.Pop3.SupportedExtensions"/> method.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.STLS">
            <summary>
            Sends 'STLS' command and initializes SSL connection (issues CAPA command afterwards).
            Not all servers support <see cref="F:Limilabs.Client.POP3.Pop3Extension.STLS"/>. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.POP3.Pop3.SupportedExtensions"/> method.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.SendCommand(System.String)">
            <summary>
            Sends command, which expects to receive single-line response, to POP3 server (e.g. "STAT").
            </summary>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command e.g. "STAT".</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>Single-line response object.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.SendCommand(System.String,System.Boolean)">
            <summary>
            Sends command, which expects to receive single-line response, to POP3 server (e.g. "STAT").
            </summary>
            <remarks>
            Some commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command e.g. "STAT".</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response</param>
            <returns>Single-line response object.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.SendMultiLineCommand(System.String)">
            <summary>
            Sends command, which expects to receive multi-line response, to POP3 server (e.g. "RETR").
            </summary>
            <remarks>
            Some commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command to send e.g. "RETR".</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>Multi-line response object.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.SendMultiLineCommand(System.String,System.Boolean)">
            <summary>
            Sends command, which expects to receive multi-line response, to POP3 server (e.g. "RETR").
            </summary>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command to send e.g. "RETR".</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response</param>
            <returns>Multi-line response object.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.UseBestLogin(System.String,System.String)">
            <summary>
            Logs user in using best method available. 
            When no SASL capability is found, this method switches to SSL (<see cref="M:Limilabs.Client.POP3.Pop3.STLS"/>) and tries again.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)">
            <summary>
            Logs user in using USER and PASS commands. This method sends the password in clear text, unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginCRAM(System.String,System.String)"/>  <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String,System.String)">
            <summary>
            Logs user in using AUTH PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="adminUser">Administrator's user.</param>
            <param name="adminPassword">Administrator's password.</param>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginCRAM(System.String,System.String)">
            <summary>
            Logs user in using AUTH CRAM-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginDIGEST(System.String,System.String)">
            <summary>
            Logs user in using AUTH DIGEST-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.UseBestLogin(System.String,System.String)"/> 
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginDIGEST(System.String,System.String,System.String)">
            <summary>
            Logs user in using AUTH DIGEST-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <param name="uri">Host and service name (host ["/" service-name]) part of digest-uri parameter, if null realm is used.</param>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginCRAM(System.String,System.String)"/>"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI">
            <summary>
            Logs user in using <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/> mechanism. Target will be constructed as "pop/" + TargetHost name.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            Target will be constructed as "pop/" + TargetHost name.
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "pop/" + fully qualified target name.</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            Target will be constructed as "pop/" + TargetHost name.
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <param name="userWithDomain">User's login (e.g. "domain/user").</param>
            <param name="password">User's password.</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String,System.String)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <param name="userWithDomain">User's login (e.g. "domain/user").</param>
            <param name="password">User's password.</param>
            <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "pop/" + fully qualified target name.</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginAPOP(System.String,System.String)">
            <summary>
            Logs user in using APOP command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            APOP is optional command and a POP3 server does NOT need to support it.
            A POP3 server which implements the APOP command will include a timestamp in its banner greeting. 
            Check <see cref="P:Limilabs.Client.POP3.Pop3.HasTimeStamp"/> property in order to know if server included the timestamp.
            Some servers include timestamp, but do NOT support APOP command.
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.ConnectSSL(System.String)"/>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/>
            <seealso cref="P:Limilabs.Client.POP3.Pop3.HasTimeStamp"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <exception cref="T:System.Exception">When <see cref="P:Limilabs.Client.POP3.Pop3.HasTimeStamp"/> is false.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.LoginOAUTH2(System.String,System.String)">
            <summary>
            Logs user in using AUTHENTICATE XOAUTH2 command. This method does NOT send the password.
            You can use <a href="http://www.dotnetopenauth.net/">DotNetOpenAuth</a> to create the key.
            You can check which authentication methods remote server supports using <see cref="M:Limilabs.Client.POP3.Pop3.SupportedAuthenticationMethods"/> method.
            </summary>
            <param name="user">User's login (email address).</param>
            <param name="accessToken">OAuth 2.0 access token.</param>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.POP3.Pop3.LoginCRAM(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetAccountStat">
            <summary>
            Gets stat information from server.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>Account statistics.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.DeleteMessageByUID(System.String)">
            <summary>
            Deletes message specified by the <paramref name="uid"/>.
            POP3 server does not actually delete the message until successful QUIT command issued by <see cref="M:Limilabs.Client.POP3.Pop3.Close"/> or <see cref="M:Limilabs.Client.POP3.Pop3.Close(System.Boolean)"/>.
            </summary>
            <param name="uid">Unique-id of the message to flag.</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <exception cref="T:System.Exception">Invalid uid provided.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.DeleteMessageByNumber(System.Int64)">
            <summary>
            Marks specified message for deletion.
            POP3 server does not actually delete the message until successful QUIT command issued by <see cref="M:Limilabs.Client.POP3.Pop3.Close"/> or <see cref="M:Limilabs.Client.POP3.Pop3.Close(System.Boolean)"/>.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <param name="messageNumber">Number of the message to delete (starts from 1)</param>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetHeadersByUID(System.String)">
            <summary>
            Gets headers of the specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <exception cref="T:System.Exception">Invalid uid provided.</exception>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>Email message headers.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetHeadersByNumber(System.Int64)">
            <summary>
            Gets headers of the specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <param name="messageNumber">Number of message to get (starts from 1)</param>
            <returns>Email message headers.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetMessageByUID(System.String)">
            <summary>
            Gets specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <exception cref="T:System.Exception">Invalid uid provided.</exception>
            <param name="uid">Unique-id of the message to get.</param>
            <returns>Email message.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetMessageByNumber(System.Int64)">
            <summary>
            Gets specified email message from server. Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <param name="messageNumber">Number of the message to get (starts from 1).</param>
            <returns>Email message.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetAll">
            <summary>
            Gets UIDS of all messages.
            </summary>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.GetMessageByUID(System.String)"/> <seealso cref="M:Limilabs.Client.POP3.Pop3.GetHeadersByUID(System.String)"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>UID list.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetUID">
            <summary>
            Sends UIDL command to the pop3 server. Returns a key value collection. 
            Keys are message numbers (starting from 1), value is a unique-id of the message.
            </summary>
            <seealso cref="M:Limilabs.Client.POP3.Pop3.GetAll"/>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>Key value collection, with message number as key and unique-id as a value</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetUID(System.Int64)">
            <summary>
            Sends UIDL command to the pop3 server. Returns unique-id for that message.
            </summary>
            <param name="messageNumber">Message number</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>Unique-id for specified email message</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetSizeByNumber">
            <summary>
            Returns the size (in bytes) of all messages. Keys are message numbers (starting from 1), value is the size of the message.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>Key value collection, with message number as key and size as a value</returns>        
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetSizeByUID">
            <summary>
            Returns the size (in bytes) of all messages. Keys are message uids, value is the size of the message.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>Key value collection, with message UID as key and size as a value</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetSizeByUID(System.String)">
            <summary>
            Returns the size (in bytes) of specified message in bytes.
            </summary>
            <param name="uid">Unique-id of the message to get.</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <exception cref="T:System.Exception">Invalid uid provided.</exception>
            <returns>Size of the message.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.GetSizeByNumber(System.Int64)">
            <summary>
            Returns the size (in bytes) of specified message in bytes.
            </summary>
            <param name="messageNumber">Number of message to get (starts from 1)</param>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>Size of the message.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.Capability">
            <summary>
            Sends CAPA command. Retrieves POP3 server capablity list.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
            <returns>Server's capability list.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.Noop">
            <summary>
            Sends NOOP command to the server. It does nothing and always succeeds.
            Can be used to reset any inactivity auto-logout timer on the server.
            </summary>
            <exception cref="T:Limilabs.Client.POP3.Pop3ResponseException">Throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.SupportedExtensions">
            <summary>
            Lists extensions supported by the remote POP3 server (e.g. STLS, TOP)
            </summary>
            <returns>Extensions supported by remote server.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.SupportedAuthenticationMethods">
            <summary>
            Lists authentication methods supported by the remote POP3 server.
            </summary>
            <returns>Authentication methods supported by remote server.</returns>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.Close">
            <summary>
            Sends QUIT command. Disconnects and releases all resources acquired by this object.
            </summary>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3.Close(System.Boolean)">
            <summary>
            Sends QUIT command. Disconnects and releases all resources acquired by this object.
            </summary>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.POP3.Pop3ResponseException"/> on error response to QUIT command.</param>
        </member>
        <member name="T:Limilabs.Client.POP3.Pop3Response">
            <summary>
            Represents POP3 server response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3Response.StatusLine">
            <summary>
            Gets the status line (including <see cref="P:Limilabs.Client.POP3.Pop3Response.Status"/> and <see cref="P:Limilabs.Client.POP3.Pop3Response.Message"/>) e.g.: "+OK Done".
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3Response.Status">
            <summary>
            Gets the status of this response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3Response.Message">
            <summary>
            Gets the response message (without <see cref="P:Limilabs.Client.POP3.Pop3Response.Status"/>) e.g.: "Done".
            </summary>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3Response.Lines">
            <summary>
            Returns <see cref="P:Limilabs.Client.POP3.Pop3Response.BinaryLines"/> as a line collection.
            </summary>
            <returns><see cref="P:Limilabs.Client.POP3.Pop3Response.BinaryLines"/> as a line collection.</returns>
        </member>
        <member name="P:Limilabs.Client.POP3.Pop3Response.BinaryLines">
            <summary>
            Gets the multiline response message (without "-ERR", "+OK" status and <see cref="P:Limilabs.Client.POP3.Pop3Response.StatusLine"/>).
            </summary>
        </member>
        <member name="M:Limilabs.Client.POP3.Pop3Response.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Limilabs.Client.POP3.Pop3Response"/>.
            </summary>
            <returns>
            A string that represents the current <see cref="T:Limilabs.Client.POP3.Pop3Response"/>.
            </returns>
        </member>
        <member name="F:Limilabs.Client.ServerType.Coremail">
            <summary>
            163.com, 126.com, 188.com, yeah.net
            </summary>
        </member>
        <member name="T:Limilabs.Client.SMTP.Commands.CommandParameter">
            <summary>
            Represents SMTP command parameter and value (e.g. NOTIFY=SUCCESS,FAILURE).
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Commands.CommandParameter.Name">
            <summary>
            Name of the parameter (e.g. NOTIFY).
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Commands.CommandParameter.Value">
            <summary>
            Value  of the parameter (e.g. SUCCESS,FAILURE).
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.Commands.CommandParameter.#ctor(System.String)">
            <summary>
            Creates new instance of CommandParameter class.
            </summary>
            <param name="name">Name of the parameter.</param>
        </member>
        <member name="M:Limilabs.Client.SMTP.Commands.CommandParameter.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of CommandParameter class.
            </summary>
            <param name="name">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
        </member>
        <member name="T:Limilabs.Client.SMTP.ISendMessageResult">
            <summary>
            Represents result of the message sending process, returned by <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Mail.IMail)"/>, <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Client.SMTP.SmtpMail)"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.ISendMessageResult.Status">
            <summary>
            Gets the status of the sending process.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.ISendMessageResult.RejectedRecipients">
            <summary>
            Gets the list of the recipients (<see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/>) rejected by the SMTP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.ISendMessageResult.ApprovedRecipients">
            <summary>
            Gets the list of the recipients (<see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/>) approved by the SMTP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.ISendMessageResult.FromRejected">
            <summary>
            Gets a boolean value indicating if <see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/> (<see cref="P:Limilabs.Mail.IMail.Sender"/>, <see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/>) was rejected. 
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.ISendMessageResult.GeneralErrors">
            <summary>
            Gets all error responses received from the server while sending message.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.ISendMessageResult.AllResponses">
            <summary>
            Gets all responses received from the server while sending message.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.ISendMessageResult.RejectedRecipientsErrors">
            <summary>
            Gets error responses received from the server in response to 'add recipient' (RCPT TO command) requests.
            You can iterate over this dictionary using <see cref="P:Limilabs.Client.SMTP.ISendMessageResult.RejectedRecipients"/> list.
            </summary>
        </member>
        <member name="E:Limilabs.Client.SMTP.Pooled.SmtpClient.ServerCertificateValidate">
            <summary>
            Event which is called for custom server certificate validation.
            </summary>
        </member>
        <member name="T:Limilabs.Client.SMTP.SmtpConfiguration">
            <summary>
            Represents <see cref="T:Limilabs.Client.SMTP.Smtp"/> configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpConfiguration.CustomHost">
            <summary>
            Gets or sets the value, which, if set, is used when sending HELO or EHLO commands.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpConfiguration.EnablePipelining">
            <summary>
            Gets or sets the value indicating if <see cref="F:Limilabs.Client.SMTP.SmtpExtension.Pipelining"/> should be used when sending messages. 
             Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpConfiguration.EnableChunking">
            <summary>
            Gets or sets the value indicating if <see cref="F:Limilabs.Client.SMTP.SmtpExtension.Chunking"/> should be used when sending messages. 
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpConfiguration.AllowPartialSending">
            <summary>
            Gets or sets the value indicating if <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Mail.IMail)"/> and <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Client.SMTP.SmtpMail)"/> 
            should send a message even if some recipients were rejected.
            Setting this value to true when <see cref="F:Limilabs.Client.SMTP.SmtpExtension.Pipelining"/> is used improves performance.
            Default is false.
            </summary>
            <see cref="P:Limilabs.Client.SMTP.SmtpConfiguration.EnablePipelining"/>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpConfiguration.EnableValidation">
            <summary>
            Gets or sets the value indicating if <see cref="T:Limilabs.Client.SMTP.SmtpMail"/> instance validation is performed before sending.
            It ensures that the message has a sender, at least one recipient and a body.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpConfiguration.DeliveryNotification">
            <summary>
            Gets or sets the delivery notification options (Delivery Status Notifications, DSN) for email. 
            Available when <see cref="F:Limilabs.Client.SMTP.SmtpExtension.DSN"/> is reported by <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedExtensions"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpConfiguration.RetryAuthWithoutInitialResponse">
            <summary>
            Gets or sets value indicating if AUTH command should be retried without initial response on failure.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpConfiguration.AuthWithoutInitialResponse">
            <summary>
            Gets or sets the boolean value indicating if AUTH command should be used without initial response only.
            Default is false. 
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpConfiguration.AuthenticationEncoding">
            <summary>
            Gets or sets text encoding used when providing credentials.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpConfiguration.#ctor">
            <summary>
            Initializes new instance of the SmtpConfiguration class.
            </summary>
        </member>
        <member name="T:Limilabs.Client.SMTP.SmtpResponseException">
            <summary>
            Represents an SMTP server error response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpResponseException.Response">
            <summary>
            Gets SMTP server response that caused this exception to be thrown.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpResponseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of SmtpResponseException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="M:Limilabs.Client.SMTP.SendMessageResult.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Limilabs.Client.SMTP.ISendMessageResult"/>.
            </summary>
            <returns>
            A string that represents the current <see cref="T:Limilabs.Client.SMTP.ISendMessageResult"/>.
            </returns>
        </member>
        <member name="T:Limilabs.Client.SMTP.SendMessageStatus">
            <summary>
            Represents a status of <see cref="T:Limilabs.Client.SMTP.ISendMessageResult"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SendMessageStatus.Success">
            <summary>
            Success status: message was succesfully sent to all recipients.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SendMessageStatus.PartialSucess">
            <summary>
            Partial success status: message was succesfully sent to some, but not to all recipients.
            You can use <see cref="P:Limilabs.Client.SMTP.ISendMessageResult.RejectedRecipients"/> to get rejected recipients.
            </summary>
            <seealso cref="P:Limilabs.Client.SMTP.Smtp.AllowPartialSending"/>
        </member>
        <member name="F:Limilabs.Client.SMTP.SendMessageStatus.Failure">
            <summary>
            Failure status: message sending failed.
            </summary>
        </member>
        <member name="T:Limilabs.Client.SMTP.SmtpResponseStatus">
            <summary>
            Represents a status of a <see cref="T:Limilabs.Client.SMTP.SmtpResponse"/>.
            </summary>
            <seealso cref="P:Limilabs.Client.SMTP.SmtpResponse.Status"/>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpResponseStatus.Positive">
            <summary>
            Positive status (200-299 response codes).
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpResponseStatus.SendMoreData">
            <summary>
            Requires more data status (300-399 response codes).
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpResponseStatus.Error">
            <summary>
            Error status (400- response codes).
            </summary>
        </member>
        <member name="T:Limilabs.Client.SMTP.DeliveryNotificationOptions">
            <summary>
            Describes the delivery notification options (Delivery Status Notifications, DSN) for email. 
            You can use <see cref="P:Limilabs.Client.SMTP.SmtpConfiguration.DeliveryNotification"/> to set delivery options.
            </summary>
            <seealso cref="P:Limilabs.Client.SMTP.Smtp.Configuration"/>
        </member>
        <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.None">
            <summary>
            No notification information will be sent. The mail server will utilize its configured behavior to determine whether it should generate a delivery notification.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.OnSuccess">
            <summary>
            Notify if the delivery is successful.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.OnFailure">
            <summary>
            Notify if the delivery is unsuccessful.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.Delay">
            <summary>
            Notify if the delivery is delayed.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.DeliveryNotificationOptions.Never">
            <summary>
            A notification should not be generated under any circumstances.
            </summary>
        </member>
        <member name="T:Limilabs.Client.SMTP.SmtpAuthExtension">
            <summary>
            Represents SMTP AUTH extension.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpAuthExtension.Methods">
            <summary>
            Gets supported authentication methods.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpAuthExtension.Supports(Limilabs.Client.SMTP.SmtpAuthenticationMethod)">
            <summary>
            Checks if specified method is supported.
            </summary>
            <param name="method">Authentication method to check.</param>
            <returns>True if method is supported, false otherwise.</returns>
        </member>
        <member name="T:Limilabs.Client.SMTP.SmtpExtension">
            <summary>
            Represents extensions supported by the remote server.
            You can use <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedExtensions"/> method to obtain the list of all extensions supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.StartTLS">
            <summary>
            STARTTLS is supported. You can use <see cref="M:Limilabs.Client.SMTP.Smtp.StartTLS"/> to secure the connection.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.Size">
            <summary>
            SIZE extension.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.Auth">
            <summary>
            AUTH extension. You can use <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedAuthenticationMethods"/> to obtain all authentication methods supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.Pipelining">
            <summary>
            PIPELINING extension.
            It allows client to transmit groups of SMTP commands in batches without waiting for a response to each individual command.
            <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Mail.IMail)"/> method uses this feature to speed up sending messages.
            (<a href="https://www.limilabs.com/mail/rfc/2920">RFC 2920</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.EnhancedStatusCodes">
            <summary>
            ENHANCEDSTATUSCODES extension. It allows server to augment its responses with the enhanced mail system status codes. 
            Server that support this extension is going to provide <see cref="P:Limilabs.Client.SMTP.SmtpResponse.EnhancedStatusCode"/> in its responses.
            (<a href="https://www.limilabs.com/mail/rfc/2034">RFC 2034</a>, <a href="https://www.limilabs.com/mail/rfc/1893">RFC 1893</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.DSN">
            <summary>
            DSN extension. It allows client to specify the conditions under which a Delivery Status Notification should be generated (<see cref="P:Limilabs.Client.SMTP.Smtp.Configuration"/>, <see cref="P:Limilabs.Client.SMTP.SmtpConfiguration.DeliveryNotification"/>) 
            (<a href="https://www.limilabs.com/mail/rfc/3461">RFC 3461</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.Bit8Mime">
             <summary>
             8BITMIME extension.
             (<a href="https://www.limilabs.com/mail/rfc/6152">RFC 6152</a>)
             </summary>
            
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.BinaryMime">
            <summary>
            BINARYMIME extension.
            (<a href="https://www.limilabs.com/mail/rfc/3030">RFC 3030</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.Chunking">
            <summary>
            CHUNKING extension. Allows sending message in chunks, without SMTP's \r\n.->\r\n.. conversion, which improves memory usage.
            (<a href="https://www.limilabs.com/mail/rfc/3030">RFC 3030</a>)
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpExtension.SmtpUTF8">
            <summary>
            UTF8SMTP extension. Allows usage of UTF-8 email addresses (both local and domain part) without any encoding.
            <see cref="F:Limilabs.Client.SMTP.SmtpExtension.Bit8Mime"/> must be announced by the server when this extension is announced.
            BODY=8BITMIME or BODY=BINARYMIME must be used by the client if SMTPUTF8 extension is used.
            (<a href="https://www.limilabs.com/mail/rfc/6531">RFC 6531</a>)
            </summary>
        </member>
        <member name="T:Limilabs.Client.SMTP.SmtpSizeExtension">
            <summary>
            Represents SMTP SIZE extension.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpSizeExtension.Value">
            <summary>
            Gets the maximum size of the message. Messages above this size will not be accepted.
            </summary>
        </member>
        <member name="T:Limilabs.Client.SMTP.SmtpAuthenticationMethod">
            <summary>
            Represents authentication methods supported by the remote server.
            You can use <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedAuthenticationMethods"/> method to obtain the list of all methods supported by the remote server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.Login">
            <summary>
            AUTH LOGIN authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.Plain">
            <summary>
            AUTH PLAIN authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.CramMD5">
            <summary>
            AUTH CRAM-MD5 authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.DigestMD5">
            <summary>
            AUTH DIGEST-MD5 authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.XOAuth">
            <summary>
            AUTH XOAUTH authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.XOAuth2">
            <summary>
            AUTH XOAUTH2 authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.NTLM">
            <summary>
            AUTH NTLM authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.SmtpAuthenticationMethod.GssApi">
            <summary>
            AUTH GSSAPI authentication method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.HeloType.Helo">
            <summary>
            HELO command.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.HeloType.Ehlo">
            <summary>
            EHLO command (Extended HELO).
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.HeloType.EhloHelo">
            <summary>
            First try EHLO then fallback to HELO.
            </summary>
        </member>
        <member name="T:Limilabs.Client.SMTP.Smtp">
            <summary>
            SMTP client implementation. It allows sending emails using SMTP server.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Smtp.Configuration">
            <summary>
            Gets or sets SMTP protocol configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Smtp.CustomHost">
            <summary>
            Gets or sets the value, which, if set, is used when sending HELO or EHLO commands.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Smtp.EnablePipelining">
            <summary>
            Gets or sets the value indicating if <see cref="F:Limilabs.Client.SMTP.SmtpExtension.Pipelining"/> should be used when sending messages. 
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Smtp.EnableChunking">
            <summary>
            Gets or sets the value indicating if <see cref="F:Limilabs.Client.SMTP.SmtpExtension.Chunking"/> should be used when sending messages. 
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Smtp.AllowPartialSending">
            <summary>
            Gets or sets the value indicating if <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Mail.IMail)"/> and <see cref="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Client.SMTP.SmtpMail)"/> should send message 
            even if some recipients were rejected.
            Setting this value to true when <see cref="F:Limilabs.Client.SMTP.SmtpExtension.Pipelining"/> is used improves performance.
            Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Smtp.DisableValidation">
            <summary>
            Gets or sets the value indicating if <see cref="T:Limilabs.Client.SMTP.SmtpMail"/> instance validation is performed before sending.
            It ensures that the message has a sender, at least one recipient and a body.
            Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Smtp.DeliveryNotification">
            <summary>
            Gets or sets the delivery notification options (Delivery Status Notifications, DSN) for email. 
            Available when <see cref="F:Limilabs.Client.SMTP.SmtpExtension.DSN"/> is reported by <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedExtensions"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.Smtp.ServerGreeting">
            <summary>
            Gets the server greeting (initial response).
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.Smtp.DefaultPort">
            <summary>
            Default SMTP protocol port (587).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32)"/> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SMTP.Smtp.DefaultSSLPort">
            <summary>
            Default SMTP protocol over SSL port (465).
            If you need to use different port please use port parameter in <see cref="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)"/> or <see cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.#ctor">
            <summary>
            Initializes new instance of the Smtp class.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes new instance of the Smtp class.
            </summary>
            <param name="addressFamily">Address family.</param>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.Connect(System.String)">
            <summary>
            Connects to SMTP server on port 587. Use <see cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)"/> when SSL connection is needed.
            </summary>
            <param name="host">Host name or IP address.</param>
            <exception cref="T:Limilabs.Client.ServerException">DNS resolving error, connection error.</exception>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Initial error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)">
            <summary>
            Connects to SMTP server using SSL on port 465.
            </summary>
            <param name="host">Host name or IP address.</param>
            <seealso cref="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)"/>
            <exception cref="T:Limilabs.Client.ServerException">DNS resolving error, connection error.</exception>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Initial error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.BeginConnect(System.String)">
            <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.SMTP.Smtp.DefaultPort"/>.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.BeginConnect(System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server connection using <see cref="F:Limilabs.Client.SMTP.Smtp.DefaultPort"/>.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.BeginConnectSSL(System.String)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.SMTP.Smtp.DefaultSSLPort"/> and SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.BeginConnectSSL(System.String,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using <see cref="F:Limilabs.Client.SMTP.Smtp.DefaultSSLPort"/> and SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.GetServerGreeting">
            <summary>
            Receives server's greeting. Issues EHLO/HELO command.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.SupportedExtensions">
            <summary>
            Lists extensions supported by the remote server (e.g. <see cref="F:Limilabs.Client.SMTP.SmtpExtension.StartTLS"/>)
            </summary>
            <returns>Extensions supported by remote server.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.SupportedAuthenticationMethods">
            <summary>
            Lists authentication methods supported by the remote server.
            </summary>
            <returns>Authentication methods supported by remote server.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.SendCommand(System.String)">
            <summary>
            Sends command to the SMTP server (e.g. "EHLO").
            </summary>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command to be send e.g. "EHLO".</param>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
            <returns>Server's response.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.SendCommand(System.String,System.Boolean)">
            <summary>
            Sends command to the SMTP server (e.g. "EHLO").
            </summary>
            <remarks>
            Most commands have their own specialized methods in this class, you should probably use them instead.
            </remarks>
            <param name="command">Command to be send e.g. "EHLO".</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</param>
            <returns>Server's response.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.UseBestLogin(System.String,System.String)">
            <summary>
            Logs user in using best method available. 
            When no AUTH capability is found, this method switches to SSL (<see cref="M:Limilabs.Client.SMTP.Smtp.StartTLS"/>) and tries again.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)"/>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.StartTLS">
            <summary>
            Sends 'STARTTLS' command and initializes SSL connection (issues EHLO command afterwards).
            Not all servers support <see cref="F:Limilabs.Client.SMTP.SmtpExtension.StartTLS"/>. You can check which extensions remote server supports using <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedExtensions"/> method.
            </summary>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)">
            <summary>
            Logs user in using AUTH LOGIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.UseBestLogin(System.String,System.String)" />
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)">
            <summary>
            Logs user in using AUTH PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)"/> 
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String,System.String)">
            <summary>
            Logs user in using AUTH PLAIN command. This method sends the password in clear text (BASE64), unless SSL connection is used.
            </summary>
            <param name="user">User's login.</param>
            <param name="adminUser">Administrator's user.</param>
            <param name="adminPassword">Administrator's password.</param>
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginCRAM(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)"/>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginCRAM(System.String,System.String)">
            <summary>
            Logs user in using AUTH CRAM-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <remarks>
            This command is unnecessary if you are using SSL, use <see cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)"/> method instead.
            </remarks>
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)"/>
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginDIGEST(System.String,System.String)">
            <summary>
            Logs user in using AUTH DIGEST-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.ConnectSSL(System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.UseBestLogin(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)"/>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginDIGEST(System.String,System.String,System.String)">
            <summary>
            Logs user in using AUTH DIGEST-MD5 command. This method does NOT send the password in clear text.
            </summary>
            <param name="user">User's login.</param>
            <param name="password">User's password.</param>
            <param name="uri">Host and service name (host ["/" service-name]) part of digest-uri parameter, if null realm is used.</param>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI">
            <summary>
            Logs user in using <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/> mechanism. Target will be constructed as "smtp/" + TargetHost name.
            </summary>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            Target will be constructed as "smtp/" + TargetHost name.
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "smtp/" + fully qualified target name. IIS SMTP may use "SmtpSvc/" + fully qualified target name.</param>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            Target will be constructed as "smtp/" + TargetHost name.
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <param name="userWithDomain">User's login (e.g. "domain/user").</param>
            <param name="password">User's password.</param>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginSSPI(Limilabs.Client.Authentication.SSPIMechanism,System.String,System.String,System.String)">
            <summary>
            Logs user in using specified mechanism (<see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Negotiate"/>, <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.Kerberos"/> or <see cref="F:Limilabs.Client.Authentication.SSPIMechanism.NTLM"/>).
            </summary>
            <param name="mechanism">Mechanism to use.</param>
            <param name="userWithDomain">User's login (e.g. "domain/user").</param>
            <param name="password">User's password.</param>
            <param name="target">Indicates the service principal name (SPN) of the destination server. Default is "smtp/" + fully qualified target name. IIS SMTP may use "SmtpSvc/" + fully qualified target name.</param>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH(System.String)">
            <summary>
            Logs user in using AUTH XOAUTH command. This method does NOT send the password.
            You can use <see cref="T:Limilabs.Client.Authentication.OAuth"/> class to create the key.
            </summary>
            <param name="key">XOAuth key. You can use <see cref="M:Limilabs.Client.Authentication.ISignedOAuth.GetXOAuthKey" /> method to create this key.</param>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.LoginOAUTH2(System.String,System.String)">
            <summary>
            Logs user in using AUTH XOAUTH2 command. This method does NOT send the password.
            You can use <a href="http://www.dotnetopenauth.net/">DotNetOpenAuth</a> to create the key.
            You can check which authentication methods remote server supports using <see cref="M:Limilabs.Client.SMTP.Smtp.SupportedAuthenticationMethods"/> method.
            </summary>
            <param name="user">User's login (email address).</param>
            <param name="accessToken">OAuth 2.0 access token.</param>
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.Login(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String)"/> <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginPLAIN(System.String,System.String,System.String)"/> 
            <seealso cref="M:Limilabs.Client.SMTP.Smtp.LoginCRAM(System.String,System.String)"/>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.MailFrom(System.String,System.Boolean)">
            <summary>
            Sends "MAIL FROM:" command.
            </summary>
            <param name="from">From address.</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response</param>
            <returns>Server's response.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.RcptTo(System.String,System.Boolean)">
            <summary>
            Sends "RCPT TO:" command.
            </summary>
            <param name="to">To address.</param>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</param>
            <returns>Server's response.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.Data(System.Boolean)">
            <summary>
            Sends "DATA" command.
            </summary>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</param>
            <returns>Server's response.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Mail.IMail)">
            <summary>
            Sends a single message.
            </summary>
            <param name="email"><see cref="T:Limilabs.Mail.IMail"/> message to send.</param>
            <seealso cref="P:Limilabs.Client.SMTP.SmtpConfiguration.AllowPartialSending" />
            <seealso cref="P:Limilabs.Client.SMTP.SmtpConfiguration.EnablePipelining" />
            <returns>Result of the sending operation. You can examine <see cref="P:Limilabs.Client.SMTP.ISendMessageResult.Status"/> property to check if the operation succeed.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.SendMessage(Limilabs.Client.SMTP.SmtpMail)">
            <summary>
            Sends a single message.
            </summary>
            <param name="smtpMail">SmtpMail message to send.</param>
            <seealso cref="P:Limilabs.Client.SMTP.SmtpConfiguration.AllowPartialSending" />
            <seealso cref="P:Limilabs.Client.SMTP.SmtpConfiguration.EnablePipelining" />
            <returns>Result of the sending operation. You can examine <see cref="P:Limilabs.Client.SMTP.ISendMessageResult.Status"/> property to check if the operation succeed.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.Reset">
            <summary>
            Sends RSET command to the server. 
            It specifies that the current mail transaction will be aborted. 
            Any stored sender, recipients, and mail data MUST be discarded,  and all buffers and state tables cleared. 
            The receiver MUST send a "250 OK" reply to a RSET command with no arguments.
            </summary>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.Noop">
            <summary>
            Sends NOOP command to the server. It does nothing and always succeeds.
            Can be used to reset any inactivity auto-logout timer on the server.
            </summary>
            <exception cref="T:Limilabs.Client.SMTP.SmtpResponseException">Throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</exception>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.Close">
            <summary>
            Sends QUIT command. Disconnects and releases all resources acquired by this object.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.Smtp.Close(System.Boolean)">
            <summary>
            Sends QUIT command. Disconnects and releases all resources acquired by this object.
            </summary>
            <param name="throwException">If <c>true</c> throws <see cref="T:Limilabs.Client.SMTP.SmtpResponseException"/> on error response.</param>
        </member>
        <member name="T:Limilabs.Client.SMTP.SmtpMail">
            <summary>
            Represents sender, recipients and raw message data in eml format that can be sent via SMTP protocol.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpMail.From">
            <summary>
            Gets or sets from mail address. Value of this property is used for SMTP's MAIL FROM command.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpMail.To">
            <summary>
            Gets the collection of mail addresses this message will be sent to. Value of this property is used for SMTP's RCPT TO command.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData">
            <summary>
            Gets or sets the raw message data that can be sent using SMTP protocol.
            Value of this property ("\r\n." sequence escaping is performed automatically, when needed), is used for SMTP's DATA or BDAT command.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpMail.IsMDN">
            <summary>
            Gets or sets the additinal information if enclosed message is MDN.
            Setting this property changes how validation works, 
            as the envelope sender address (SMTP MAIL FROM) of the MDN MUST be null (<a href="https://www.limilabs.com/mail/rfc/3798">RFC 3798</a>).
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpMail.#ctor">
            <summary>
            Creates new empty SmtpMail object.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpMail.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Byte[])">
            <summary>
            Creates new SmtpMail object.
            </summary>
            <param name="from">From mail address.</param>
            <param name="eml">Message data in eml format to be send.</param>
            <param name="to">Collection of mail addresses this message will be sent to.</param>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpMail.ForceASCIIMode">
            <summary>
            Forces punycode be used instead of full UTF8 envelope addresses.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpMail.CreateFrom(Limilabs.Mail.IMail)">
            <summary>
            Creates new <see cref="T:Limilabs.Client.SMTP.SmtpMail"/> using specified email.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/>, <see cref="P:Limilabs.Client.SMTP.SmtpMail.To"/> and <see cref="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData"/> are initialized using specified <paramref name="email"/>.
            </summary>
            <param name="email">Email to initialize this object from.</param>
            <returns>New <see cref="T:Limilabs.Client.SMTP.SmtpMail"/> object.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpMail.CreateUsingVERP(Limilabs.Mail.IMail)">
            <summary>
            Creates new <see cref="T:Limilabs.Client.SMTP.SmtpMail"/> using specified email.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.To"/> and <see cref="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData"/> are initialized using specified <paramref name="email"/>.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/> property is initialized using VERP address containig <see cref="P:Limilabs.Mail.IMail.From"/> and <see cref="P:Limilabs.Mail.IMail.To"/> or <see cref="P:Limilabs.Mail.IMail.Sender"/>.
            </summary>
            <remarks>
            VERP address used to initialize <see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/> property is created using <see cref="T:Limilabs.Mail.Tools.VERPAddress"/> class.
            </remarks>
            <param name="email">Email to initialize this object from.</param>
            <returns>New <see cref="T:Limilabs.Client.SMTP.SmtpMail"/> object.</returns>       
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpMail.VERPify">
            <summary>
            Creates VERP version of the <see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/> address.
            </summary>
            <remarks>
            VERP address used to initialize <see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/> property is created using <see cref="T:Limilabs.Mail.Tools.VERPAddress"/> class.
            </remarks>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpMail.CreateFromEml(System.Byte[])">
            <summary>
            Creates new <see cref="T:Limilabs.Client.SMTP.SmtpMail"/> using specified eml raw data string.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/>, <see cref="P:Limilabs.Client.SMTP.SmtpMail.To"/> and <see cref="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData"/> are initialized using parsed <paramref name="eml"/> content.
            </summary>
            <param name="eml">Raw eml data string.</param>
            <returns>New <see cref="T:Limilabs.Client.SMTP.SmtpMail"/> object.</returns>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpMail.CreateFromEmlFile(System.String)">
            <summary>
            Loads raw eml data from file and creates new <see cref="T:Limilabs.Mail.IMail"/> object.
            <see cref="P:Limilabs.Client.SMTP.SmtpMail.From"/>, <see cref="P:Limilabs.Client.SMTP.SmtpMail.To"/> and <see cref="P:Limilabs.Client.SMTP.SmtpMail.RawEmlData"/> are initialized using parsed content of a file specified by <paramref name="path"/>.
            </summary>
            <param name="path">The file to read raw eml data from.</param>
            <returns>New <see cref="T:Limilabs.Client.SMTP.SmtpMail"/> object.</returns>
        </member>
        <member name="T:Limilabs.Client.SMTP.SmtpResponse">
            <summary>
            Represents SMTP server response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpResponse.EnhancedStatusCode">
            <summary>
            Gets enhanced status code. e.g. 2.1.0.
            2.X.X is success;
            4.X.X is persistent transient failure;
            5.X.X is permanent failure.
            </summary>
            <seealso cref="F:Limilabs.Client.SMTP.SmtpExtension.EnhancedStatusCodes"/>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpResponse.Code">
            <summary>
            Gets the status code.
            2yz is positive completion reply; 
            3yz is positive intermediate reply; 
            Other is negative.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpResponse.Lines">
            <summary>
            Gets the lines returned from server as strings. 
            Every line is striped off of the <see cref="P:Limilabs.Client.SMTP.SmtpResponse.Code"/> and '-' char at the beginning and new line characters at the end.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpResponse.Status">
            <summary>
             Gets the status of this response.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SMTP.SmtpResponse.Message">
            <summary>
            First line of the response or null if <see cref="P:Limilabs.Client.SMTP.SmtpResponse.Lines"/> collection is empty.
            </summary>
        </member>
        <member name="M:Limilabs.Client.SMTP.SmtpResponse.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Limilabs.Client.SMTP.SmtpResponse"/>.
            </summary>
            <returns>
            A string that represents the current <see cref="T:Limilabs.Client.SMTP.SmtpResponse"/>.
            </returns>
        </member>
        <member name="T:Limilabs.Client.ServerCertificateValidateEventHandler">
            <summary>
            Handler for ServerCertificateValidateEventHandler.
            </summary>
            <param name="sender">An object that contains state information for this validation.</param>
            <param name="e">Event arguments. Use <see cref="P:Limilabs.Client.ServerCertificateValidateEventArgs.IsValid"/> to validate the certificate.</param>
        </member>
        <member name="T:Limilabs.Client.SSLConfiguration">
            <summary>
            Represents SSL configuration (client certificates, enabled SSL protocols)
            </summary>
        </member>
        <member name="P:Limilabs.Client.SSLConfiguration.TargetHost">
            <summary>
            Gets or sets the target host name used for authenticating as client.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SSLConfiguration.CheckCertificateRevocation">
            <summary>
             Specifies whether the certificate revocation list is checked during authentication. Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SSLConfiguration.ClientCertificates">
            <summary>
             The <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> that contains client certificates.
            </summary>
        </member>
        <member name="P:Limilabs.Client.SSLConfiguration.EnabledSslProtocols">
            <summary>
            Represents the protocol used for authentication. 
            .NET 2.0 default is <see cref="F:System.Security.Authentication.SslProtocols.Default"/>.
            .NET Standard 2.0 default is  <see cref="F:System.Security.Authentication.SslProtocols.Tls"/> | <see cref="F:System.Security.Authentication.SslProtocols.Tls11"/> | <see cref="F:System.Security.Authentication.SslProtocols.Tls12"/>.
            .NET 4.5+ default is <see cref="F:System.Security.Authentication.SslProtocols.Default"/> | <see cref="F:System.Security.Authentication.SslProtocols.Tls11"/> | <see cref="F:System.Security.Authentication.SslProtocols.Tls12"/>.
            </summary>
        </member>
        <member name="E:Limilabs.Client.SSLConfiguration.ServerCertificateValidate">
            <summary>
            Event which is called for custom server certificate validation.
            </summary>
        </member>
        <member name="F:Limilabs.Client.SSLConfiguration.SelectLocalCertificate">
            <summary>
            Callback which is called for custom client certificate selection.
            </summary>
        </member>
        <member name="T:Limilabs.Client.DNS.DnsHelper">
            <summary>
            Helper class for accessing DNS.
            </summary>
        </member>
        <member name="M:Limilabs.Client.DNS.DnsHelper.#ctor">
            <summary>
            Creates new DnsHelper object instance using default DNS address address and default port.
            </summary>
        </member>
        <member name="M:Limilabs.Client.DNS.DnsHelper.#ctor(System.String)">
            <summary>
            Creates new DnsHelper object instance using specified DNS server address and default port.
            </summary>
            <param name="dnsServerAddress">DNS server address.</param>
        </member>
        <member name="M:Limilabs.Client.DNS.DnsHelper.#ctor(System.String,System.Int32)">
            <summary>
            Creates new DnsHelper object instance using specified DNS server address and port.
            </summary>
            <param name="dnsServerAddress">DNS server address.</param>
            <param name="dnsServerPort">DNS server port.</param>
        </member>
        <member name="M:Limilabs.Client.DNS.DnsHelper.GetSmtpServers(System.String)">
            <summary>
            Gets SMTP servers for specified domain or email address.
            This method searches DNS MX records. Servers are sorted by priority, first being the highest.
            </summary>
            <param name="domainOrEmail">Domain or email address to search SMTP servers for.</param>
            <returns>List of the SMTP servers.</returns>
        </member>
        <member name="M:Limilabs.Client.DNS.DnsHelper.GetSmtpServer(System.String)">
            <summary>
            Gets highest priority SMTP server for specified domain or email address.
            This method searches DNS MX records.
            </summary>
            <param name="domainOrEmail">Domain or email address to search SMTP servers for.</param>
            <returns>Highest priority SMTP server.</returns>
        </member>
        <member name="T:Limilabs.Client.DNS.Constants.FlagMasks">
            <summary>
            FlagMasks are used as a bit mask to isolate bits 16 through 31 
            of the DNS header to convert them to their appropriate enum types.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsClass.Inet">
            <summary>
            Internet (inet), RFC 1035
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsClass.Chaos">
            <summary>
            MIT Chaos-net, RFC 1035
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsClass.Hesiod">
            <summary>
            MIT Hesiod, RFC 1035
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsClass.None">
            <summary>
            RFC 2136 - None
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsClass.Any">
            <summary>
            Any QCLASS only, Wildcard match, RFC 1035
            </summary>
        </member>
        <member name="T:Limilabs.Client.DNS.Constants.NsFlags">
            <summary>
            |AA|TC|RD|RA| Z|AD|CD|  - 8 bits (1 byte) flag fields 
            
            reference: http://www.networksorcery.com/enp/protocol/dns.htm
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsFlags.AA">
            <summary>
            AA - Authorative Answer 	[RFC1035]   ( 0 = Not authoritative, 1 = Is authoritative )
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsFlags.TC">
            <summary>
            TC - Truncated Response 	[RFC1035]   ( 0 = Not truncated, 1 = Message truncated )
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsFlags.RD">
            <summary>
            RD - Recursion Desired	[RFC1035]   ( 0 = Recursion not desired, 1 = Recursion desired )
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsFlags.RA">
            <summary>
            RA - Recursion Allowed	[RFC1035]   ( 0 = Recursive query support not available, 1 = Recursive query support available )
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsFlags.AD">
            <summary>
            AD - Authentic Data   	[RFC4035]   ( Authenticated data. 1 bit ) [NOT IMPLEMENTED]
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsFlags.CD">
            <summary>
            CD - Checking Disabled 	[RFC4035]   ( Checking Disabled. 1 bit ) [NOT IMPLEMENTED]
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.INVALID">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.A">
            <summary>
            Host address
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.NS">
            <summary>
            Authoritative server 
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MD">
            <summary>
            Mail destination
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MF">
            <summary>
            Mail forwarder
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.CNAME">
            <summary>
             Canonical name
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.SOA">
            <summary>
            Start of authority zone
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MB">
            <summary>
            Mailbox domain name
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MG">
            <summary>
            Mail group member
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MR">
            <summary>
            Mail rename name
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.NULL">
            <summary>
            Null resource record
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.WKS">
            <summary>
            Well known service
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.PTR">
            <summary>
            Domain name pointer
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.HINFO">
            <summary>
            Host information
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MINFO">
            <summary>
            Mailbox information
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MX">
            <summary>
            Mail routing information
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.TXT">
            <summary>
            Text strings, RFC 1464 
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.RP">
            <summary>
            Responsible person, RFC 1183
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.AFSDB">
            <summary>
            AFS cell database, RFC 1183
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.X25">
            <summary>
            X_25 calling address, RFC 1183
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.ISDN">
            <summary>
            ISDN calling address, RFC 1183
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.RT">
            <summary>
            Router, RFC 1183, Implemented
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.NSAP">
            <summary>
            NSAP address, RFC 1706
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.NSAP_PTR">
            <summary>
            Reverse NSAP lookup - deprecated by PTR	?
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.SIG">
            <summary>
            Security signature, RFC 2535
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.KEY">
            <summary>
            Security key, RFC 2535
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.PX">
            <summary>
            X.400 mail mapping, RFC ?
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.GPOS">
            <summary>
            Geographical position - withdrawn, RFC 1712
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.AAAA">
            <summary>
            Ip6 Address, RFC 1886
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.LOC">
            <summary>
            Location Information, RFC 1876
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.NXT">
            <summary>
            Next domain (security), RFC 2065
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.EID">
            <summary>
            Endpoint identifier,RFC ?
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.NIMLOC">
            <summary>
            Nimrod Locator, RFC ?
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.SRV">
            <summary>
            Server Record, RFC 2052
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.ATMA">
            <summary>
            ATM Address
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MAPTR">
            <summary>
            Naming Authority PoinTeR, RFC 2915
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.KX">
            <summary>
            Key Exchange, RFC 2230
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.CERT">
            <summary>
            Certification record, RFC 2538
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.A6">
            <summary>
            IPv6 address (deprecates AAAA), RFC 3226
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.DNAME">
            <summary>
            Non-terminal DNAME (for IPv6), RFC 2874
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.SINK">
            <summary>
            Kitchen sink (experimental) (http://tools.ietf.org/html/draft-eastlake-kitchen-sink-02)
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.OPT">
            <summary>
            EDNS0 option (meta-RR), RFC 2671
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.TKEY">
            <summary>
            Transaction key, RFC 2930
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.TSIG">
            <summary>
            Transaction signature, RFC 2845
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.IXFR">
            <summary>
            Incremental zone transfer, RFC 1995
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.AXFR">
            <summary>
            Transfer zone of authority, RFC 1035
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MAILB">
            <summary>
            Transfer mailbox records, RFC 1035
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.MAILA">
            <summary>
            Transfer mail agent records, RFC 1035
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.ANY">
            <summary>
            All of the above, RFC 1035
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.DNSSECTrustAuthorities">
            <summary>
            DNSSEC Trust Authorities
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.NsRecordType.DNSSECLookasideValidation">
            <summary>
            DNSSEC Lookaside Validation, RFC4431
            </summary>
        </member>
        <member name="T:Limilabs.Client.DNS.Constants.OpCode">
            <summary>
            |  OpCode  | - 4 bits of DNS header, Bit 17 - 20
                
            RFC 1035:
            
            A four bit field that specifies kind of query in this
            message.  This value is set by the originator of a query
            and copied into the response.  
            
            The values are:
            
                0               a standard query (QUERY)
            
                1               an inverse query (IQUERY)
            
                2               a server status request (STATUS)
            
                3-15            reserved for future 
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.OpCode.QUERY">
            <summary>
            Standard query
            [RFC1035] (QUERY)
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.OpCode.IQUERY">
            <summary>
            Inverse query
            [RFC1035] (IQUERY)
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.OpCode.STATUS">
            <summary>
            Server status request
            [RFC1035] (STATUS)
            </summary>
        </member>
        <member name="T:Limilabs.Client.DNS.Constants.QueryResponse">
            <summary>
            |QR| - Starts at bit 16 of DNS Header, size: 1 bit
            
            RFC 1035:
            A one bit field that specifies whether this message is a
            query (0), or a response (1).
            
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.QueryResponse.Query">
            <summary>
            Query (0)
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.QueryResponse.Response">
            <summary>
            Response (1)
            </summary>
        </member>
        <member name="T:Limilabs.Client.DNS.Constants.RCode">
            <summary>
            |   RCODE   | - 4 bits error codes
            
            Response code - this 4 bit field is set as part of
                responses.  The values have the following interpretation:
            
            Fields 6-15            Reserved for future use.
            
            reference: http://www.networksorcery.com/enp/protocol/dns.htm
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.NoError">
            <summary>
            No error condition
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.FormatError">
            <summary>
            Format error - The name server was unable to 
            interpret the query.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.ServerFailure">
            <summary>
            Server failure - The name server was unable to process 
            this query due to a problem with the name server.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.NameError">
            <summary>
            Name Error - Meaningful only for responses from an 
            authoritative name server, this code signifies that 
            the domain name referenced in the query does not 
            exist.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.NotImplemented">
            <summary>
            Not Implemented - The name server does not support 
            the requested kind of query.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.Refused">
            <summary>
            Refused - The name server refuses to perform the 
            specified operation for policy reasons.  For example,
            a name server may not wish to provide the information 
            to the particular requester, or a name server may not 
            wish to perform a particular operation (e.g., zone  
            transfer) for particular data.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.YXDomain">
            <summary>
            RFC 2136
            Name Exists when it should not.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.YXRRSet">
            <summary>
            RFC 2136
            RR Set Exists when it should not.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.NXRRSet">
            <summary>
            RFC 2136
            RR Set that should exist does not.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.NotAuth">
            <summary>
            RFC 2136
            Server Not Authoritative for zone.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.NotZone">
            <summary>
            RFC 2136
            Name not contained in zone.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.BADVERS_BADSIG">
            <summary>
            RFC 2671
            RFC 2845
            
            BADVERS Bad OPT Version.
            BADSIG  TSIG Signature Failure.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.BADKEY">
            <summary>
            RFC 2845
            Key not recognized.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.BADTIME">
            <summary>
            RFC 2845
            Signature out of time window.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.BADMODE">
            <summary>
            RFC 2930
            Bad TKEY Mode.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.BADNAME">
            <summary>
            RFC 2930
            Duplicate key name.
            </summary>
        </member>
        <member name="F:Limilabs.Client.DNS.Constants.RCode.BADALG">
            <summary>
            RFC 2930
            Algorithm not supported.
            </summary>
        </member>
        <member name="M:Limilabs.Client.DNS.Client.DnsServerAddressResolver.IsPlatformLinuxUnix">
            <summary>
            Tests to see if this is running on a Linux or Unix Platform 
            </summary>
            <returns><see langword="true"/> if unix or linux is detected</returns>
        </member>
        <member name="P:Limilabs.Client.DNS.Factory.DnsRecordHeader.Name">
            <summary>
            NAME - an owner name, i.e., the name of the node to which this
                   resource record pertains.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Factory.DnsRecordHeader.NsType">
            <summary>
            TYPE    two octets containing one of the RR TYPE codes.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Factory.DnsRecordHeader.NsClass">
            <summary>
            CLASS - two octets containing one of the RR CLASS codes.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Factory.DnsRecordHeader.TimeToLive">
            <summary>
            TTL - a 32 bit signed integer that specifies the time interval
                  that the resource record may be cached before the source
                  of the information should again be consulted.  Zero
                  values are interpreted to mean that the RR can only be
                  used for the transaction in progress, and should not be
                  cached.  For example, SOA records are always distributed
                  with a zero TTL to prohibit caching.  Zero values can
                  also be used for extremely volatile data.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Factory.DnsRecordHeader.DataLength">
            <summary>
            RDLENGTH - an unsigned 16 bit integer that specifies the length in
                       octets of the RDATA field.
            </summary>
        </member>
        <member name="M:Limilabs.Client.DNS.Factory.DnsTextReader.ReadMultipleText(System.IO.Stream,System.Int32)">
            <summary>
            1 byte:         length1    
            length1 bytes:  text1    
            1 byte:         length2  
            length2 bytes:  text2
            --------------------------
            recordSize
            </summary>
        </member>
        <member name="T:Limilabs.Client.DNS.Infrastructure.DnsQueryBase">
            <summary>
            DnsQueryBase maintains the common state of DNS Queries (both responses and requests)
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.TransactionID">
            <summary>
            ID - A 16 bit identifier. This identifier is copied
            the corresponding reply and can be used by the requester
            to match up replies to outstanding queries.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.QueryResponse">
            <summary>
            A one bit field that specifies whether this message is a
            query (0), or a response (1).
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.OpCode">
            <summary>
            OPCODE - A four bit field that specifies kind of query in this
            message.  This value is set by the originator of a query
            and copied into the response.  
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.NsFlags">
            <summary>
            NsFlags - A combination of flag fields in the DNS header (|AA|TC|RD|RA|)
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.RCode">
            <summary>
            Response code - this 4 bit field is set as part of
            responses only. 
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.Questions">
            <summary>
            QDCOUNT - an unsigned 16 bit integer specifying the number of
            entries in the question section.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.AnswerRRs">
            <summary>
            ANCOUNT - an unsigned 16 bit integer specifying the number of
            resource records in the answer section.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.AuthorityRRs">
            <summary>
            NSCOUNT - an unsigned 16 bit integer specifying the number of name
            server resource records in the authority records
            section.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.AdditionalRRs">
            <summary>
            ARCOUNT - an unsigned 16 bit integer specifying the number of
            resource records in the additional records section.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.Name">
            <summary>
            QNAME - a domain name represented as a sequence of labels, where
            each label consists of a length octet followed by that number of octets.  
            The domain name terminates with the zero length octet for the null label of the root.  
            Note that this field may be an odd number of octets; no padding is used
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.NsType">
            <summary>
            QTYPE - a two octet code which specifies the type of the query.
            The values for this field include all codes valid for a
            TYPE field, together with some more general codes which
            can match more than one type of RR.
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Infrastructure.DnsQueryBase.NsClass">
            <summary>
            QCLASS - a two octet code that specifies the class of the query.
            For example, the QCLASS field is IN for the Internet.
            </summary>
        </member>
        <member name="T:Limilabs.Client.DNS.Records.ARecord">
            <summary>
            RFC 1035:
            
            3.4.1. A RDATA format
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             |                    ADDRESS                    |
             +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
             
             where:
             
             ADDRESS         A 32 bit Internet address.
             
             Hosts that have multiple Internet addresses will have multiple A
             records.
             
             A records cause no additional section processing.  The RDATA section of
             an A line in a master file is an Internet address expressed as four
             decimal numbers separated by dots without any embedded spaces (e.g.,
             "10.2.0.52" or "192.0.5.6").
            
            </summary>
        </member>
        <member name="P:Limilabs.Client.DNS.Records.ARecord.HostAddress">
            <summary>
            The answer host address for the DNS A Record.
            </summary>
        </member>
        <member name="T:Limilabs.Client.ServerException">
            <summary>
            Represents an error that occurred on the server.
            </summary>
        </member>
        <member name="M:Limilabs.Client.ServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of ServerException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="T:Limilabs.Client.ClientBase">
            <summary>
            Implements TCP/IP text client.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.SSLConfiguration">
            <summary>
            Gets SSL configuration (client certificates, enabled SSL protocols).
            </summary>
        </member>
        <member name="E:Limilabs.Client.ClientBase.ServerCertificateValidate">
            <summary>
            Event which is called for custom server certificate validation.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.ReceiveTimeout">
            <summary>
            Gets or sets the amount of time the underlying <see cref="P:Limilabs.Client.ClientBase.Socket"/> will wait to receive data once a read operation is initiated.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.SendTimeout">
            <summary>
            Gets or sets the amount of time the underlying <see cref="P:Limilabs.Client.ClientBase.Socket"/> will wait for a send operation to complete successfully.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.Connected">
            <summary>
            Gets a value indicating whether the underlying <see cref="P:Limilabs.Client.ClientBase.Socket"/> is connected to a remote host.
            This property makes a nonblocking, zero-byte Send call to determine the current state of the connection.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.Socket">
            <summary>
            Gets the underlying <see cref="P:Limilabs.Client.ClientBase.Socket"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.IsEncrypted">
            <summary>
            Gets a Boolean value that indicates whether communication to the remote server is encrypted.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.IsSigned">
            <summary>
            Gets a Boolean value that indicates whether communication to the remote server is signed.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.IsMutuallyAuthenticated">
            <summary>
            Gets a Boolean value that indicates whether communication to the remote server is mutually authenticated.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.IsCompressed">
            <summary>
            Gets a Boolean value that indicates whether communication to the remote server is compressed.
            You can turn compression on by using <see cref="M:Limilabs.Client.IMAP.Imap.Compress"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.ReadStream">
            <summary>
            Gets underlying read stream for current connection.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ClientBase.WriteStream">
            <summary>
            Gets underlying write stream for current connection.
            </summary>
        </member>
        <member name="M:Limilabs.Client.ClientBase.#ctor">
            <summary>
            Initializes a new instance of the ClientBase object.
            Sets <see cref="P:Limilabs.Client.ClientBase.ReceiveTimeout"/> and <see cref="P:Limilabs.Client.ClientBase.SendTimeout"/> to 30 sec.
            </summary>
        </member>
        <member name="M:Limilabs.Client.ClientBase.#ctor(System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the ClientBase object.
            Sets <see cref="P:Limilabs.Client.ClientBase.ReceiveTimeout"/> and <see cref="P:Limilabs.Client.ClientBase.SendTimeout"/> to 30 sec.
            </summary>
            <param name="addressFamily">Address family.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.TcpKeepAlive(System.TimeSpan,System.TimeSpan)">
            <summary>
            Turns TCP protocol keep alive (SO_KEEPALIVE) option on.
            </summary>
            <param name="keepAliveTime">Duration between two keepalive transmissions in idle condition (TCP protocol default is 2h).</param>
            <param name="keepAliveInterval">Duration between two successive keepalive retransmissions, if acknowledgement to the previous keepalive transmission is not received (TCP protocol default is 1s).</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.AttachSSL(System.Net.Sockets.Socket,System.String)">
            <summary>
            Attaches client to specified connected socket.
            </summary>
            <param name="socket">Socket to attach to.</param>
            <param name="targetHost">Target host used for SSL negotiation</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.Attach(System.Net.Sockets.Socket)">
            <summary>
            Attaches client to specified connected socket.
            </summary>
            <param name="socket">Socket to attach to.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.Attach(System.Net.Sockets.Socket,System.Boolean)">
            <summary>
            Attaches client to specified connected socket.
            </summary>
            <param name="socket">Socket to attach to.</param>
            <param name="useSSL">If true starts SSL negotiation (Please use <see cref="P:Limilabs.Client.ClientBase.SSLConfiguration"/> to specify <see cref="P:Limilabs.Client.SSLConfiguration.TargetHost"/>).
            </param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.CreateSSLStream(System.IO.Stream)">
            <summary>
            Creates SSL stream and authenticates client.
            </summary>
        </member>
        <member name="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32,System.Boolean)">
            <summary>
            Establishes connection to a remote server.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.Connect(System.String,System.Int32)">
            <summary>
            Establishes connection to a remote server. You can use <see cref="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)"/> when SSL connection is needed.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.ConnectSSL(System.String,System.Int32)">
            <summary>
            Establishes connection to a remote server using SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.Connect(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Establishes connection to a remote server.
            </summary>
            <param name="ipAddress">IP address.</param>
            <param name="port">The port number of the remote server.</param>
            <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.Connect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Establishes connection to a remote server.
            </summary>
            <param name="ipEndPoint">Network endpoint (IP address and port) of the connection.</param>
            <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.BeginConnect(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Begins an asynchronous request for a remote server connection. 
            </summary>
            <param name="ipEndPoint">Network endpoint (IP address and port) of the remote server.</param>
            <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.ClientBase.BeginConnectSSL(System.String,System.Int32)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.ClientBase.BeginConnectSSL(System.String,System.Int32,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server secure connection using SSL.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.ClientBase.BeginConnect(System.String,System.Int32)">
            <summary>
            Begins an asynchronous request for a remote server connection. You can use <see cref="M:Limilabs.Client.ClientBase.BeginConnectSSL(System.String,System.Int32)"/> when SSL connection is needed.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.ClientBase.BeginConnect(System.String,System.Int32,System.Boolean)">
            <summary>
            Begins an asynchronous request for a remote server connection. 
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.ClientBase.BeginConnect(System.String,System.Int32,System.Boolean,System.AsyncCallback)">
            <summary>
            Begins an asynchronous request for a remote server connection.
            </summary>
            <param name="host">The name or IP address of the remote server.</param>
            <param name="port">The port number of the remote server.</param>
            <param name="useSSL">Creates SSL connection when set to <c>true</c>.</param>
            <param name="asyncCallback">The AsyncCallback delegate.</param>        
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Limilabs.Client.ClientBase.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="result">Object that stores state information and any user defined data for this asynchronous operation.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.SendLine(System.String)">
            <summary>
            Sends text command to server. Adds "\r\n" to the command.
            </summary>
        </member>
        <member name="M:Limilabs.Client.ClientBase.SendLine(System.Byte[])">
            <summary>
            Sends text command to server. Adds "\r\n" to the command.
            </summary>
        </member>
        <member name="M:Limilabs.Client.ClientBase.Send(System.Byte[])">
            <summary>
            Sends specified byte array to the server.
            </summary>
            <param name="bytes">Byte array to send.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources acquired by this object. Closes connection, without issuing any quit commands.
            </summary>
            <param name="disposing">Indicates if invoked by Dipsose method.</param>
        </member>
        <member name="M:Limilabs.Client.ClientBase.Dispose">
            <summary>
            Releases all resources acquired by this object. Closes connection, without issuing any quit commands.
            </summary>
        </member>
        <member name="T:Limilabs.Client.ServerCertificateValidateEventArgs">
            <summary>
            Arguments for <see cref="T:Limilabs.Client.ServerCertificateValidateEventHandler"/> and <see cref="E:Limilabs.Client.ClientBase.ServerCertificateValidate"/> event.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ServerCertificateValidateEventArgs.Certificate">
            <summary>
            The certificate used to authenticate the remote party.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ServerCertificateValidateEventArgs.Chain">
            <summary>
            The chain of certificate authorities associated with the remote certificate.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ServerCertificateValidateEventArgs.SslPolicyErrors">
            <summary>
            One or more errors associated with the remote certificate.
            </summary>
        </member>
        <member name="P:Limilabs.Client.ServerCertificateValidateEventArgs.IsValid">
            <summary>
            Set this field to indicate validness of server's certificate.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.CFItem.Size">
            <summary>
            Size in bytes. 
            </summary>
        </member>
        <member name="T:Limilabs.CompoundFileFormat.CFStorage">
            <summary>
            Represents storage entity, container for streams or sub-storages in a compound file.
            </summary>
        </member>
        <member name="T:Limilabs.CompoundFileFormat.CFStream">
            <summary>
            Represents a virtual file which occupies a number of sectors.
            </summary>
        </member>
        <member name="M:Limilabs.CompoundFileFormat.CFStream.AppendData(System.Byte[])">
            This method allows user to create stream with more than 2GB of data.
            Large streams (>2GB) are only supported by version 4.
        </member>
        <member name="F:Limilabs.CompoundFileFormat.CFVersion.Version3">
            <summary>
            Compound file version 3 (default and most common). Sector size 512 bytes, 2GB max file size.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.CFVersion.Version4">
            <summary>
            Compound file version 4. Sector size is 4096 bytes. Using this version could bring some compatibility problem with existing applications.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.CompoundFile.SectorSize">
            <summary>
            Returns the size of standard sectors switching on version (3 or 4)
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.CompoundFile._difatSectorFATEntriesCount">
            <summary>
            Number of FAT entries in a DIFAT Sector.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.CompoundFile._fatSectorEntriesCount">
            <summary>
            Number of sector ID entries in a FAT Sector.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.CompoundFile.SectorRecycle">
            <remarks>
            Sector recycling reduces data writing performances but avoids space wasting in scenarios with frequently data manipulation of the same streams.
            Default is false.
            </remarks>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.CompoundFile.EraseFreeSectors">
            <summary>
            If true, overwrites unallocated sectors with zeros.
            Default is false.
            </summary>
        </member>
        <member name="M:Limilabs.CompoundFileFormat.CompoundFile.Save">
            <summary>
            Save data changes since the previously commit operation to the underlying supporting stream or file on the disk.
            </summary>
        </member>
        <member name="M:Limilabs.CompoundFileFormat.CompoundFile.CommitDirectory">
            <summary>
             Commit directory entries change on the Current Source stream
            </summary>
        </member>
        <member name="M:Limilabs.CompoundFileFormat.CompoundFile.Save(System.String)">
            <summary>
            Saves the in-memory image of Compound File to a file.
            </summary>
        </member>
        <member name="M:Limilabs.CompoundFileFormat.CompoundFile.Save(System.IO.Stream)">
            <summary>
            Saves the in-memory image of Compound File to a stream.
            </summary>        
        </member>
        <member name="M:Limilabs.CompoundFileFormat.CompoundFile.Shrink(System.IO.Stream)">
            <summary>
            Removes unallocated sectors. Only version 3 is supported.
            </summary>
        </member>
        <member name="M:Limilabs.CompoundFileFormat.CompoundFile.Shrink(System.String)">
            <summary>
            Removes unallocated sectors. Only version 3 is supported.
            </summary>
        </member>
        <member name="M:Limilabs.CompoundFileFormat.CompoundFile.DoCompression(Limilabs.CompoundFileFormat.CFStorage,Limilabs.CompoundFileFormat.CFStorage)">
            <summary>
            Recursively clones valid structures, avoiding to copy free sectors.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.Signature">
            <summary>
            0 8 Identification signature for the compound file structure.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.CLSID">
            <summary>
            8 16 Reserved and unused class ID that MUST be set to all zeroes (CLSID_NULL).
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.MinorVersion">
            <summary>
            24 2 Revision number of the file format.
            Version number for non-breaking changes. This field SHOULD be set to 0x003E if the major version field is either 0x0003 or 0x0004.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.MajorVersion">
            <summary>
            26 2 Version number of the file format.
            This field MUST be set to either 0x0003 (version 3) or 0x0004 (version 4).
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.ByteOrder">
            <summary>
            28 2 Byte Order.
            This field MUST be set to 0xFFFE. This field is a byte order mark for all integer fields, specifying little-endian byte order.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.SectorShift">
            <summary>
            30 2 Size of a sector. This field MUST be set to 0x0009, or 0x000c, depending on the Major Version field. 
            This field specifies the sector size of the compound file as a power of 2.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.MiniSectorShift">
            <summary>
            32 2 Size of a mini sector. This field MUST be set to 0x0006. 
            This field specifies the sector size of the Mini Stream as a power of 2. The sector size of the Mini Stream MUST be 64 bytes. 
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.Reserved">
            <summary>
            34 10 MUST be set to all zeroes.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.DirectorySectorsCount">
            <summary>
            44 4 Count of the number of directory sectors in the compound file.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.FATSectorsCount">
            <summary>
            44 4 Count of the number of FAT sectors in the compound file.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.FirstDirectorySectorID">
            <summary>
            48 4 starting sector number for the directory stream. (SecID)
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.TransactionSignatureNumber">
            <summary>
            52 4 MAY contain a sequence number that is incremented every time the compound file is saved by an implementation that supports file transactions. 
            This is field that MUST be set to all zeroes if file transactions are not implemented.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.MiniStreamCutoffSize">
            <summary>
            56 4 MUST be set to 0x00001000 (4096). 
            This field specifies the maximum size of a user-defined data stream allocated from the mini FAT and mini stream, 
            and that cutoff is 4096 bytes. Any user-defined data stream larger than or equal to this cutoff size must be allocated as normal sectors from the FAT.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.FirstMiniFATSectorID">
            <summary>
            60 4 Starting sector number for the mini FAT. (SecID)
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.MiniFATSectorCount">
            <summary>
            64 4 Count of the number of mini FAT sectors in the compound file.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.FirstDIFATSectorID">
            <summary>
            68 4 Starting sector number for the DIFAT (SecID) or <see cref="F:Limilabs.CompoundFileFormat.SpecialSectors.ENDOFCHAIN"/> if no additional sectors used.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.DIFATSectorsCount">
            <summary>
            72 4 Count of the number of DIFAT sectors in the compound file.
            </summary>
        </member>
        <member name="P:Limilabs.CompoundFileFormat.Header.DIFAT">
            <summary>
            76 436 Contains the first 109 FAT sector locations of the compound file. (SecID)
            </summary>
        </member>
        <member name="T:Limilabs.CompoundFileFormat.Sector">
            <summary>
             Represents the unit of allocation within the CFBF.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.SectorList._maximumVersion4SectorCount">
            <summary>
            The range lock sector is the sector that covers file offsets 0x7FFFFF00-0x7FFFFFFF
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.SpecialSectors.DIFSECT">
            <summary>
            Indicates DIFAT sector in a FAT. The DIFAT array is used to represent storage of the FAT sectors. 
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.SpecialSectors.FATSECT">
            <summary>
            Indicates FAT sector.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.SpecialSectors.ENDOFCHAIN">
            <summary>
            Indicates chain terminator.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.SpecialSectors.FREESECT">
            <summary>
            Indicates unallocated sector.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.StorageType.Invalid">
            <summary>
            Unknown storage type.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.StorageType.Storage">
            <summary>
            Indicates that the storage element is a storage object.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.StorageType.Stream">
            <summary>
            Indicates that the storage element is a stream object.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.StorageType.LockBytes">
            <summary>
            Indicates that the storage element is a byte-array object.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.StorageType.Property">
            <summary>
            Indicates that the storage element is a property storage object.
            </summary>
        </member>
        <member name="F:Limilabs.CompoundFileFormat.StorageType.Root">
            <summary>
            Root storage.
            </summary>
        </member>
        <member name="T:Limilabs.CompoundFileFormat.StreamView">
            <summary>
            Stream decorator for a Sector or miniSector chain
            </summary>
        </member>
        <member name="M:Limilabs.Cryptography.Hash.MD4Managed.RotateLeft(System.UInt32,System.Byte)">
            <summary>
            Rotates x left n bits.
            </summary>
        </member>
        <member name="T:Limilabs.Cryptography.CommonOids">
            <summary>
            Represents common Oids, that represent encryption and signing algorithms.
            </summary>
            <seealso cref="P:Limilabs.Mail.EncryptionConfiguration.Algorithm"/>
            <seealso cref="P:Limilabs.Mail.SignatureConfiguration.Algorithm"/>
        </member>
        <member name="F:Limilabs.Cryptography.CommonOids.TrippleDes">
            <summary>
            Gets DES-EDE3-CBC oid.
            </summary>       
        </member>
        <member name="F:Limilabs.Cryptography.CommonOids.Aes128">
            <summary>
            Gets aes128-CBC oid.
            </summary>
        </member>
        <member name="F:Limilabs.Cryptography.CommonOids.Aes256">
            <summary>
            Gets aes256-CBC oid.
            </summary>
        </member>
        <member name="F:Limilabs.Cryptography.CommonOids.Md5">
            <summary>
            Gets md5 oid.
            </summary>
        </member>
        <member name="F:Limilabs.Cryptography.CommonOids.Sha1">
            <summary>
            Gets SHA-1 oid.
            </summary>
        </member>
        <member name="F:Limilabs.Cryptography.CommonOids.Sha224">
            <summary>
            Gets SHA-224 oid.
            </summary>
        </member>
        <member name="F:Limilabs.Cryptography.CommonOids.Sha256">
            <summary>
            Gets SHA-256 oid.
            </summary>
        </member>
        <member name="F:Limilabs.Cryptography.CommonOids.Sha384">
            <summary>
            Gets SHA-384 oid.
            </summary>
        </member>
        <member name="F:Limilabs.Cryptography.CommonOids.Sha512">
            <summary>
            Gets SHA-512 oid.
            </summary>
        </member>
        <member name="T:Limilabs.Cryptography.PemReader">
            <summary>
            PEM format reader.
            </summary>
        </member>
        <member name="M:Limilabs.Cryptography.PemReader.ReadCertificateFromFile(System.String)">
            <summary>
            Reads certificate from PEM file (BEGIN CERTIFICATE).
            </summary>
            <param name="filename">File name to read from</param>
            <returns>Certificate that was read.</returns>
        </member>
        <member name="M:Limilabs.Cryptography.PemReader.ReadCertificate(System.String)">
            <summary>
            Reads certificate from PEM file (BEGIN CERTIFICATE).
            </summary>
            <param name="pem">String to read from</param>
            <returns>Certificate that was read.</returns>
        </member>
        <member name="M:Limilabs.Cryptography.PemReader.ReadPublicKeyFromFile(System.String)">
            <summary>
            Reads public key from PEM file (BEGIN PUBLIC KEY).
            </summary>
            <param name="filename">File to read from</param>
            <returns>Certificate that was read.</returns>
        </member>
        <member name="M:Limilabs.Cryptography.PemReader.ReadPublicKey(System.String)">
            <summary>
            Reads public key from PEM file (BEGIN PUBLIC KEY).
            </summary>
            <param name="pem">String to read from</param>
            <returns>Certificate that was read.</returns>
        </member>
        <member name="M:Limilabs.Cryptography.PemReader.ReadPrivateKeyFromFile(System.String)">
            <summary>
            Reads private key from PEM file (BEGIN RSA PRIVATE KEY / BEGIN PRIVATE KEY).
            </summary>
            <param name="filename">File to read from</param>
            <returns>Certificate that was read.</returns>
        </member>
        <member name="M:Limilabs.Cryptography.PemReader.ReadPrivateKey(System.String)">
            <summary>
            Reads private key from PEM file (BEGIN RSA PRIVATE KEY / BEGIN PRIVATE KEY).
            </summary>
            <param name="pem">String to read from</param>
            <returns>Certificate that was read.</returns>
        </member>
        <member name="M:Limilabs.Cryptography.PemReader.ReadEncryptedPrivateKeyFromFile(System.String,System.String)">
            <summary>
            Reads encrypted private key from PEM file (BEGIN ENCRYPTED PRIVATE KEY / BEGIN RSA PRIVATE KEY).
            </summary>
            <param name="filename">File to read from</param>
            <param name="password">Password.</param>
            <returns>Certificate that was read.</returns>
        </member>
        <member name="M:Limilabs.Cryptography.PemReader.ReadEncryptedPrivateKey(System.String,System.String)">
            <summary>
            Reads encrypted private key from PEM file (BEGIN ENCRYPTED PRIVATE KEY / BEGIN RSA PRIVATE KEY).
            </summary>
            <param name="pem">String to read from</param>
            <param name="password">Password.</param>
            <returns>Certificate that was read.</returns>
        </member>
        <member name="M:Limilabs.Cryptography.PemReader.ReadEncryptedRsaPrivateKey(System.String,System.String)">
            <summary>
            Reads encrypted private key from PEM file (RSA PRIVATE KEY).
            </summary>
        </member>
        <member name="F:Limilabs.Cryptography.Oid.MSOEEncryptionCertificate">
            <summary>
            Microsoft Outlook/Exchange......................1.3.6.1.4.1.311.16
            Outlook Express.................................1.3.6.1.4.1.311.16.4
            Used by OL/OLEXP to identify which certificate signed the PKCS # 7 message
            
            Identifies the encryption certificate (this attribute is required by MSOE to recognize the encryption certificate).
            </summary>
        </member>
        <member name="M:Limilabs.Cryptography.PublicKeyAns1Reader.Read(System.IO.Stream)">
            <summary>
             Parses binary asn.1 X509
            </summary>
            <param name="stream">Stream to read data from.</param>
            <returns><see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/></returns>
        </member>
        <member name="T:Limilabs.Encoding2.Headers.HeaderQuotedPrintableEncoding">
            <summary>
            Implements quoted-printable string decoding/encoding for MIME headers (RFC2047).
            </summary>
        </member>
        <member name="M:Limilabs.Encoding2.ImapUTF7.Decode(System.String)">
            <summary>
            Decodes IMAP modified UTF7 encoded data. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>        
        </member>
        <member name="M:Limilabs.Encoding2.ImapUTF7.Encode(System.String)">
            <summary>
            Encodes specified data with IMAP modified UTF7 encoding. Defined in RFC 3501 5.1.3.  Mailbox International Naming Convention.
            </summary>
            <param name="text">Text to encode.</param>
            <returns></returns>
        </member>
        <member name="M:Limilabs.Encoding2.Base64Encoder.Decode(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data.
            </summary>
            <param name="base64Data">Base64 encoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars).</param>
            <returns></returns>
        </member>
        <member name="M:Limilabs.Encoding2.Base64Encoder.Encode(System.Byte[],System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars).</param>
            <param name="pad">Pad missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <param name="insertLineBreaks">Specifies if \r\n should be inserted every 76 characters.</param>
            <returns></returns>
        </member>
        <member name="T:Limilabs.Encoding2.UueEncoding">
            <summary>
            Implements 'UUE' string encoding.
            </summary>
        </member>
        <member name="M:Limilabs.Encoding2.QuotedPrintableEncoding.Decode(Limilabs.Infrastructure.DataPart)">
            <summary>
            Changes Quoted-printable to byte array.
            Changes 3 chars '=A9' into one byte with value A9 HEX.
            </summary>
            <param name="data">Quoted-printable data e.g. "Pawe=B3=20Le=B6nikowski"</param>        
            <returns>Byte array.</returns>
        </member>
        <member name="M:Limilabs.Infrastructure.IO.BinaryLineReader.ReadLineCRLF">
            <summary>
            Only \r\n line ending is recognized.
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.IO.BinaryLineReader.ReadLine">
            <summary>
            All (\r\n, \n\r, \n, \r) line endings are recognized.
            </summary>
        </member>
        <member name="T:Limilabs.Infrastructure.IO.CompressionStream">
            <summary>
            Allows writing _and_ reading from/to stream using deflate compression.
            Does not close _baseStream when closed.
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.IO.LineReader.ReadLineCRLF">
            <summary>
            Only \r\n line ending is recognized.
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.IO.LineReader.ReadLine">
            <summary>
            All (\r\n, \n\r, \n, \r) line endings are recognized.
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.IO.LineReader.ReadLines(System.String)">
            <summary>
            All (\r\n, \n\r, \n, \r) line endings are recognized.
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.Text.KMPCaseInsensitiveSearch.IndexOf(System.Byte[],Limilabs.Infrastructure.Text.CaseInsensitiveData,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="start"></param>
            <param name="count">The number of byte positions to analize.</param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:Limilabs.Infrastructure.Text.CharsetMatch">
            <summary>
            Represents result of charset to encoding match.
            </summary>
        </member>
        <member name="F:Limilabs.Infrastructure.Text.CharsetMatch.Empty">
            <summary>
            Charset wasn't specified.
            </summary>
        </member>
        <member name="F:Limilabs.Infrastructure.Text.CharsetMatch.Unknown">
            <summary>
            Charset was specified, but it doesn't exist or is unknown.
            </summary>
        </member>
        <member name="F:Limilabs.Infrastructure.Text.CharsetMatch.Specified">
            <summary>
            Charset was specified.
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.DateTime1970.FromSeconds(System.Int64)">
            <summary>
            Returns DateTime in local time.
            </summary>
            <param name="secondsFrom1970"></param>
            <returns>DateTime in local time.</returns>
        </member>
        <member name="T:Limilabs.Infrastructure.KMPSearch">
            <summary>
            Implements Knuth–Morris–Pratt string searching algorithm:
            http://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.KMPSearch.IndexOf(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="start"></param>
            <param name="count">The number of byte positions to analize.</param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Limilabs.Infrastructure.KMPSearch.ComputeFailure(System.Byte[])">
            <summary>
            Computes the "partial match" table ("failure function").
            using a boot-strapping process,where the pattern is matched against itself.
            </summary>
        </member>
        <member name="T:Limilabs.Infrastructure.Net.IPAddress">
            <remarks>
              Encapsulates an IP Address.
            </remarks>
        </member>
        <member name="F:Limilabs.Infrastructure.Net.IPAddress._scopeId">
            ip6 Stored in network order (as ip4)
        </member>
        <member name="M:Limilabs.Infrastructure.Net.IPAddress.#ctor(System.Int64)">
            <summary>
              Constructor from a 32-bit constant with the address bytes in
              little-endian order (the lower order bytes contain the netid)
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.Net.IPAddress.IsLoopback(Limilabs.Infrastructure.Net.IPAddress)">
            <summary>
              Used to tell whether an address is a loopback.
              All IP addresses of the form 127.X.Y.Z, where X, Y, and Z are in 
              the range 0-255, are loopback addresses.
            </summary>
            <param name="addr">Address to compare</param>
            <returns></returns>
        </member>
        <member name="M:Limilabs.Infrastructure.Net.IPAddress.ToString">
            <summary>
              Overrides System.Object.ToString to return
              this object rendered in a quad-dotted notation
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.Net.IPAddress.ToString(System.Int64)">
            <summary>
              Returns this object rendered in a quad-dotted notation
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.Net.IPAddress.Equals(System.Object)">
            <returns>
              Whether both objects are equal.
            </returns>
        </member>
        <member name="T:Limilabs.Infrastructure.Net.IPv6Address">
            <remarks>
              Encapsulates an IPv6 Address. See RFC 2373 for more info on IPv6 addresses.
            </remarks>
        </member>
        <member name="M:Limilabs.Infrastructure.Net.IPv6Address.ToString">
            <summary>
              Overrides System.Object.ToString to return
              this object rendered in a canonicalized notation
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.Net.IPv6Address.Equals(System.Object)">
            <returns>
              Whether both objects are equal.
            </returns>
        </member>
        <member name="M:Limilabs.Infrastructure.StringExtensions.RemoveAllWhiteSpaces(System.String)">
            <summary>
            Removes spaces and new lines from string.
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.StringExtensions.ReplaceSimpleWhitespacesWithSpace(System.String)">
            <summary>
            Replaces multiple instances of ' ' and '\t' with single space.
            </summary>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.IsNotNull(System.Object,System.String)">
            <summary>
            Throws ArgumentNullException when argument is null.
            </summary>
            <param name="argument">Argument that must be != null.</param>
            <param name="name">Argument's name.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.IsNotNull(System.Object,System.String,System.String)">
            <summary>
            Throws ArgumentNullException when argument is null.
            </summary>
            <param name="argument">Argument that must be != null.</param>
            <param name="name">Argument's name.</param>
            <param name="message">A message that describes an error.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.Is(System.Boolean,System.String)">
            <summary>
            Throws ArgumentException when condition is not met.
            </summary>
            <param name="condition">Condition that is required.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.IsNot(System.Boolean,System.String)">
            <summary>
            Throws ArgumentException when condition is met.
            </summary>
            <param name="condition">Condition that is excluded.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.IsNotNullNorEmpty(System.String,System.String)">
            <summary>
            Throws ArgumentException when string is null or is empty.
            </summary>
            <param name="argument">Argument that must be != null and != string.Empty.</param>
            <param name="name">Argument's name.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.Argument.IsNotBlank(System.String,System.String)">
            <summary>
            Throws ArgumentException when string is blank.
            </summary>
            <param name="argument">Argument that must not be blank.</param>
            <param name="message">Message.</param>
        </member>
        <member name="M:Limilabs.Infrastructure.SafeDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Needed for deserialization.
            </summary>
        </member>
        <member name="T:Limilabs.Infrastructure.EnumTextAttribute">
            <summary>
            Attribute applied to enums, for different serialization logic applied using <see cref="T:Limilabs.Infrastructure.EnumTextConverter"/>.
            </summary>
        </member>
        <member name="T:Limilabs.Infrastructure.EnumTextConverter">
            <summary>
            Uses <see cref="T:Limilabs.Infrastructure.EnumTextAttribute"/> to apply different serialization logic to enums.
            </summary>
        </member>
        <member name="M:Limilabs.InternalLicensing.ILicenseLoader.IsLicensePresent">
            <summary>
            Checks if license exists. May throw exception on error.
            </summary>
            <returns>True if license is present, false otherwise</returns>
        </member>
        <member name="M:Limilabs.InternalLicensing.ILicenseLoader.Load">
            <summary>
            Loads the license document. May throw exception on error.
            </summary>
            <returns>Loaded XML license document</returns>
        </member>
        <member name="T:Limilabs.Mail.DKIMValidationMode">
            <summary>
            Specifies how DKIM-Signature headers are validated.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.CheckDKIMSignature(Limilabs.Mail.DKIMValidationConfiguration)"/>
            <seealso cref="T:Limilabs.Mail.DKIMValidationConfiguration"/>
        </member>
        <member name="F:Limilabs.Mail.DKIMValidationMode.First">
            <summary>
            Validates first DKIM-Signature header found (default). 
            </summary>
            <seealso cref="M:Limilabs.Mail.DKIMValidationConfiguration.First"/>
        </member>
        <member name="F:Limilabs.Mail.DKIMValidationMode.Specific">
            <summary>
            Validates specific DKIM-Signature header found.
            </summary>
            <seealso cref="M:Limilabs.Mail.DKIMValidationConfiguration.Specific(System.String,System.String)"/>
        </member>
        <member name="F:Limilabs.Mail.DKIMValidationMode.AtLeastOne">
            <summary>
            Validates DKIM-Signature headers until it finds valid one.
            </summary>
            <seealso cref="M:Limilabs.Mail.DKIMValidationConfiguration.AtLeastOne"/>
        </member>
        <member name="F:Limilabs.Mail.DKIMValidationMode.All">
            <summary>
            Validates all DKIM-Signature headers. 
            </summary>
            <seealso cref="M:Limilabs.Mail.DKIMValidationConfiguration.All"/>
        </member>
        <member name="T:Limilabs.Mail.DKIM.CanonicalizationType">
            <summary>
            Represents DKIM canonicalization.
            You can use it to specify <see cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.BodyCanonicalization"/> or <seealso cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HeaderCanonicalization"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.DKIM.CanonicalizationType.Simple">
            <summary>
            Simple canonicalization (almost no changes to the headers or body are allowed).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.DKIM.CanonicalizationType.Relaxed">
            <summary>
            Relaxed canonicalization (minor changes, like additional spaces, are allowed).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.DKIM.CanonicalizationType.Nowsp">
            <summary>
            Nowsp canonicalization. It should not be used and is considered insecure. (It is not defined in RFC4871)
            </summary>
        </member>
        <member name="T:Limilabs.Mail.DKIM.DKIMHashAlgorithm">
            <summary>
            Represents DKIM hash algorithm.
            </summary> 
            <seealso cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HashAlgorithmName"/>
        </member>
        <member name="F:Limilabs.Mail.DKIM.DKIMHashAlgorithm.SHA1">
            <summary>
            RSA-SHA1 hash algorithm.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.DKIM.DKIMHashAlgorithm.SHA256">
            <summary>
            RSA-SHA256 hash algorithm.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.DKIM.DKIMSignatureInfo">
            <summary>
            Represents DKIM signature information. (E.g. Canonicalization used, hash algorithm)
            </summary>
            <seealso cref="P:Limilabs.Mail.MimeDocument.DKIMSignatureInfo"/>
            <seealso cref="M:Limilabs.Mail.MailBuilder.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)"/>
            <seealso cref="M:Limilabs.Mail.Fluent.IFluentMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)"/>
            <seealso cref="M:Limilabs.Mail.IMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)"/>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Selector">
            <summary>
            Gets or sets public key DNS selector (s=).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Version">
            <summary>
            Gets or sets DKIM version (v=).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Domain">
            <summary>
            Gets or sets public key DNS domain (d=).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HeaderList">
            <summary>
            Gets or sets list of headers that are included in the signature (h=).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HashAlgorithmName">
            <summary>
            Gets or sets hash algorithm (a=).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.HeaderCanonicalization">
            <summary>
            Gets or sets header canonicalization (c=).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.BodyCanonicalization">
            <summary>
            Gets or sets body canonicalization (c=).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Length">
            <summary>
            Gets or sets the number of body characters that are included in the signature (l=).
            Null means that hash is computed for entire body.
            Nagative value means error during parsing, or negative value specified.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Time">
            <summary>
            Gets or sets the signature timestamp - the time that this signature was created (t=).
            Default (null) is an unknown creation time.  
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Expires">
            <summary>
            Gets or sets the signature expiration  - the time that this signature was created (x=).
            Default (null) is an unknown expiration time.  
            The value of this property must be greater than the value of <see cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Time"/> if both are present.
            Signatures MAY be considered invalid if the verification time at the verifier is past the expiration date.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.BodyHash">
            <summary>
            bh=
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.SignatureTag">
            <summary>
            b=
            </summary>
        </member>
        <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.GetSignature">
            <summary>
            b=
            </summary>
        </member>
        <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.#ctor">
            <summary>
            Creates new instance of DKIMSignatureInfo.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.#ctor(System.String,System.String)">
            <summary>
            Creates new instance of DKIMSignatureInfo.
            </summary>
            <param name="publicKeyDnsSelector">DNS public key domain selector.</param>
            <param name="publicKeyDnsDomain">DNS public key domain.</param>
        </member>
        <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.SetBodyHash(System.Byte[])">
            <summary>
            Sets bh=, clears b=
            </summary>
            <param name="hash">Body hash.</param>
        </member>
        <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.SetSignature(System.Byte[])">
            <summary>
            Sets b=
            </summary>
        </member>
        <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.IsValid">
            <summary>
            Checks if this object is correctly filled.
            </summary>
            <returns>True if object is correctly filled, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.DKIM.DKIMSignatureInfo.GetErrors">
            <summary>
            Gets list of the errors in this object.
            </summary>
            <returns>List of errors.</returns>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DnsDomainKeyResponse.Notes">
            <summary>
            n=
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DnsDomainKeyResponse.PublicKey">
            <summary>
            p=
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DnsDomainKeyResponse.Version">
            <summary>
            v=
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DnsDomainKeyResponse.Granularity">
            <summary>
            g=
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DnsDomainKeyResponse.HashAlgorithm">
            <summary>
            h=
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DnsDomainKeyResponse.ServiceType">
            <summary>
            s=
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DnsDomainKeyResponse.Flags">
            <summary>
            t=
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIM.DnsDomainKeyResponse.KeyType">
            <summary>
            k=
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Internal.SubjectEvaluator.IsReply(System.String)">
            <summary>
            This method is not used.
            We relay on message having <see cref="P:Limilabs.Mail.MailMessage.InReplyTo"/> and not being a forwadrd (<see cref="M:Limilabs.Mail.Internal.SubjectEvaluator.IsForward(System.String)"/>).
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Internal.MimeDocumentProcessor">
            <summary>
            Creates MailMessage using properly formed <see cref="T:Limilabs.Mail.MimeDocument"/>.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Apple.AppleSingle">
            <summary>
            Represnts AppleSingle data.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Apple.AppleSingle.MagicNumber">
            <summary>
            Gets magic number (<see cref="F:Limilabs.Mail.Apple.MagicNumber.AppleSingle"/>, <see cref="F:Limilabs.Mail.Apple.MagicNumber.AppleDoubleHeader"/>)
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Apple.AppleSingle.Version">
            <summary>
            Gets version.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Apple.AppleSingle.Entries">
            <summary>
            Gets all entries stored in this instance.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Apple.AppleSingle.RealName">
            <summary>
            Gets data stored in <see cref="F:Limilabs.Mail.Apple.EntryId.RealName"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Apple.AppleSingle.Data">
            <summary>
            Gets data stored in <see cref="F:Limilabs.Mail.Apple.EntryId.DataFork"/> entry.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Apple.AppleSingle.Resources">
            <summary>
            Gets data stored in <see cref="F:Limilabs.Mail.Apple.EntryId.ResourceFork"/> entry.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Apple.Entry">
            <summary>
            Represents single entry in <see cref="T:Limilabs.Mail.Apple.AppleSingle"/> file.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Apple.Entry.EntryId">
            <summary>
            Gets this entry ID.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Apple.Entry.Data">
            <summary>
            Gets data stored in this entry.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Apple.EntryId">
            <summary>
            Represents Apple entry ID.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.DataFork">
            <summary>
            Data fork.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.ResourceFork">
            <summary>
            Resource fork.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.RealName">
            <summary>
            File's name as created on home file system.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.Comment">
            <summary>
            Standard Macintosh comment.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.IconBW">
            <summary>
            Standard Macintosh black and white icon.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.IconColor">
            <summary>
            Macintosh color icon.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.FileDatesInfo">
            <summary>
            File creation date, modification date, and so on.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.FinderInfo">
            <summary>
            Standard Macintosh Finder information.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.MacintoshFileInfo">
            <summary>
            Macintosh file information, attributes, and so on.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.ProDOSFileInfo">
            <summary>
            ProDOS file information, attributes, and so on.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.MSDOSFileInfo">
            <summary>
            MSDOS file information, attributes, and so on.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.AFPShortName">
            <summary>
            AFP short name.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.AFPFileInfo">
            <summary>
             AFP short name
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.EntryId.AFPDirectoryID">
            <summary>
             AFP short name
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Apple.MagicNumber">
            <summary>
            AppleSingle magic numbers.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.MagicNumber.AppleSingle">
            <summary>
            Represents AppleSingle magic number.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Apple.MagicNumber.AppleDoubleHeader">
            <summary>
            Represents AppleDoubleHeader magic number.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.RecurrenceId">
            <summary>
            Represents "RECURRENCE-ID" property (<see cref="P:Limilabs.Mail.Appointments.Event.RecurrenceId"/>).
            The full range of calendar components specified by a recurrence set is referenced by referring to just the <see cref="P:Limilabs.Mail.Appointments.Event.UID"/> property value corresponding to the calendar component. 
            The "RECURRENCE-ID" property allows the reference to an individual instance within the recurrence set.
            
            The "RECURRENCE-ID" property is used in conjunction with the <see cref="P:Limilabs.Mail.Appointments.Event.UID"/> and <see cref="P:Limilabs.Mail.Appointments.Event.Sequence"/> property to identify a particular instance of a recurring event. 
            For a given pair of <see cref="P:Limilabs.Mail.Appointments.Event.UID"/> and <see cref="P:Limilabs.Mail.Appointments.Event.Sequence"/> property values, the "RECURRENCE-ID" value for a recurrence instance is fixed.
            </summary>    
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurrenceId.Range">
            <summary>
            The "RANGE" parameter is used to specify the effective range of recurrence instances from the instance specified by the "RECURRENCE-ID" property value. 
            The default value for the range parameter (when it's null) is the single recurrence instance only. 
            The value can also be <see cref="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndPrior"/> and <see cref="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndFuture"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurrenceId.TimeZoneId">
            <summary>
            Gets the time zone. (TZID).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurrenceId.DateOnly">
            <summary>
            Indicates 
            </summary>
            <remarks>
            If the value of the <see cref="P:Limilabs.Mail.Appointments.Event.Start"/> property is a DATE type value, 
            then the value MUST be the calendar date for the recurrence instance.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurrenceId.Value">
            <summary>
            Gets the time when recurrence instance would occur.
            </summary>
            <remarks>
            The date/time value is set to the time when the original recurrence instance would occur; 
            meaning that if the intent is to change a Friday meeting to Thursday, the date/time is still set to the original Friday meeting.
            </remarks>
        </member>
        <member name="M:Limilabs.Mail.Appointments.RecurrenceId.#ctor(System.DateTime)">
            <summary>
            Creates new RecurrenceId instance.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.RecurrenceId.#ctor(System.DateTime,System.String)">
            <summary>
            Creates new RecurrenceId instance.
            </summary>
            <param name="value">Time when recurrence instance would occur.</param>
            <param name="timeZoneId">Time zone. (TZID).</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.RecurrenceId.#ctor(Limilabs.Mail.Appointments.RecurrenceIdRange,System.DateTime)">
            <summary>
            Creates new RecurrenceId instance.
            </summary>
            <param name="range">Range, use <see cref="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndPrior"/> or <see cref="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndFuture"/> constant.</param>
            <param name="value">Time when recurrence instance would occur.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.RecurrenceId.#ctor(Limilabs.Mail.Appointments.RecurrenceIdRange,System.DateTime,System.String)">
            <summary>
            Creates new RecurrenceId instance.
            </summary>
            <param name="range">Range, use <see cref="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndPrior"/> or <see cref="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndFuture"/> constant.</param>
            <param name="value">Time when recurrence instance would occur.</param>
            <param name="timeZoneId">Time zone. (TZID).</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.RecurrenceId.AllDay">
            <summary>
            Marks the this recurrence id as an all day event. 
            Time in <see cref="P:Limilabs.Mail.Appointments.RecurrenceId.Value"/> property will be ignored if this method is used.
            </summary>
            <returns>This recurrence id.</returns>
        </member>
        <member name="T:Limilabs.Mail.Appointments.RecurrenceIdRange">
            <summary>
            Represents value of <see cref="P:Limilabs.Mail.Appointments.RecurrenceId.Range"/> property.
            You can use static fields of this class such as: <see cref="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndPrior"/> and <see cref="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndFuture"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndFuture">
            <summary>
             Indicates a range defined by the given recurrence instance and all subsequent instances.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.RecurrenceIdRange.ThisAndPrior">
            <summary>
            Indicates a range defined by the given recurrence instance and all prior instances.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.DaylightOffset">
            <summary>
            Represents daylight savings time of a time zone.
            <code>
            BEGIN:DAYLIGHT
            DTSTART:19700308T020000
            RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=2SU;BYMONTH=3
            TZOFFSETFROM:-0900
            TZOFFSETTO:-0800
            TZNAME:AKDT
            END:DAYLIGHT
            </code>
            <seealso cref="P:Limilabs.Mail.Appointments.VTimeZone.Daylight"/>
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.DaylightOffset.#ctor">
            <summary>
            Creates new daylight offset entity.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.StandardOffset">
            <summary>
            Represents standard time of a time zone.
            <code>
            BEGIN:STANDARD
            DTSTART:19701101T020000
            RRULE:FREQ=YEARLY;INTERVAL=1;BYDAY=SU;BYMONTH=11
            TZOFFSETFROM:-0800
            TZOFFSETTO:-0900
            TZNAME:AKST
            END:STANDARD
            </code>
            <seealso cref="P:Limilabs.Mail.Appointments.VTimeZone.Standard"/>
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.StandardOffset.#ctor">
            <summary>
            Creates new standard offset entity.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.BaseTimeZoneOffset">
            <summary>
            Base class for standard and daylight savings time of a time zone.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.Start">
            <summary>
            This property specifies when the time zone offset begins (Always converted to local time without the "TZID" property parameter).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.RecurringRule">
            <summary>
            Recurring rule of this time zone offset.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.OffsetFrom">
            <summary>
            This property specifies the offset which is in use prior to this time zone observance.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.OffsetTo">
            <summary>
            This property specifies the offset which is in use in this time zone observance.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.BaseTimeZoneOffset.Name">
            <summary>
            Customary name for the time zone.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.BaseTimeZoneOffset.#ctor(System.String)">
            <summary>
            Creates new event entity.
            </summary>
            <param name="name">Time zone name.</param>
        </member>
        <member name="T:Limilabs.Mail.Appointments.VTimeZone">
             <summary>
             Represents time zone entity.
             </summary>
             <remarks>
             <code>
            BEGIN:VTIMEZONE
            TZID:US-Eastern
            LAST-MODIFIED:19870101T000000Z
            BEGIN:STANDARD
            DTSTART:19971026T020000
            RDATE:19971026T020000
            TZOFFSETFROM:-0400
            TZOFFSETTO:-0500
            TZNAME:EST
            END:STANDARD
            BEGIN:DAYLIGHT
            DTSTART:19971026T020000
            RDATE:19970406T020000
            TZOFFSETFROM:-0500
            TZOFFSETTO:-0400
            TZNAME:EDT
            END:DAYLIGHT
            END:VTIMEZONE
             </code>
             </remarks>
        </member>
        <member name="P:Limilabs.Mail.Appointments.VTimeZone.TimeZoneId">
            <summary>
            Text value that uniquely identifies the VTIMZONE calendar component within the scope of an iCalendar object (TZID).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.VTimeZone.Standard">
            <summary>
            Standard time offsets.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.VTimeZone.Daylight">
            <summary>
            Daylight time offsets.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.VTimeZone.#ctor">
            <summary>
            Creates new time zone entity.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.Frequency">
            <summary>
            Represents frequency of the recurring event.
            You can use <see cref="P:Limilabs.Mail.Appointments.RecurringRule.Interval"/> to specify interval greater than one.
            </summary>
            <seealso cref="P:Limilabs.Mail.Appointments.RecurringRule.Frequency"/>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Frequency.Secondly">
            <summary>
            Event occurs every second.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Frequency.Minutely">
            <summary>
            Event occurs every minute.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Frequency.Hourly">
            <summary>
            Event occurs every hour.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Frequency.Daily">
            <summary>
            Event occurs every day.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Frequency.Weekly">
            <summary>
            Event occurs every week.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Frequency.Monthly">
            <summary>
            Event occurs every month.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Frequency.Yearly">
            <summary>
            Event occurs every year.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.RecurringRule">
            <summary>
            Represents recurring rule for a event.
            You can use <see cref="M:Limilabs.Mail.Appointments.Event.AddRecurringRule"/> or <see cref="M:Limilabs.Mail.Appointments.Event.AddRecurringRule(Limilabs.Mail.Appointments.RecurringRule)"/> to make event recurring.
            You can check <see cref="P:Limilabs.Mail.Appointments.Event.RecurringRules"/> collection to get all recurring rules defined for a event.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.RecurringRule.#ctor">
            <summary>
            Creates new recurring rule.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.Frequency">
            <summary>
            Gets or sets frequency for this rule. You can use static fields of Frequency class e.g. <see cref="F:Limilabs.Mail.Appointments.Frequency.Weekly"/>
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.Interval">
            <summary>
            Gets or sets recurring interval of this rule.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.Count">
            <summary>
            Gets or sets how many times event will be repeated.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.Until">
            <summary>
            Gets or sets the date the until which event will be repeated (Always converted to the UTC value).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.BySecond">
            <summary>
            Gets or sets BYSECOND parameter ranging from 0 to 59.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByMinute">
            <summary>
            Gets or sets BYMINUTE parameter ranging from 0 to 59.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByHour">
            <summary>
            Gets or sets BYHOUR parameter ranging from 0 to 23.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByDay">
            <summary>
            Gets or sets BYDAY parameter.
            List of days when event should occur. You can use static fields of <see cref="T:Limilabs.Mail.Appointments.Weekday"/> class e.g. <see cref="F:Limilabs.Mail.Appointments.Weekday.Monday"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByMonths">
            <summary>
            Gets or sets BYMONTH parameter.
            List of months when event should occur ranging from 1 to 12.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByWeekNumber">
            <summary>
            Gets or sets BYWEEKNO parameter.
            List of values ranging from 1 to 53 or -53 to -1.
            A week is defined as a seven day period, starting on the day of the week defined to be the week start (<see cref="P:Limilabs.Mail.Appointments.RecurringRule.WorkweekStarts" />). 
            Week number one of the calendar year is the first week which contains at least four (4) days in that calendar year. 
            This rule part is only valid for YEARLY rules. For example, 3 represents the third week of the year.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByYearDay">
            <summary>
            Gets or sets BYYEARDAY parameter.
            List of values ranging from -365 to 365.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.ByMonthDay">
            <summary>
            Gets or sets BYMONTHDAY parameter.
            List of values ranging from -31 to 31.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.BySetPos">
            <summary>
            Gets or sets BYSETPOS parameter.
            Specifies list of values which corresponds to the nth occurrence within the set of events specified by the rule.
            Valid values are 1 to 366 or -366 to -1. It MUST only be used in conjunction with another BYxxx rule part. 
            For example "the last work day of the month" could be represented as:
            RRULE:FREQ=MONTHLY;BYDAY=MO,TU,WE,TH,FR;BYSETPOS=-1
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.RecurringRule.WorkweekStarts">
            <summary>
            Gets or sets WKST parameter.
            The WKST rule part specifies the day on which the workweek starts. 
            This is significant when a WEEKLY RRULE has an interval greater than 1, and a BYDAY rule part is specified.
            This is also significant when in a YEARLY RRULE when a BYWEEKNO rule part is specified. The default value is MO.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.Weekday">
            <summary>
            Represents the day of the week.
            <code>
            new Weekday(2, Weekday.Monday) // represents second Monday
            new Weekday(-1, Weekday.Friday) // represents last Friday
            </code>
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.Sunday">
            <summary>
            Sunday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.Monday">
            <summary>
            Monday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.Tuesday">
            <summary>
            Tuesday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.Wednesday">
            <summary>
            Wednesday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.Thursday">
            <summary>
            Thursday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.Friday">
            <summary>
            Friday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.Saturday">
            <summary>
            Saturday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.FirstSunday">
            <summary>
            First Sunday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.FirstMonday">
            <summary>
            First Monday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.FirstTuesday">
            <summary>
            First Tuesday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.FirstWednesday">
            <summary>
            First Wednesday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.FirstThursday">
            <summary>
            First Thursday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.FirstFriday">
            <summary>
            First Friday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.FirstSaturday">
            <summary>
            Last Saturday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.LastSunday">
            <summary>
            Last Sunday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.LastMonday">
            <summary>
            Last Monday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.LastTuesday">
            <summary>
            Last Tuesday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.LastWednesday">
            <summary>
            Last Wednesday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.LastThursday">
            <summary>
            Last Thursday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.LastFriday">
            <summary>
            Last Friday.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Weekday.LastSaturday">
            <summary>
            Last Saturday.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Weekday.Offset">
            <summary>
            Day of the week offset. 
            1 is first, 2 is second, -1 means last, -2 means second from the last and so on.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Weekday.Name">
            <summary>
            Two letter name of the day (MO, TU, WE, TH, FR, SA, SU)
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Weekday.#ctor(System.Int32,Limilabs.Mail.Appointments.Weekday)">
            <summary>
            Creates new instance of the weekday
            </summary>
            <param name="offset">Offset (1 is first, 2 is second, -1 is last)</param>
            <param name="day">Day of the week. You can use static fields of this class to fill this parameter(e.g. <see cref="F:Limilabs.Mail.Appointments.Weekday.Monday"/>)</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Weekday.ToString">
            <summary>
            Returns this object rendered as string.
            </summary>
            <returns>This object rendered as string.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Weekday.Equals(Limilabs.Mail.Appointments.Weekday)">
            <summary>
             Determines whether the specified <see cref="T:Limilabs.Mail.Appointments.Weekday"/> object is equal to the current one.
             Names are compared case insensitive.
            </summary>
             <param name="other">The <see cref="T:Limilabs.Mail.BasicConstant"/> to compare with the current <see cref="T:Limilabs.Mail.BasicConstant"/></param>
             <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Weekday.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            Names are compared case insensitive.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Weekday.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Weekday.op_Equality(Limilabs.Mail.Appointments.Weekday,Limilabs.Mail.Appointments.Weekday)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Mail.Appointments.Weekday"/> objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Weekday.op_Inequality(Limilabs.Mail.Appointments.Weekday,Limilabs.Mail.Appointments.Weekday)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Mail.Appointments.Weekday"/> objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="T:Limilabs.Mail.Appointments.Alarm">
            <summary>
            Represents alarm calendar entity.
            You can use <see cref="M:Limilabs.Mail.Appointments.Event.AddAlarm"/> or <see cref="M:Limilabs.Mail.Appointments.Event.AddAlarm(Limilabs.Mail.Appointments.Alarm)"/> to add alarm to event.
            You can check <see cref="P:Limilabs.Mail.Appointments.Event.Alarms"/> collection to get alarms defined for a event.
            </summary>
            <remarks>
            <code>
            BEGIN:VALARM
            ACTION:DISPLAY
            DESCRIPTION:REMINDER
            TRIGGER;RELATED=START:-PT15M
            END:VALARM
            </code>
            </remarks>
            <seealso cref="P:Limilabs.Mail.Appointments.Event.Alarms"/>
            <seealso cref="P:Limilabs.Mail.Appointments.Event.Alarm"/>
            <seealso cref="M:Limilabs.Mail.Appointments.Event.AddAlarm"/>
            <seealso cref="M:Limilabs.Mail.Appointments.Event.AddAlarm(Limilabs.Mail.Appointments.Alarm)"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Alarm.AlarmTime">
            <summary>
            Gets exact alarm time (Always converted to the UTC value).
            </summary>
            <seealso cref="M:Limilabs.Mail.Appointments.Alarm.ExactlyAt(System.DateTime)"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Alarm.RelativeTo">
            <summary>
            Gets relative to information of <see cref="P:Limilabs.Mail.Appointments.Alarm.AlarmOffset"/>.
            </summary>
            <seealso cref="M:Limilabs.Mail.Appointments.Alarm.BeforeStart(System.TimeSpan)"/>
            <seealso cref="M:Limilabs.Mail.Appointments.Alarm.BeforeEnd(System.TimeSpan)"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Alarm.AlarmOffset">
            <summary>
            Gets alarm offset. Offset is relative to <see cref="P:Limilabs.Mail.Appointments.Alarm.RelativeTo"/> property.
            </summary>
            <seealso cref="M:Limilabs.Mail.Appointments.Alarm.BeforeStart(System.TimeSpan)"/>
            <seealso cref="M:Limilabs.Mail.Appointments.Alarm.BeforeEnd(System.TimeSpan)"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Alarm.Action">
            <summary>
            Gets or sets alarm action (display, audio).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Alarm.Description">
            <summary>
            Gets or sets alarm description.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Alarm.#ctor">
            <summary>
            Creates new event entity
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Alarm.ExactlyAt(System.DateTime)">
            <summary>
            Sets the alarm time to precise date and time.
            </summary>
            <param name="alarmTime">Date and time at which alarm should be raised .</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Alarm.BeforeStart(System.TimeSpan)">
            <summary>
            Sets the alarm time offset relative to start of the event.
            </summary>
            <param name="timeSpan">Time span before event start when alarm should be raised.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Alarm.BeforeEnd(System.TimeSpan)">
            <summary>
            Sets the alarm time offset relative to end of the event.
            </summary>
            <param name="timeSpan">Time span before event end when alarm should be raised.</param>
        </member>
        <member name="T:Limilabs.Mail.Appointments.AlarmAction">
            <summary>
            Represents action that should be taken when alarm is raised.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Appointments.AlarmAction.Display"/> and <see cref="F:Limilabs.Mail.Appointments.AlarmAction.Audio"/>.
            </summary>
            <seealso cref="P:Limilabs.Mail.Appointments.Alarm.Action"/>
        </member>
        <member name="F:Limilabs.Mail.Appointments.AlarmAction.Display">
            <summary>
            Alarm should be displayed.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.AlarmAction.Audio">
            <summary>
            Audio notification should be played.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.Appointment">
            <summary>
            Represents appointment calendar entity. 
            To get all appointments, that an email contains, you can use <see cref="P:Limilabs.Mail.IMail.Appointments"/> collection.
            You can add appointment to an email using <see cref="M:Limilabs.Mail.MailBuilder.AddAppointment(Limilabs.Mail.Appointments.Appointment)"/> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.AddAppointment(Limilabs.Mail.Appointments.Appointment)"/> methods.
            </summary>
            <remarks>
            <code>
            BEGIN:VCALENDAR
            METHOD:REQUEST
            PRODID:Microsoft Exchange Server 2007
            VERSION:2.0
            BEGIN:VEVENT
            ORGANIZER;CN="Alice":MAILTO:alice@mail.com
            ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;CN='Bob':MAILTO:bob@mail.com
            SUMMARY;LANGUAGE=en-US:First Meeting
            DTSTART:20100315T080000
            DTEND:20100315T083000
            UID:040000008200E00074
            CLASS:PUBLIC
            DTSTAMP:20100317T141328Z
            STATUS:CONFIRMED
            LOCATION;LANGUAGE=en-US:Room 42
            BEGIN:VALARM
            ACTION:DISPLAY
            DESCRIPTION:REMINDER
            TRIGGER;RELATED=START:-PT15M
            END:VALARM
            END:VEVENT
            END:VCALENDAR
            </code>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Appointment.Method">
            <summary>
            Gets or sets iCalendar object method associated with the calendar object (e.g. <see cref="F:Limilabs.Mail.Appointments.Method.Request"/>, <see cref="F:Limilabs.Mail.Appointments.Method.Cancel"/>).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Appointment.ProductId">
            <summary>
            Gets or sets the identifier for the product that created the iCalendar object.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Appointment.Version">
            <summary>
            Gets or sets version that is required in order to interpret the iCalendar object.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Appointment.Events">
            <summary>
            List of events in this appointment.
            </summary>
            <seealso cref="M:Limilabs.Mail.Appointments.Appointment.AddEvent"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Appointment.TimeZones">
            <summary>
            List of timezones defined in this appointment.
            </summary>
            <seealso cref="M:Limilabs.Mail.Appointments.Appointment.AddTimeZone"/>
            <seealso cref="M:Limilabs.Mail.Appointments.Appointment.AddTimeZone(Limilabs.Mail.Appointments.VTimeZone)"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Appointment.Event">
            <summary>
            Gets first event from the <see cref="P:Limilabs.Mail.Appointments.Appointment.Events"/> list or <see langword="null"/> if there are no events.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Appointment.TimeZone">
            <summary>
            Gets first time zone from the <see cref="P:Limilabs.Mail.Appointments.Appointment.TimeZones"/> list or <see langword="null"/> if there are no time zones defined.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.#ctor">
            <summary>
            Creates new Appointment entity.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.AddEvent">
            <summary>
            Adds new event to the <see cref="P:Limilabs.Mail.Appointments.Appointment.Events"/> collection.
            </summary>
            <returns>Event that was added.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.AddEvent(Limilabs.Mail.Appointments.Event)">
            <summary>
            Adds event to the <see cref="P:Limilabs.Mail.Appointments.Appointment.Events"/> collection.
            </summary>
            <param name="e">Event to add.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.AddTimeZone">
            <summary>
            Adds timezone to the <see cref="P:Limilabs.Mail.Appointments.Appointment.TimeZones"/> collection.
            </summary>
            <returns>Event that was added.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.AddTimeZone(Limilabs.Mail.Appointments.VTimeZone)">
            <summary>
            Adds timezone to the <see cref="P:Limilabs.Mail.Appointments.Appointment.TimeZones"/> collection.
            </summary>
            <param name="timeZone">Time zone to add.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.Cancel">
            <summary>
            Creates canceled version of this appointment.
            </summary>
            <returns>New appointment with all events canceled.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.Update">
            <summary>
            Creates new version of this appointment that can be updated.
            </summary>
            <returns>New appointment.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.Counter">
            <summary>
            Creates new version of this appointment that can be updated.
            </summary>
            <returns>New appointment.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.Decline(System.String)">
            <summary>
            Creates new appointment with <see cref="P:Limilabs.Mail.Appointments.Participant.Status"/> set to <see cref="F:Limilabs.Mail.Appointments.ParticipationStatus.Declined"/> for users with specified email. 
            </summary>
            <param name="email">Email of user that declined the event.</param>
            <returns>New appointment.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Appointment.Accept(System.String)">
            <summary>
            Creates new appointment with <see cref="P:Limilabs.Mail.Appointments.Participant.Status"/> set to <see cref="F:Limilabs.Mail.Appointments.ParticipationStatus.Accepted"/> for users with specified email. 
            </summary>
            <param name="email">Email of user that accepted the event.</param>
            <returns>New appointment.</returns>
        </member>
        <member name="T:Limilabs.Mail.Appointments.AppointmentParser">
            <summary>
            iCalendar appointment parser.
            </summary>
            <seealso cref="P:Limilabs.Mail.IMail.Appointments"/>
        </member>
        <member name="M:Limilabs.Mail.Appointments.AppointmentParser.#ctor(System.Text.Encoding)">
            <summary>
            Creates new AppointmentParser with specified encoding.
            </summary>
            <param name="encoding">Encoding to be used when extracting encoded data.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.AppointmentParser.#ctor">
            <summary>
            Creates new AppointmentParser with default encoding.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.AppointmentParser.Parse(System.String)">
            <summary>
            Parses specifed text and creates new iCalendar appointment card object.
            </summary>
            <param name="text">Text to parse.</param>
            <returns>VCard business card.</returns>
        </member>
        <member name="T:Limilabs.Mail.Appointments.EventStatus">
            <summary>
            Represents event status.
            </summary>
            <seealso cref="P:Limilabs.Mail.Appointments.Event.Status"/>
        </member>
        <member name="F:Limilabs.Mail.Appointments.EventStatus.Tentative">
            <summary>
            Indicates event is tentative.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.EventStatus.Confirmed">
            <summary>
            Indicates event is definite.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.EventStatus.Canceled">
            <summary>
            Indicates event is canceled.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.Event">
            <summary>
            Represents event calendar entity.
            </summary>
            <remarks>
            <code>
            BEGIN:VEVENT
            ORGANIZER;CN="Alice":MAILTO:alice@mail.com
            ATTENDEE;ROLE=REQ-PARTICIPANT;PARTSTAT=NEEDS-ACTION;RSVP=TRUE;CN='Bob':MAILTO:bob@mail.com
            SUMMARY;LANGUAGE=en-US:First Meeting
            DTSTART:20100315T080000
            DTEND:20100315T083000
            UID:040000008200E00074
            CLASS:PUBLIC
            DTSTAMP:20100317T141328Z
            STATUS:CONFIRMED
            LOCATION;LANGUAGE=en-US:Room 42
            BEGIN:VALARM
            ACTION:DISPLAY
            DESCRIPTION:REMINDER
            TRIGGER;RELATED=START:-PT15M
            END:VALARM
            END:VEVENT
            </code>
            </remarks>
            <seealso cref="P:Limilabs.Mail.Appointments.Appointment.Events"/>
            <seealso cref="P:Limilabs.Mail.Appointments.Appointment.Event"/>
            <seealso cref="M:Limilabs.Mail.Appointments.Appointment.AddEvent"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.UID">
            <summary>
            Gets or sets the unique id of this event.
            For sending an UPDATE for an event the UID should match the original UID.
            Also <see cref="P:Limilabs.Mail.Appointments.Event.Sequence"/> should be set.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Class">
            <summary>
            Gets or sets class of this event (public, private, confidential).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Status">
            <summary>
            Gets or sets status of this event (tentative, confirmed, canceled).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Stamp">
            <summary>
            Gets or sets time stamp of this event (Always converted to UTC format).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Start">
            <summary>
            Gets or sets start time of this event ("DTSTART").
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.End">
            <summary>
            Gets or sets end time of this event ("DTEND").
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.StartTimeZoneId">
            <summary>
            Gets or sets time zone id of <see cref="P:Limilabs.Mail.Appointments.Event.Start"/> time of this event. Consider using <seealso cref="M:Limilabs.Mail.Appointments.Event.InTimeZone(Limilabs.Mail.Appointments.VTimeZone)"/> method instead setting this property.
            </summary>        
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.EndTimeZoneId">
            <summary>
             Gets or sets time zone id of <see cref="P:Limilabs.Mail.Appointments.Event.End"/> time of this event. Consider using <seealso cref="M:Limilabs.Mail.Appointments.Event.InTimeZone(Limilabs.Mail.Appointments.VTimeZone)"/> method instead setting this property.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.ExceptionsTimeZoneId">
            <summary>
             Gets or sets time zone id of <see cref="P:Limilabs.Mail.Appointments.Event.ExceptionDates"/> of this event. Consider using <seealso cref="M:Limilabs.Mail.Appointments.Event.InTimeZone(Limilabs.Mail.Appointments.VTimeZone)"/> method instead setting this property.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Priority">
            <summary>
            Gets or sets priority of this event.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Sequence">
            <summary>
            Gets or sets sequence of this event.
            You should increment this number for each event update. First update should have sequence set to 1.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Summary">
            <summary>
            Gets or sets summery of this event.
            In Microsoft Outlook, the SUMMARY corresponds to the "Subject" entry in the "Appointment" form.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Description">
            <summary>
            Gets or sets description of this event.
            In Microsoft Outlook, the DESCRIPTION corresponds to the descriptive text below "Appointment" form.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.XAltDescription">
            <summary>
            Gets or sets the value of X-ALT-DESC. It is used by Outlook to specify HTML version of <see cref="P:Limilabs.Mail.Appointments.Event.Description"/> header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.DescriptionAltRep">
            <summary>
            Gets or set ALTREP parameter of <see cref="P:Limilabs.Mail.Appointments.Event.Description"/> header. 
            It specifies a URI that points to analternate representation for a textual property value (e.g "CID:part3.msg.970415T083000@example.com").
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Location">
            <summary>
            Gets or sets location of this event.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Organizer">
            <summary>
            Gets or sets the organizer of this event. Use <see cref="M:Limilabs.Mail.Appointments.Event.SetOrganizer(Limilabs.Mail.Appointments.Person)"/> method to set organizer.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Alarms">
            <summary>
            List of alarms for this event.
            </summary>
            <seealso cref="M:Limilabs.Mail.Appointments.Event.AddAlarm"/>
            <seealso cref="M:Limilabs.Mail.Appointments.Event.AddAlarm(Limilabs.Mail.Appointments.Alarm)"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Participants">
            <summary>
            Gets all participants of this event. Use <see cref="M:Limilabs.Mail.Appointments.Event.AddParticipant(Limilabs.Mail.Appointments.Participant)"/> method to add new participant to this collection.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.RecurringRules">
            <summary>
            Gets all recurring rules for this event. Use <see cref="M:Limilabs.Mail.Appointments.Event.AddRecurringRule"/> method to add new participant to this collection.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.ExceptionDates">
            <summary>
            Gets a list of date/time exceptions for this event. (EXDATE).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.Alarm">
            <summary>
            Gets first alarm from the <see cref="P:Limilabs.Mail.Appointments.Event.Alarms"/> list or <see langword="null"/> if there are no alarms for this event.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Event.RecurrenceId">
            <summary>
            Gets recurence id this instants represents. (RECURRENCE-ID).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.#ctor">
            <summary>
            Creates new event entity.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.AddAlarm">
            <summary>
            Creates new alarm and adds it to the <see cref="P:Limilabs.Mail.Appointments.Event.Alarms"/> collection of this event.
            </summary>
            <returns>Newly create alarm that was added to this event.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.AddAlarm(Limilabs.Mail.Appointments.Alarm)">
            <summary>
            Adds alarm to the <see cref="P:Limilabs.Mail.Appointments.Event.Alarms"/> collection of this event.
            </summary>
            <param name="alarm">Alarm to add.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.AddRecurringRule">
            <summary>
            Creates new recurring rule and adds it to the <see cref="P:Limilabs.Mail.Appointments.Event.RecurringRules"/> collection of this event.
            </summary>
            <returns>Newly recurring rule that was added to this event.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.AddRecurringRule(Limilabs.Mail.Appointments.RecurringRule)">
            <summary>
            Adds recurring rule to the <see cref="P:Limilabs.Mail.Appointments.Event.RecurringRules"/> collection of this event.
            </summary>
            <param name="rule">Recurring rule to add.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.SetOrganizer(Limilabs.Mail.Appointments.Person)">
            <summary>
            Sets organizer for this event.
            </summary>
            <param name="person">Person to be set as the organizer to this event.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.AddParticipant(Limilabs.Mail.Appointments.Participant)">
            <summary>
            Adds new participant to this event.
            </summary>
            <param name="participant">Participant to be added to this event.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.AllDay">
            <summary>
            Marks the event as an all day event. 
            Time in <see cref="P:Limilabs.Mail.Appointments.Event.Start"/> and <see cref="P:Limilabs.Mail.Appointments.Event.End"/> properties will be ignored if this method is used.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.InTimeZone(Limilabs.Mail.Appointments.VTimeZone)">
            <summary>
            Specifies time zone for this event. Sets <see cref="P:Limilabs.Mail.Appointments.Event.StartTimeZoneId"/> and <see cref="P:Limilabs.Mail.Appointments.Event.EndTimeZoneId"/>.
            Remember to add the specified timezone to <see cref="P:Limilabs.Mail.Appointments.Appointment.TimeZones"/>.
            </summary>
            <param name="timezone">Time zone.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.Cancel">
            <summary>
            Creates canceled version of this event.
            </summary>
            <returns>New canceled event.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.Update">
            <summary>
            Creates new version of this event that can be updated.
            </summary>
            <returns>New event.</returns>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.Accept(System.String)">
            <summary>
            Sets <see cref="P:Limilabs.Mail.Appointments.Participant.Status"/> to <see cref="F:Limilabs.Mail.Appointments.ParticipationStatus.Accepted"/> for participants with specified email.
            Removes all others from the event.
            </summary>
            <param name="email">Email of user that accepted the event.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Event.Decline(System.String)">
            <summary>
            Sets <see cref="P:Limilabs.Mail.Appointments.Participant.Status"/> to <see cref="F:Limilabs.Mail.Appointments.ParticipationStatus.Declined"/> for participants with specified email.
            Removes all others from the event.
            </summary>
            <param name="email">Email of user that declined the event.</param>
        </member>
        <member name="T:Limilabs.Mail.Appointments.EventClass">
            <summary>
            Represents class of the event.
            </summary>
            <seealso cref="P:Limilabs.Mail.Appointments.Event.Class"/>
        </member>
        <member name="F:Limilabs.Mail.Appointments.EventClass.Public">
            <summary>
            Event is public.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.EventClass.Private">
            <summary>
            Event is private.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.EventClass.Confidential">
            <summary>
            Event is confidential.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.Method">
            <summary>
            Represents method of the appointment.
            </summary>
            <seealso cref="P:Limilabs.Mail.Appointments.Appointment.Method"/>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Method.Publish">
            <summary>
            Publish.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Method.Request">
            <summary>
            Request.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Method.Reply">
            <summary>
            Reply.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Method.Cancel">
            <summary>
            Cancel.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Method.Counter">
            <summary>
            Counter (used by an "Attendee" of an existing event to submit to the "Organizer" a counter proposal to the event description.)
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.Method.DeclineCounter">
            <summary>
            Counter (used by the "Organizer" of an event to reject a counter proposal submitted 
            by an "Attendee". The "Organizer" must send the "DECLINECOUNTER" message 
            to the "Attendee" that sent the "COUNTER" method to the "Organizer".)
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.Participant">
            <summary>
            Represents event participant.
            </summary>
            <seealso cref="P:Limilabs.Mail.Appointments.Event.Participants"/>
            <seealso cref="M:Limilabs.Mail.Appointments.Event.AddParticipant(Limilabs.Mail.Appointments.Participant)"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Participant.Role">
            <summary>
            Gets or sets participation role.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Participant.ResponseRequired">
            <summary>
            Gets or sets information whether participant is required.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Participant.Status">
            <summary>
            Gets or sets participation status.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Participant.XResponseComment">
            <summary>
            Gets or sets X-RESPONSE-COMMENT value.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Participant.#ctor(System.String,System.String)">
            <summary>
            Creates new participant with specified common name and email.
            </summary>
            <param name="cn">Common name of the person.</param>
            <param name="email">Email of the person.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Participant.#ctor(System.String,System.String,Limilabs.Mail.Appointments.ParticipationRole,System.Boolean)">
            <summary>
            Creates new participant with specified common name and email.
            </summary>
            <param name="cn">Common name of the person.</param>
            <param name="email">Email of the person.</param>
            <param name="role">Participation role.</param>
            <param name="responseRequired">Specifies whether participant is required.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Participant.Render(Limilabs.Mail.PDI.PdiHeader)">
            <summary>
            Renders this participant on specified calendar header.
            </summary>
            <param name="header">Header to render on.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Participant.Parse(Limilabs.Mail.PDI.PdiHeader)">
            <summary>
            Extracts participant information from specified header.
            </summary>
            <param name="header">Header to extract information from.</param>
        </member>
        <member name="T:Limilabs.Mail.Appointments.ParticipationRole">
            <summary>
            Represents user participation role.
            </summary>
            <seealso cref="P:Limilabs.Mail.Appointments.Participant.Role"/>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationRole.Chair">
            <summary>
            Chair
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationRole.Required">
            <summary>
            Participant is required.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationRole.Optional">
            <summary>
            Participant is optional.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationRole.NonParticipant">
            <summary>
            Not participant.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.ParticipationStatus">
            <summary>
            Represents user participation status.
            </summary>
            <seealso cref="P:Limilabs.Mail.Appointments.Participant.Status"/>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.NeedsAction">
            <summary>
            Needs action.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Accepted">
            <summary>
            Accepted.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Declined">
            <summary>
            Declined.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Tentative">
            <summary>
            Tentatively accepted.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Delegated">
            <summary>
            Delegated.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.Completed">
            <summary>
            Completed.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.ParticipationStatus.InProcess">
            <summary>
            In progress.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Appointments.Person">
            <summary>
            Represents a person.
            </summary>
            <seealso cref="T:Limilabs.Mail.Appointments.Participant"/>
            <seealso cref="P:Limilabs.Mail.Appointments.Event.Organizer"/>
            <seealso cref="M:Limilabs.Mail.Appointments.Event.SetOrganizer(Limilabs.Mail.Appointments.Person)"/>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Person.Cn">
            <summary>
            Gets or sets the common name of the person.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Appointments.Person.Email">
            <summary>
            Gets or sets email of the person.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Person.#ctor(System.String,System.String)">
            <summary>
            Creates new Person object with specified common name and email.
            </summary>
            <param name="cn">Common name of the person.</param>
            <param name="email">Email of the person.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Person.Render(Limilabs.Mail.PDI.PdiHeader)">
            <summary>
            Renders this person on specified calendar header.
            </summary>
            <param name="header">Header to render on.</param>
        </member>
        <member name="M:Limilabs.Mail.Appointments.Person.Parse(Limilabs.Mail.PDI.PdiHeader)">
            <summary>
            Extracts person information from specified header.
            </summary>
            <param name="header">Header to extract information from.</param>
        </member>
        <member name="T:Limilabs.Mail.Appointments.RelativeTo">
            <summary>
            Represents information about <see cref="P:Limilabs.Mail.Appointments.Alarm.AlarmOffset"/> relation.
            </summary>
            <seealso cref="P:Limilabs.Mail.Appointments.Alarm.RelativeTo"/>
        </member>
        <member name="F:Limilabs.Mail.Appointments.RelativeTo.Start">
            <summary>
             Alarm is related to the <see cref="T:Limilabs.Mail.Appointments.Event"/>'s <see cref="F:Limilabs.Mail.Appointments.RelativeTo.Start"/> time.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Appointments.RelativeTo.End">
            <summary>
             Alarm is related to the <see cref="T:Limilabs.Mail.Appointments.Event"/>'s <see cref="F:Limilabs.Mail.Appointments.RelativeTo.End"/> time.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.AddressHeaderRenderMode">
            <summary>
            Represent address header rendering mode.
            This constant is primarly used to define how BCC headers is rendered.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.Render(System.IO.Stream,Limilabs.Mail.Headers.AddressHeaderRenderMode)"/>
            <seealso cref="M:Limilabs.Mail.IMail.Render(Limilabs.Mail.Headers.AddressHeaderRenderMode)"/>
        </member>
        <member name="F:Limilabs.Mail.Headers.AddressHeaderRenderMode.NoHeader">
            <summary>
            No header is rendered at all.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.AddressHeaderRenderMode.EmptyHeader">
            <summary>
            Header's key is rendered only. E.g. "Bcc: ".
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.AddressHeaderRenderMode.Full">
            <summary>
            Header is rendered in full, including the value. E.g. "Bcc: secret@example.com".
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.ListID">
            <summary>
            Represents list id.
            </summary>
            <seealso cref="P:Limilabs.Mail.IMail.ListID"/>
        </member>
        <member name="P:Limilabs.Mail.Headers.ListID.Name">
            <summary>
            Gets the display name of this list.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ListID.Id">
            <summary>
            Gets the id of this list.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.ListID.#ctor(System.String)">
            <summary>
            Creates new ListID object instance.
            </summary>
            <param name="id">List id.</param>
        </member>
        <member name="M:Limilabs.Mail.Headers.ListID.#ctor(System.String,System.String)">
            <summary>
            Creates new ListID object instance.
            </summary>
            <param name="id">List id.</param>
            <param name="name">List name.</param>
        </member>
        <member name="M:Limilabs.Mail.Headers.ListID.Render(Limilabs.Mail.Headers.HeaderRenderMode)">
            <summary>
            Encodes and escapes all necessary data and renders this id as a string.
            </summary>
            <param name="mode">Header render mode (<see cref="F:Limilabs.Mail.Headers.HeaderRenderMode.ASCII"/> (which uses encoded words) or <see cref="F:Limilabs.Mail.Headers.HeaderRenderMode.UTF8"/>).</param>
            <returns>This object rendered as string.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.ListID.CreateWithoutValidation(System.String,System.String)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.Headers.ListID"/> object using specified id and display name.
            This method in contrast to <see cref="M:Limilabs.Mail.Headers.ListID.#ctor(System.String,System.String)"/> constructor doesn't perform any kind of validation.
            </summary>
            <param name="id">List id.</param>
            <param name="name">List name.</param>
            <returns>New ListID object.</returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.Listeners.BrackedId.BracketIdHeader">
            <summary>
            Implements ID header surrounded by brackets (e.g. 'content-id' field (RFC 2392)).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.Listeners.Address.MailboxParser._parser">
            <summary>
            Parser used for parsing name and address
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.Listeners.Address.MailboxParser.ParseOne(System.String)">
            <summary>
            Parses text, and creates new <see cref="T:Limilabs.Mail.Headers.MailBox"/> object.
            Replaces escape sequences in mailbox's display-name,
            and decodes Quoted-Printable and Base64 fragments.
            </summary>
            <param name="text">
            String to parse.
            <list type="bullet">
            	<listheader>Supported formats:</listheader>
            	<item>"name" &lt;address&gt;</item>
            	<item>name &lt;address&gt;</item>
            	<item>&lt;address&gt;</item>
            	<item>address</item>
            </list>
            </param>
            <returns>New <see cref="T:Limilabs.Mail.Headers.MailBox"/> object or <c>null</c> if s is<c>null</c>.</returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.Listeners.BaseHeader">
            <summary>
            Base class for headers contained in <see cref="T:Limilabs.Mail.Headers.HeaderCollection"/> class.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.Listeners.ContentTransferEncodingHeader">
            <summary>
            Implements 'content-transfer-encoding' header. 
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.Listeners.ContentDispositionHeader">
            <summary>
            Implements 'content-disposition' header field (RFC 2183).
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.Listeners.ContentTypeHeader">
            <remarks>
            Messages without a MIME Content-Type header are taken
            to be plain text in the US-ASCII character set, which can be explicitly specified as:
            Content-type: text/plain; charset=us-ascii
            Each part in "multipart/digest" has a default type of "message/rfc822".
            </remarks>
        </member>
        <member name="T:Limilabs.Mail.Headers.Listeners.PriorityHeader">
            <summary>
            Implementing 'priority' header. 
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.Listeners.OptionsHeader.ParseHeaderValue(System.String)">
            <summary>
            Parses specified header value, extracts all key/value options.
            </summary>
            <param name="headerValue">value of the header.</param>
        </member>
        <member name="T:Limilabs.Mail.Headers.AddressComparisionMode">
            <summary>
            Represents address comparision mode.
            </summary>
            <see cref="M:Limilabs.Mail.Headers.MailBox.EqualAddresses(Limilabs.Mail.Headers.MailBox,Limilabs.Mail.Headers.MailBox,Limilabs.Mail.Headers.AddressComparisionMode)"/>
        </member>
        <member name="F:Limilabs.Mail.Headers.AddressComparisionMode.Default">
            <summary>
            <see cref="P:Limilabs.Mail.Headers.MailBox.LocalPart"/>s are compared using case sensitive comparison and <see cref="P:Limilabs.Mail.Headers.MailBox.DomainPart"/>s are compared using case insensitive comparison.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.AddressComparisionMode.CaseSensitive">
            <summary>
            <see cref="P:Limilabs.Mail.Headers.MailBox.LocalPart"/>s are compared using case sensitive comparison and <see cref="P:Limilabs.Mail.Headers.MailBox.DomainPart"/>s are compared using case insensitive comparison.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.AddressComparisionMode.CaseInsensitive">
            <summary>
            Both <see cref="P:Limilabs.Mail.Headers.MailBox.LocalPart"/>s and <see cref="P:Limilabs.Mail.Headers.MailBox.DomainPart"/>s are compated using case insensitive comparison.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.HeaderRenderMode">
            <summary>
            Represents MIME entity header render mode.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.HeaderRenderMode.ASCII">
            <summary>
            Quoted-Printable and Base64 encoded-words (<a href="https://www.limilabs.com/mail/rfc/2047">RFC 2047</a>) are used when rendering UTF-8 data.
            Addresses are rendered using combination of encoded-words and punycode.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.HeaderRenderMode.UTF8">
            <summary>
            UTF-8 rending mode.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.ExtendedDomain">
            <summary>
            Represents extended domain information. 
            Used to describe <see cref="P:Limilabs.Mail.Headers.ReceivedEntry.From"/> and <see cref="P:Limilabs.Mail.Headers.ReceivedEntry.By"/> parts of <see cref="P:Limilabs.Mail.IMail.Received"/> headers.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ExtendedDomain.Domain">
            <summary>
            Gets or sets domain.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ExtendedDomain.TcpDomain">
            <summary>
            Gets or sets domain from TCP-info (Information derived by server from TCP connection; not client EHLO).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ExtendedDomain.TcpAddress">
            <summary>
            Gets or sets address from TCP-info (Information derived by server from TCP connection; not client EHLO).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.Parsers.CommentsRemover.Remove(System.String)">
            <summary>
            Some header fields can contain comments - text between 2 parentheses '(' , ')'.  This method removes comments from specified string. 
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.HeaderEncoderConfig">
            <summary>
            Represents <see cref="T:Limilabs.Mail.Headers.HeaderEncoder"/> configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.HeaderEncoderConfig.FirstLineLength">
            <summary>
            Gets or sets the maximum length of the first encoded-word.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.HeaderEncoderConfig.MaxLineLength">
            <summary>
            Gets or sets the maximum length of the encoded-words.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.Infrastructure.Header.NormalizedKey">
            <summary>
            Lower case and trimmed.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.Infrastructure.HeaderList.Remove(System.String)">
            <returns>Index of the first removed header</returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.MailAddress">
            <summary>
            Represents base class for email addresses.
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox"/> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> to represent a group of email addresses.
            Consider using <see cref="M:Limilabs.Mail.Headers.MailAddress.GetMailboxes"/> method to extract <see cref="T:Limilabs.Mail.Headers.MailBox"/>(es) represented by this email address. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailAddressParser"/> class to parse raw string into its object representation.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.MailAddress.Name">
            <summary>
            Gets display name of this emmail address e.g. "John Smith". Can by <c>null</c>.
            Please note that two classes inherit from this class - you can use <see cref="P:Limilabs.Mail.Headers.MailBox.Address"/> or <see cref="P:Limilabs.Mail.Headers.MailGroup.Addresses"/> properties to get email address(es).
            Consider using <see cref="M:Limilabs.Mail.Headers.MailAddress.GetMailboxes"/> method to extract <see cref="T:Limilabs.Mail.Headers.MailBox"/>(es) represented by this email address. 
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailAddress.Render">
            <summary>
            Encodes and escapes all necessary data and renders this email address as a string.
            </summary>
            <returns>This object rendered as string.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailAddress.Render(Limilabs.Mail.Headers.HeaderRenderMode)">
            <summary>
            Encodes and escapes all necessary data and renders this email group as a string.
            </summary>
            <param name="mode">Header render mode (<see cref="F:Limilabs.Mail.Headers.HeaderRenderMode.ASCII"/> (which uses encoded words and puny code) or <see cref="F:Limilabs.Mail.Headers.HeaderRenderMode.UTF8"/>).</param>
            <returns>This object rendered as string.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailAddress.GetMailboxes">
            <summary>
            Gets all mailboxes represented by this email address.
            </summary>
            <returns>List of mailboxes represented by this email address.</returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.MailAddressParser">
            <summary>
            Email address parser. 
            It can be used to parse raw strings and create its <see cref="T:Limilabs.Mail.Headers.MailBox"/> or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> representation.
            </summary>
            <seealso cref="T:Limilabs.Mail.Headers.MailAddress"/>
            <seealso cref="T:Limilabs.Mail.Headers.MailBox"/>
            <seealso cref="T:Limilabs.Mail.Headers.MailGroup"/>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailAddressParser.ParseOne(System.String)">
            <summary>
            Parses text, and creates new <see cref="T:Limilabs.Mail.Headers.MailAddress"/> object.
            </summary>
            <param name="text">String to parse.</param>
            <returns>New <see cref="T:Limilabs.Mail.Headers.MailAddress"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailAddressParser.Parse(System.String)">
            <summary>
            Parses text, and creates a list of new <see cref="T:Limilabs.Mail.Headers.MailAddress"/> objects.
            </summary>
            <param name="text">String to parse.</param>
            <returns>New list of <see cref="T:Limilabs.Mail.Headers.MailAddress"/> objects.</returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.MailGroup">
            <summary>
            Represents mail address group that consists of a <see cref="P:Limilabs.Mail.Headers.MailAddress.Name"/> and <see cref="P:Limilabs.Mail.Headers.MailGroup.Addresses"/> list.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.MailGroup.Addresses">
            <summary>
            Gets all mail addresses in this group.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailGroup.#ctor(System.String,System.Collections.Generic.IEnumerable{Limilabs.Mail.Headers.MailAddress})">
            <summary>
            Creates new MailGroup object.
            </summary>
            <param name="name">Group name.</param>
            <param name="addresses">Addresses in this group.</param>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailGroup.#ctor(System.String)">
            <summary>
            Creates new empty group.
            </summary>
            <param name="name">Group name.</param>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailGroup.Render">
            <summary>
            Encodes and escapes all necessary data and renders this email group as a string.
            </summary>
            <returns>This object rendered as string.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailGroup.Render(Limilabs.Mail.Headers.HeaderRenderMode)">
            <summary>
            Encodes and escapes all necessary data and renders this email group as a string.
            </summary>
            <param name="mode">Header render mode (<see cref="F:Limilabs.Mail.Headers.HeaderRenderMode.ASCII"/> (which uses encoded words and puny code) or <see cref="F:Limilabs.Mail.Headers.HeaderRenderMode.UTF8"/>).</param>
            <returns>This object rendered as string.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailGroup.ToString">
            <summary>
            Returns string containing the <see cref="P:Limilabs.Mail.Headers.MailAddress.Name">Name</see> and all <see cref="P:Limilabs.Mail.Headers.MailGroup.Addresses" />.
            </summary>
            <returns>
            String containing the <see cref="P:Limilabs.Mail.Headers.MailAddress.Name">Name</see> and all <see cref="P:Limilabs.Mail.Headers.MailGroup.Addresses" />.
            </returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailGroup.GetMailboxes">
            <summary>
            Gets all mailboxes represented by this mail group.
            </summary>
            <returns>List of mailboxes represented by this group and all child groups.</returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.DispositonActionMode">
            <summary>
            Specifies if the disposition described by the disposition type was a result of an manual or automatic action.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.DispositonActionMode.ManualAction"/>, <see cref="F:Limilabs.Mail.Headers.DispositonActionMode.AutomaticAction"/>.
            <seealso cref="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.ActionMode"/>
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonActionMode.ManualAction">
            <summary>
            The disposition described by the disposition type was a result of an explicit instruction
            by the user rather than some sort of automatically performed action.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonActionMode.AutomaticAction">
            <summary>
            The disposition described by the disposition type was a result of an automatic action,
            rather than an explicit instruction by the user for this message.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.DispositonSendingMode">
            <summary>
            Specifies if the Message Delivery Notification (MDN) was sent manually or automatically.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.DispositonSendingMode.SentManually"/>, <see cref="F:Limilabs.Mail.Headers.DispositonSendingMode.SentAutomatically"/>.
            <seealso cref="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.SendingMode"/>
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonSendingMode.SentManually">
            <summary>
            The user explicitly gave permission for this particular Message Delivery Notification (MDN) to be sent.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonSendingMode.SentAutomatically">
            <summary>
            The Message Delivery Notification (MDN) was sent because the Mail User Agent (MUA) had previously been configured to do so automatically.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.DispositonType">
            <summary>
            Describes disposition type of the message (<a href="https://www.limilabs.com/mail/rfc/2298">RFC 2298</a>, <a href="https://www.limilabs.com/mail/rfc/3798">RFC 3798</a>)
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.DispositonType.Displayed"/>, <see cref="F:Limilabs.Mail.Headers.DispositonType.Deleted"/>.
            </summary>
            <seealso cref="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.Type"/>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonType.Displayed">
            <summary>
            The message has been displayed by the Mail User Agent (MUA) to someone reading the recipient's mailbox.
             There is no guarantee that the content has been read or understood.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonType.Deleted">
            <summary>
            The message has been deleted. The recipient may or may not have seen the message.  
            The recipient might "undelete" the message at a later time and read the message.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonType.Dispatched">
            <summary>
            The message has been sent somewhere in some manner (e.g., printed, faxed, forwarded) 
            without necessarily having been previously displayed to the user.  
            The user may or may not see the message later.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonType.Processed">
            <summary>
            The message has been processed in some manner (i.e., by some sort of rules or server) without being displayed to the user.  
            The user mayor may not see the message later, or there may not even be a human user associated with the mailbox.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonType.Denied">
            <summary>
            The recipient does not wish the sender to be informed of the message's disposition.  
            A UA may also siliently ignore message disposition requests in this situation.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DispositonType.Failed">
            <summary>
            A failure occurred that prevented the proper generation of an MDN.  
            More information about the cause of the failure may be contained in a Failure field.  
            The "failed" disposition type is not to be used for the situation in which there is is some problem in processing the message
            other than interpreting the request for an MDN.  
            The "processed" or other disposition type with appropriate disposition modifiers is to be used in such situations.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.HeaderDecoder">
            <summary>
            Implements 'Base64' and 'Quoted-Printable' header decoding (<a href="https://www.limilabs.com/mail/rfc/2047">RFC 2047</a>), removes comments and replaces escape sequences.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.HeaderDecoder.Decode(System.String)">
            <summary>
            Decodes Base64 and Quoted-Printable strings (<a href="https://www.limilabs.com/mail/rfc/2047">RFC 2047</a>).
            </summary>
            <param name="text">"Tom and =?iso-8859-2?Q?Pawe=B3_Le=B6nikowski?= are..."</param>
            <returns>"Tom and Paweł Leśnikowski are..."</returns>
            <exception cref="T:Limilabs.Mail.MailException">
            The charset is not supported by the current regional options of the computer executing this method.
            </exception>
        </member>
        <member name="T:Limilabs.Mail.Headers.DSNAction">
            <summary>
            Indicates the action performed by the Reporting-MTA as a result of its attempt to deliver the message.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.DSNAction.Failed"/>, <see cref="F:Limilabs.Mail.Headers.DSNAction.Delayed"/>, <see cref="F:Limilabs.Mail.Headers.DSNAction.Delivered"/>, <see cref="F:Limilabs.Mail.Headers.DSNAction.Relayed"/>, <see cref="F:Limilabs.Mail.Headers.DSNAction.Expanded"/>.
            <seealso cref="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.Action"/>
            <seealso cref="P:Limilabs.Mail.Tools.BounceResult.Action"/>
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DSNAction.Failed">
            <summary>
            Indicates that the message could not be delivered to the recipient.  
            The Reporting MTA has abandoned any attempts to deliver the message to this recipient.  
            No further notifications should be expected.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DSNAction.Delayed">
            <summary>
            Indicates that the Reporting MTA has so far been unable to deliver or relay the message, but it will continue to attempt to do so.  
            Additional notification messages may be issued as the message is further delayed or successfully delivered, 
            or if delivery attempts are later abandoned.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DSNAction.Delivered">
            <summary>
            Indicates that the message was successfully delivered to the recipient address specified by the sender, 
            which includes "delivery" to a mailing list exploder.
            It does not indicate that the message has been read. 
            This is a terminal state and no further DSN for this recipient should be expected.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DSNAction.Relayed">
            <summary>
            Indicates that the message has been relayed or gatewayed into an environment that does not accept responsibility
            for generating DSNs upon successful delivery. 
            This action-value SHOULD NOT be used unless the sender has requested notification of successful delivery for this recipient.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.DSNAction.Expanded">
            <summary>
            Indicates that the message has been successfully delivered to the recipient address as specified by the sender,
            and forwarded by the Reporting-MTA beyond that destination to multiple additional recipient addresses.
            An action-value of "expanded" differs from <see cref="F:Limilabs.Mail.Headers.DSNAction.Delivered" /> in that "expanded" is not a terminal state.  
            Further "failed" and/or "delayed" notifications may be provided.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.MimeSensitivity">
            <summary>
            Sensitivity of email message.
            You can use static fields of this class e.g. <see cref="F:Limilabs.Mail.Headers.MimeSensitivity.Personal"/>, <see cref="F:Limilabs.Mail.Headers.MimeSensitivity.Private"/>, <see cref="F:Limilabs.Mail.Headers.MimeSensitivity.CompanyConfidential"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSensitivity.Personal">
            <summary>
            Message is personal.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSensitivity.Private">
            <summary>
            Message is private.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSensitivity.CompanyConfidential">
            <summary>
            Message is company confidential.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.IContentTypeHeader">
            <summary>
            Represents 'Content-type' header.
            You can use this class to add additional options to content-type header
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.IContentTypeHeader.Value">
            <summary>
            Content type value. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.IContentTypeHeader.Item(System.String)">
            <summary>
            Gets or sets additional options in this header.
            </summary>
            <param name="key">Options key.</param>
            <returns>Options value.</returns>
        </member>
        <member name="P:Limilabs.Mail.Headers.IContentTypeHeader.Name">
            <summary>
            Suggested filename ('name' parameter). May be <c>null</c>.
            Consider using <see cref="P:Limilabs.Mail.MIME.MimeData.SafeFileName"/> as it is guaranteed to contain valid file name.
            </summary>
            <remarks>
              It is important that you should not blindly use the suggested
              filename.  The suggested filename SHOULD be checked (and possibly
              changed) to see that it conforms to local file system conventions,
              does not overwrite an existing file, and does not present a security
              problem.
            </remarks>
            <seealso cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> 
        </member>
        <member name="T:Limilabs.Mail.Headers.ReceivedEntry">
            <summary>
            Represents single 'received' header of the email.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ReceivedEntry.From">
            <summary>
             Gets or sets From part.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ReceivedEntry.By">
            <summary>
             Gets or sets By part.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ReceivedEntry.Via">
            <summary>
             Gets or sets Via part.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ReceivedEntry.With">
            <summary>
             Gets or sets With part.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ReceivedEntry.Id">
            <summary>
             Gets or sets Id part.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ReceivedEntry.For">
            <summary>
             Gets or sets For part.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ReceivedEntry.Date">
            <summary>
             Gets or sets Date part.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.ReceivedEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Limilabs.Mail.Headers.ReceivedEntry"/> class.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.ReceivedEntry.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.ContentType">
            <summary>
            Represents content type of the message (E.g. "text/plain").
            You can use static fields of this class such as: <see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain"/>, <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationPdf"/> or <see cref="F:Limilabs.Mail.Headers.ContentType.ImageJpeg"/>.
            </summary>
            <seealso cref="P:Limilabs.Mail.MIME.MimeBase.ContentType"/>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.TextPlain">
            <summary>
            Represents text/plain content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.TextHtml">
            <summary>
            Represents text/html content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.TextRtf">
            <summary>
            Represents text/rtf content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationRtf">
            <summary>
            Represents application/rtf content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.TextXml">
            <summary>
            Represents text/xml content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.TextCsv">
            <summary>
            Represents text/csv content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationOctetStream">
            <summary>
            Represents application/octet-stream content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationMsWord">
            <summary>
            Represents application/msword content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationVndMsExcel">
            <summary>
            Represents application/vnd.ms-excel content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationVndMsPowerPoint">
            <summary>
            Represents application/vnd.ms-powerpoint content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MultipartMixed">
            <summary>
            Represents multipart/Mixed content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MultipartRelated">
            <summary>
            Represents multipart/related content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MultipartAlternative">
            <summary>
            Represents multipart/alternative content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MultipartSigned">
            <summary>
            Represents multipart/signed content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MultipartReport">
            <summary>
            Represents multipart/report content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationMacBinHex40">
            <summary>
            Represents application/mac-binhex40 content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationMacBinHex">
            <summary>
            Represents application/mac-binhex content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationBinHex">
            <summary>
            Represents application/binhex content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationAppleFile">
            <summary>
            Represents application/applefile content type (aka AppleSingle).
            </summary>
            <remarks>Starts with <see cref="F:Limilabs.Mail.Apple.MagicNumber.AppleSingle"/> or <see cref="F:Limilabs.Mail.Apple.MagicNumber.AppleDoubleHeader"/>.</remarks>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationAppleSingle">
            <summary>
            Represents application/applesingle content type.
            </summary>
            <remarks>Starts with <see cref="F:Limilabs.Mail.Apple.MagicNumber.AppleSingle"/> or <see cref="F:Limilabs.Mail.Apple.MagicNumber.AppleDoubleHeader"/>.</remarks>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationAppleDoubleHeader">
            <summary>
            Represents application/appledoubleheader content type.
            </summary>
            <remarks>Starts with <see cref="F:Limilabs.Mail.Apple.MagicNumber.AppleSingle"/> or <see cref="F:Limilabs.Mail.Apple.MagicNumber.AppleDoubleHeader"/>.</remarks>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MultipartAppleDouble">
            <summary>
            Represents multipart/appledouble content type.
            </summary>
            <remarks>Contains AppleDoubleHeader part and data part.</remarks>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationMsTnef">
            <summary>
            Represents TNEF content type: application/Ms-Tnef.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationVndMsTnef">
            <summary>
            Represents official TNEF content type: application/vnd.ms-tnef.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationPdf">
            <summary>
            Represents application/pdf content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationZip">
            <summary>
            Represents application/zip content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationGZip">
            <summary>
            Represents application/gzip content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.TextCalendar">
            <summary>
            Represents text/calendar content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationIcs">
            <summary>
            Represents application/ics content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.TextVCard">
            <summary>
            Represents text/vcard content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MessagePartial">
            <summary>
            Represents message/partial content type. You can use <see cref="T:Limilabs.Mail.MIME.MimeMessagePartial"/> to joined split emails.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MessageRfc822">
            <summary>
            Represents message/rfc822 content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.TextRfc822Headers">
            <summary>
            Represents text/rfc822-headers content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MessageGlobal">
            <summary>
            Represents message/global content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MessageGlobalHeaders">
            <summary>
            Represents message/global-headers content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MessageDeliveryStatus">
            <summary>
            Represents message/delivery-status content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MessageXDeliveryStatus">
            <summary>
            Represents message/xdelivery-status content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MessageGlobalDeliveryStatus">
            <summary>
            Represents message/global-delivery-status content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.MessageDispositionNotification">
            <summary>
            Represents message/disposition-notification content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ImageJpeg">
            <summary>
            Represents image/jpeg content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ImagePng">
            <summary>
            Represents image/png content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ImageGif">
            <summary>
            Represents image/gif content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ImageBmp">
            <summary>
            Represents image/bmp content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ImageTiff">
            <summary>
            Represents image/tiff content type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationXPkcs7Signature">
            <summary>
            Represents application/x-pkcs7-signature content type (detached signature).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationPkcs7Signature">
            <summary>
            Represents application/pkcs7-signature content type (detached signature).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationPkcs7Mime">
            <summary>
            Represents application/pkcs7-mime content type (encrypted message, attached signature).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.ContentType.ApplicationXPkcs7Mime">
            <summary>
            Represents application/x-pkcs7-mime content type (encrypted message, attached signature).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentType.#ctor(Limilabs.Mail.Headers.MimeType,Limilabs.Mail.Headers.MimeSubtype)">
            <summary>
            Creates new content type instance.
            </summary>
            <param name="mimeType">Mime type.</param>
            <param name="mimeSubtype">Mime subtype</param>
        </member>
        <member name="P:Limilabs.Mail.Headers.ContentType.MimeType">
            <summary>
            Type name of content.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.ContentType.MimeSubtype">
            <summary>
            Subtype name of content.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentType.ToString">
            <summary>
            Returns 'mime type name'/'mime subtype name' string.
            </summary>
            <returns>MimeTypeName/MimeSubtypeName</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentType.Equals(Limilabs.Mail.Headers.ContentType)">
            <summary>
             Determines whether the specified <see cref="T:Limilabs.Mail.Headers.ContentType"/> object is equal to the current one.
            </summary>
             <param name="other">The <see cref="T:Limilabs.Mail.Headers.ContentType"/> to compare with the current <see cref="T:Limilabs.Mail.Headers.ContentType"/></param>
             <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentType.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentType.op_Equality(Limilabs.Mail.Headers.ContentType,Limilabs.Mail.Headers.ContentType)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Mail.BasicConstant"/> objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentType.op_Inequality(Limilabs.Mail.Headers.ContentType,Limilabs.Mail.Headers.ContentType)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Mail.BasicConstant"/> objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentType.GetHashCode">
            <summary>
            Returns hash code for this instance.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentType.Parse(System.String)">
            <summary>
            Parses specified string and creates new <see cref="T:Limilabs.Mail.Headers.ContentType"/> object.
            </summary>
            <param name="value">String in format: type/subtype</param>
            <returns>New <see cref="T:Limilabs.Mail.Headers.ContentType"/> object.</returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.HeaderEncoding">
            <summary>
            Header encoding format.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.HeaderEncoding.Base64">
            <summary>
            Base64 encoding.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.HeaderEncoding.Bit7">
            <summary>
            7 bit encoding.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.HeaderEncoding.QuotedPrintable">
            <summary>
            Quoted Printable encoding.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.MimeEncoding">
            <summary>
            Mime encoding format.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Bit7"/>, <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Bit8"/>, <see cref="F:Limilabs.Mail.Headers.MimeEncoding.QuotedPrintable"/>, <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Base64"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeEncoding.Bit7">
            <summary>
            No encoding transformation has been performed.
            7-bit encoding refers to data that is all represented as relatively short lines with 998 octets or less between CRLF line separation.
            No octets with decimal values greater than 127 are allowed and neither are NULs (0).
            CR (13) and LF (10) octets only occur as part of CRLF line separation sequences.
            (<a href="https://www.limilabs.com/mail/rfc/2045">RFC 2045</a> 2.7)
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeEncoding.Bit8">
            <summary>
            No encoding transformation has been performed.
            8-bit encoding refers to data that is all represented  as relatively short lines with 998 octets or less between CRLF line separation.
            No octets with decimal values greater than 127 are allowed and neither are NULs (0).
            CR (13) and LF (10) octets only occur as part of CRLF line separation sequences.
            (<a href="https://www.limilabs.com/mail/rfc/2045">RFC 2045</a> 2.7)
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeEncoding.Binary">
            <summary>
            No encoding transformation has been performed.
            Binary encoding refers to data where any sequence of octets whatsoever is allowed.
            (<a href="https://www.limilabs.com/mail/rfc/2045">RFC 2045</a> 2.7)
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeEncoding.QuotedPrintable">
            <summary>
            Represents quoted-printable encoding.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeEncoding.Base64">
            <summary>
            Represents base64 encoding.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeEncoding.XUUE">
            <summary>
            Represents UUE encoding (Unix to Unix encoding).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeEncoding.UUE">
            <summary>
            Represents UUE encoding (Unix to Unix encoding).
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.MimeReportType">
            <summary>
            Represents report type.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimeReportType.DeliveryStatus"/>, <see cref="F:Limilabs.Mail.Headers.MimeReportType.DispositionNotification"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeReportType.DeliveryStatus">
            <summary>
            "delivery-status" type.
            Delivery Status Notification.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeReportType.DispositionNotification">
            <summary>
            "disposition-notification" type.
            Notification of the "disposition" of a message - indicating, for example, whether it is read by a recipient, discarded before being read.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.ContentIdHelper">
            <summary>
            Contains helper methods for content-id operations.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentIdHelper.DecodeContentId(System.String)">
            <summary>
            Decodes Content-ID in URL format ('a%25b@c').
            Converts %hh hex-escaped characters to their ASCII equivalents.
            </summary>
            <param name="cid">Content-ID for decoding.</param>
            <returns>
            Decoded Content-ID value ('a%b@c').
            </returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.ContentIdHelper.GetContentId(System.String)">
            <summary>
            If url is "cid" URL ('cid:a%25b@c') method returns decoded Content-ID message header ('a%b@c').
            </summary>
            <remarks>
            Converts %hh hex- escaped characters to their ASCII 
            equivalents.
            </remarks>
            <param name="href">Address to extract content id from.</param>
            <returns>
            Content-ID message header -or- <c>null</c> if url is NOT "cid" URL.
            </returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.MimeImportance">
            <summary>
            Importance of email message.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimeImportance.High"/>, <see cref="F:Limilabs.Mail.Headers.MimeImportance.Normal"/>, <see cref="F:Limilabs.Mail.Headers.MimeImportance.Low"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeImportance.High">
            <summary>
            High importance.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeImportance.Normal">
            <summary>
            Normal importance.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeImportance.Low">
            <summary>
            Low importance.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.IContentDisposition">
            <summary>
            Content-Disposition header interface.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.IContentDisposition.Item(System.String)">
            <summary>
            Gets or sets options value for specified key.
            </summary>
            <param name="key">Options key.</param>
            <returns>Options value.</returns>
        </member>
        <member name="P:Limilabs.Mail.Headers.IContentDisposition.Value">
            <summary>
            Gets of sets disposition of content.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.IContentDisposition.FileName">
            <summary>
            Suggested filename ('filename' parameter). May be <c>null</c>.
            Consider using <see cref="P:Limilabs.Mail.MIME.MimeData.SafeFileName"/> as it is guaranteed to contain valid file name.
            </summary>
            <remarks>
              It is important that you should not blindly use the suggested filename.  
              The suggested filename SHOULD be checked (and possibly changed) 
              to see that it conforms to local file system conventions, 
              does not overwrite an existing file, and does not present a security problem.
            </remarks>
            <seealso cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> 
        </member>
        <member name="T:Limilabs.Mail.Headers.MailBox">
            <summary>
            Represents mailbox that consists of email address and display name.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.MailBox.Address">
            <summary>
            Gets email address e.g. "john.smith@example.com".
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.MailBox.DomainPart">
            <summary>
            Gets the domain part of the <see cref="P:Limilabs.Mail.Headers.MailBox.Address"/> e.g. "example.com".
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.MailBox.LocalPart">
            <summary>
            Gets the local part of the <see cref="P:Limilabs.Mail.Headers.MailBox.Address"/> e.g. "john.smith".
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.#ctor(System.String,System.String)">
            <summary>
            Creates new MailBox object using specified email address and display name.
            </summary>
            <param name="address">Email address.</param>
            <param name="name">Display name.</param>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.#ctor(System.String)">
            <summary>
            Creates new MailBox object using specified email address.
            </summary>
            <param name="address">Email address.</param>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.CreateWithoutValidation(System.String,System.String)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.Headers.MailBox"/> object using specified email address and display name.
            This method in contrast to <see cref="M:Limilabs.Mail.Headers.MailBox.#ctor(System.String,System.String)"/> constructor doesn't perform any kind of address validation.
            </summary>
            <param name="address">Email address.</param>
            <param name="name">Display name.</param>
            <returns>Newly created MailBox object.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.CreateWithoutValidation(System.String)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.Headers.MailBox"/> object using specified email address and no display name.
            This method in contrast to <see cref="M:Limilabs.Mail.Headers.MailBox.#ctor(System.String)"/> constructor doesn't perform any kind of address validation.
            </summary>
            <param name="address">Email address.</param>
            <returns>Newly created MailBox object.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.Render">
            <summary>
            Encodes and escapes all necessary data and renders this mailbox as a string.
            </summary>
            <returns>This object rendered as string.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.Render(Limilabs.Mail.Headers.HeaderRenderMode)">
            <summary>
            Encodes and escapes all necessary data and renders this email as a string.
            </summary>
            <param name="mode">Header render mode (<see cref="F:Limilabs.Mail.Headers.HeaderRenderMode.ASCII"/> (which uses encoded words and puny code) or <see cref="F:Limilabs.Mail.Headers.HeaderRenderMode.UTF8"/>).</param>
            <returns>This object rendered as string.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.ToString">
            <summary>
            Returns string containing the <see cref="P:Limilabs.Mail.Headers.MailAddress.Name">Name</see> and the <see cref="P:Limilabs.Mail.Headers.MailBox.Address">Address</see>.
            </summary>
            <returns>
            String containing the <see cref="P:Limilabs.Mail.Headers.MailAddress.Name">Name</see> and the <see cref="P:Limilabs.Mail.Headers.MailBox.Address">Address</see>
            </returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.EqualAddresses(Limilabs.Mail.Headers.MailBox,Limilabs.Mail.Headers.MailBox)">
            <summary>
            Checks if addresses of two <see cref="T:Limilabs.Mail.Headers.MailBox"/> instances are equal.
            <see cref="P:Limilabs.Mail.Headers.MailBox.LocalPart"/>s are compared using case sensitive comparison and <see cref="P:Limilabs.Mail.Headers.MailBox.DomainPart"/>s are compared using case insensitive comparison.
            </summary>
            <param name="first">First object to compare.</param>
            <param name="second">Second object to compare.</param>
            <returns>True if addresses are equal, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.EqualAddresses(Limilabs.Mail.Headers.MailBox,Limilabs.Mail.Headers.MailBox,Limilabs.Mail.Headers.AddressComparisionMode)">
            <summary>
            Checks if addresses of two <see cref="T:Limilabs.Mail.Headers.MailBox"/> instances are equal.
            </summary>
            <param name="first">First object to compare.</param>
            <param name="second">Second object to compare.</param>
            <param name="mode">Address comparision mode.</param>
            <returns>True if addresses are equal, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.MailBox.GetMailboxes">
            <summary>
            Gets all mailboxes represented by this mail address.
            </summary>
            <returns>List of mailboxes containing only this mailbox.</returns>
            <seealso cref="M:Limilabs.Mail.Headers.MailGroup.GetMailboxes"/>
        </member>
        <member name="T:Limilabs.Mail.Headers.HeaderCollection">
            <summary>
            Represents collection of all MIME headers.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.HeaderCollection.Item(System.String)">
            <summary>
            Gets or set the header value for specified header key. 
            </summary>
            <param name="key">Header key.</param>
            <returns>Value for specified header key.</returns>
        </member>
        <member name="P:Limilabs.Mail.Headers.HeaderCollection.AllKeys">
            <summary>
            Gets all MIME header keys stored in this collection.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.HeaderCollection.Count">
            <summary>
            Returns the total number of elements stored in this collection.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.HeaderCollection.GetValues(System.String)">
            <summary>
            Gets the values associated with the specified key.
            </summary>
            <param name="key">The string key of the entry that contains the values to get.</param>
            <returns>A string array that contains the values associated with the specified key.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.HeaderCollection.GetUnfoldedValue(System.String)">
            <summary>
            Gets the unfolded (new lines removed) value associated with the specified key.
            </summary>
            <param name="key">The string key of the entry that contains the value to get.</param>
            <returns>A string that contains the value associated with the specified key.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.HeaderCollection.GetUnfoldedValues(System.String)">
            <summary>
            Gets the unfolded (new lines removed) values associated with the specified key.
            </summary>
            <param name="key">The string key of the entry that contains the values to get.</param>
            <returns>A string array that contains the values associated with the specified key.</returns>
        </member>
        <member name="M:Limilabs.Mail.Headers.HeaderCollection.Add(System.String,System.String)">
            <summary>
            Adds value for specified header key.
            </summary>
            <param name="key">Header key.</param>
            <param name="value">Value for specified header key.</param>
        </member>
        <member name="M:Limilabs.Mail.Headers.HeaderCollection.Remove(System.String)">
            <summary>
            Removes all headers for specified header key. Updates listener for that key.
            </summary>
            <param name="key">Header key.</param>
        </member>
        <member name="M:Limilabs.Mail.Headers.HeaderCollection.AddListener(Limilabs.Mail.Headers.Listeners.BaseHeader)">
            <summary>
            Adds listener which will be informed when specified key changes.
            If the headers contains such key, listener should parse it (headers -> listener)
            otherwise we will get the value form listener (listener -> headers).
            </summary>
            <param name="listener">Header which will be informed about the change.</param>
        </member>
        <member name="T:Limilabs.Mail.Headers.MimeDisposition">
            <summary>
            Represents type of action which mail user agent should take to present the specified data to the user. 
            (<a href="https://www.limilabs.com/mail/rfc/2183">RFC 2183</a>)
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Inline"/>, <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Attachment"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeDisposition.Inline">
            <summary>
            Data should be displayed to the user.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeDisposition.Attachment">
            <summary>
            This is attachment.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Headers.MimeSubtype">
            <summary>
            Represents content's subtype (<a href="https://www.limilabs.com/mail/rfc/2045">RFC 2045</a>).
            </summary>
            <remarks>
            Consider using static fields of <see cref="T:Limilabs.Mail.Headers.ContentType"/> class, such as: <see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain"/>,  <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationPdf"/>, <see cref="F:Limilabs.Mail.Headers.ContentType.ImageJpeg"/>.
            </remarks>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Plain">
            <summary>
            '?/plain' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Html">
            <summary>
            '?/html' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Related">
            <summary>
            '?/related' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Mixed">
            <summary>
            '?/mixed' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Alternative">
            <summary>
            '?/alternative' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Digest">
            <summary>
            '?/digest' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Report">
            <summary>
            '?/report' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.AppleDouble">
            <summary>
            '?/appledouble' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.AppleFile">
            <summary>
            '?/applefile' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Partial">
            <summary>
            '?/partial' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Rfc822">
            <summary>
            '?/rfc822' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Rfc822Headers">
            <summary>
            '?/rfc822-headers' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Signed">
            <summary>
            '?/signed' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.DeliveryStatus">
            <summary>
            '?/delivery-status' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.XDeliveryStatus">
            <summary>
            '?/xdelivery-status' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.DispositionNotification">
            <summary>
            '?/disposition-notification' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.OctetStream">
            <summary>
            '?/octet-stream' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Jpeg">
            <summary>
            '?/jpeg' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Richtext">
            <summary>
            '?/richtext' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Rtf">
            <summary>
            '?/rtf' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Xml">
            <summary>
            '?/xml' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Csv">
            <summary>
            '?/csv' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Gif">
            <summary>
            '?/gif' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Tiff">
            <summary>
            '?/tiff' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Bmp">
            <summary>
            '?/bmp' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Png">
            <summary>
            '?/png' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Pdf">
            <summary>
            ?/pdf subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Mpeg">
            <summary>
            '?/mpeg' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Mp4">
            <summary>
            '?/mp4' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Zip">
            <summary>
            '?/zip' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.XZipCompressed">
            <summary>
            '?/x-zip-compressed' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.GZip">
            <summary>
            '?/gzip' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.XGZip">
            <summary>
            '?/x-gzip' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.MsTnef">
            <summary>
            '?/ms-tnef' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.VndMsTnef">
            <summary>
            '?/vnd.ms-tnef' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Calendar">
            <summary>
            '?/calendar' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.VCard">
            <summary>
            '?/vcard' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.XVCard">
            <summary>
            '?/x-vcard' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Directory">
            <summary>
            '?/directory' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.MsWord">
            <summary>
            '?/msword' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.VndMsExcel">
            <summary>
            '?/vnd.ms-excel' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.VndMsPowerPoint">
            <summary>
            '?/vnd.ms-powerpoint' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Pkcs7Signature">
            <summary>
            '?/pkcs7-signature' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.XPkcs7Signature">
            <summary>
            '?/x-pkcs7-signature' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.Pkcs7Mime">
            <summary>
            '?/pkcs7-mime' subtype.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeSubtype.XPkcs7Mime">
            <summary>
            '?/x-pkcs7-mime' subtype.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.MimeSubtype.#ctor(System.String)">
            <summary>
            Creates new MimeSubtype instance.
            </summary>
            <param name="subtype">Subtype string.</param>
        </member>
        <member name="T:Limilabs.Mail.Headers.MimeType">
            <summary>
            Represents content's type (<a href="https://www.limilabs.com/mail/rfc/2045">RFC 2045</a>).
            </summary>
            <remarks>
            Consider using static fields of <see cref="T:Limilabs.Mail.Headers.ContentType"/> class, such as: <see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain"/>, <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationPdf"/> or <see cref="F:Limilabs.Mail.Headers.ContentType.ImageJpeg"/>.
            </remarks>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeType.Application">
            <summary>
            'application/?' type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeType.Text">
            <summary>
            'text/?' type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeType.Multipart">
            <summary>
            'multipart/?' type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeType.Message">
            <summary>
            'message/?' type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeType.Image">
            <summary>
            'image/?' type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeType.Audio">
            <summary>
            'audio/?' type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeType.Model">
            <summary>
            'model/?' type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimeType.Video">
            <summary>
            'video/?' type.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.MimeType.#ctor(System.String)">
            <summary>
            Creates new MimeType instance.
            </summary>
            <param name="type">Type string.</param>
        </member>
        <member name="T:Limilabs.Mail.Headers.HeaderEncoder">
            <summary>
            Implements 'Base64' and 'Quoted-Printable' header encoding (<a href="https://www.limilabs.com/mail/rfc/2047">RFC 2047</a>).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Headers.HeaderEncoder.Configuration">
            <summary>
            Gets encoder configuration.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Headers.HeaderEncoder.#ctor(System.Text.Encoding)">
            <summary>
            Creates new HeaderEncoder object.
            </summary>
            <param name="encoding">Encoding used.</param>
        </member>
        <member name="M:Limilabs.Mail.Headers.HeaderEncoder.Encode(System.String)">
            <summary>
            Encodes header values. Uses 'Quoted-Printable' or 'Base64', whichever is best.
            </summary>
            <param name="text">Header value to encode.</param>
            <returns>Encoded header.</returns>
        </member>
        <member name="T:Limilabs.Mail.Headers.MimePriority">
            <summary>
            Priority of email message.
            You can use static fields of this class: <see cref="F:Limilabs.Mail.Headers.MimePriority.Urgent"/>, <see cref="F:Limilabs.Mail.Headers.MimePriority.Normal"/>, <see cref="F:Limilabs.Mail.Headers.MimePriority.NonUrgent"/>.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimePriority.Urgent">
            <summary>
            Urgent priority.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimePriority.Normal">
            <summary>
            Normal priority.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Headers.MimePriority.NonUrgent">
            <summary>
            Non urgent priority.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.BinHex.BinHexData">
            <summary>
            Represents data decoded from BinHex encoded data.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BinHex.BinHexData.Name">
            <summary>
            Gets the name stored in BinHex data.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BinHex.BinHexData.Type">
            <summary>
            Gets the type stored in BinHex data.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BinHex.BinHexData.Auth">
            <summary>
            Gets auth data stored in BinHex data.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BinHex.BinHexData.Flag">
            <summary>
            Gets flags stored in BinHex data.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BinHex.BinHexData.Data">
            <summary>
            Gets data.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BinHex.BinHexData.Resource">
            <summary>
            Gets resource data.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.BusinessCard.VCardName">
            <summary>
            Represents VCard name.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardName.FirstName">
            <summary>
            Gets or sets first name.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardName.LastName">
            <summary>
            Gets or sets last name.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardName.#ctor">
            <summary>
            Creates new VCardName entity.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardName.#ctor(System.String,System.String)">
            <summary>
            Creates new VCardName entity.
            </summary>
            <param name="firstName">First name.</param>
            <param name="lastName">Last name.</param>
        </member>
        <member name="T:Limilabs.Mail.BusinessCard.VCardOrganization">
            <summary>
            Represents VCard organization.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardOrganization.Name">
            <summary>
            Gets or sets the organization name.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardOrganization.Units">
            <summary>
            Gets organization units.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardOrganization.#ctor">
            <summary>
            Creates new VCardOrganization object.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardOrganization.#ctor(System.String)">
            <summary>
            Creates new VCardOrganization object.
            </summary>
            <param name="name">Organization's name.</param>
        </member>
        <member name="T:Limilabs.Mail.BusinessCard.VCardParser">
            <summary>
            VCard business card parser.
            </summary>
            <seealso cref="P:Limilabs.Mail.IMail.VCards"/>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardParser.#ctor(System.Text.Encoding)">
            <summary>
            Creates new VCardParser with specified encoding.
            </summary>
            <param name="encoding">Encoding to be used when extracting encoded data.</param>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardParser.#ctor">
            <summary>
            Creates new VCardParser with UTF-8 encoding.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardParser.Parse(System.String)">
            <summary>
            Parses specifed text and creates new VCard business card object.
            </summary>
            <param name="text">Text to parse.</param>
            <returns>VCard business card.</returns>
        </member>
        <member name="T:Limilabs.Mail.BusinessCard.VCard">
            <summary>
            Represents business card (vcard) entity.
            To get all vcards, that an email contains, you can use <see cref="P:Limilabs.Mail.IMail.VCards"/> collection.
            You can add vcards to an email using <see cref="M:Limilabs.Mail.MailBuilder.AddVCard(Limilabs.Mail.BusinessCard.VCard)"/> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.AddVCard(Limilabs.Mail.BusinessCard.VCard)"/> methods.
            </summary>    
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.FullName">
            <summary>
            Gets or sets the formatted text corresponding to the full name of the object this vCard represents (FN).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.Name">
            <summary>
            Gets or sets the name of the object this vCard represents (N).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.Organization">
            <summary>
            Gets or sets the organization of the object this vCard represents (ORG).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.Title">
            <summary>
             Gets or sets the position or job of the object this vCard represents (TITLE).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.Url">
            <summary>
            Gets or sets the a uniform resource locator associated with the object to which this vCard refers (URL).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.WorkPhone">
            <summary>
            Gets preferred  work  phone of the object this vCard represents (TEL).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.WorkFax">
            <summary>
            Gets preferred  work fax of the object this vCard represents (TEL).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.HomePhone">
            <summary>
            Gets preferred  home phone of the object this vCard represents (TEL).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.HomeFax">
            <summary>
            Gets preferred  home fax of the object this vCard represents (TEL).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.WorkAddress">
            <summary>
            Gets work address of the object this vCard represents (ADR).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.HomeAddress">
            <summary>
            Gets home address of the object this vCard represents (ADR).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.Email">
            <summary>
            Gets preferred  email of the object this vCard represents (EMAIL).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.Addresses">
            <summary>
            Gets all addresses associated with this vCard (ADR).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.Phones">
            <summary>
            Gets all phones associated with this vCard (TEL).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCard.Emails">
            <summary>
            Gets all emails associated with this vCard (EMAIL).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCard.#ctor">
            <summary>
            Creates new VCard entity.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.BusinessCard.VCardAddress">
            <summary>
            Represents VCard address.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.Types">
            <summary>
            Gets types of this entity.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.PostOfficeBox">
            <summary>
            Gets or sets the post office box.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.ApartmentNumber">
            <summary>
            Gets or sets the extended address (e.g. apartment or suite number).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.Street">
            <summary>
            Gets or sets the street address.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.City">
            <summary>
            Gets or sets the locality (e.g. city).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.Region">
            <summary>
            Gets or sets the region (e.g. state or province).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardAddress.Country">
            <summary>
            Gets or sets the country name.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardAddress.#ctor">
            <summary>
            Creates new VCardAddress entity.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates new VCardAddress entity.
            </summary>
            <param name="postOfficeBox">Post office box.</param>
            <param name="apartmentNumber">Extended address (e.g. apartment or suite number).</param>
            <param name="street">Street address.</param>
            <param name="city">Locality (e.g. city)</param>
            <param name="region">Region (e.g state or province).</param>
            <param name="postalCode">Postal code.</param>
            <param name="country">Country name.</param>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardAddress.MarkWork">
            <summary>
            Marks this address as work address.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardAddress.MarkHome">
            <summary>
            Marks this address as home address.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.BusinessCard.VCardEmail">
            <summary>
            Represents VCard email.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardEmail.Preference">
            <summary>
            Gets or sets preference (lower value is more preferred, zero is least preferred)
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardEmail.Types">
            <summary>
            Gets types of this entity.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardEmail.Value">
            <summary>
            Gets or sets the actual email address.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.#ctor">
            <summary>
            Creates new VCardEmail entity.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.#ctor(System.String)">
            <summary>
            Creates new VCardEmail entity.
            </summary>
            <param name="value">Email value.</param>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.MarkWork">
            <summary>
            Marks this email address as work email address.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.MarkHome">
            <summary>
            Marks this email address as home email address.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardEmail.MarkPreferred">
            <summary>
            Marks this email address as preferred email address.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.BusinessCard.VCardPhone">
            <summary>
            Represents VCard phones.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardPhone.Preference">
            <summary>
            Gets or sets preference (lower value is more preferred, zero is least preferred)
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardPhone.Types">
            <summary>
            Gets types of this entity.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardPhone.Value">
            <summary>
            Gets or sets the value (uri or text).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BusinessCard.VCardPhone.Phone">
            <summary>
            Gets or sets phone value.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.#ctor">
            <summary>
            Creates new VCardPhone entity.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.#ctor(System.String)">
            <summary>
             Creates new VCardPhone entity.
            </summary>
            <param name="phone">Phone value.</param>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.AsUri(System.String)">
            <summary>
            Sets phone as free form text.
            </summary>
            <param name="phone">Phone as free form text.</param>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.AsText(System.String)">
            <summary>
            Sets phone as free uri text.
            </summary>
            <param name="phone">Phone as ur (tel:+1-111-555-1212).</param>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.MarkWork">
            <summary>
            Marks this phone as work phone.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.MarkHome">
            <summary>
            Marks this phone as home phone.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.MarkFax">
            <summary>
            Marks this phone as fax phone.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BusinessCard.VCardPhone.MarkVoice">
            <summary>
            Marks this phone as voice phone.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.BusinessCard.VCardType">
            <summary>
            Represents VCard types.
            Static fields of this class represent most common types (e.g. <see cref="F:Limilabs.Mail.BusinessCard.VCardType.Home"/>, <see cref="F:Limilabs.Mail.BusinessCard.VCardType.Work"/>, <see cref="F:Limilabs.Mail.BusinessCard.VCardType.Pref"/>, ...).
            </summary>
            <seealso cref="P:Limilabs.Mail.BusinessCard.VCardPhone.Types"/>
            <seealso cref="P:Limilabs.Mail.BusinessCard.VCardAddress.Types"/>
        </member>
        <member name="F:Limilabs.Mail.BusinessCard.VCardType.Home">
            <summary>
            Represents Home.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.BusinessCard.VCardType.Work">
            <summary>
            Represents Work.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.BusinessCard.VCardType.Voice">
            <summary>
            Represents Voice.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.BusinessCard.VCardType.Fax">
            <summary>
            Represents Fax.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.BusinessCard.VCardType.Pref">
            <summary>
            Represents preferred type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.BusinessCard.VCardType.Internet">
            <summary>
            Represents Internet type.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.AttachmentRemoverConfiguration">
            <summary>
            Represents configuration for attachments' removal method.
            </summary>
            <see cref="M:Limilabs.Mail.IMail.ReplaceAttachments(Limilabs.Mail.AttachmentReplacerConfiguration)"/>
        </member>
        <member name="T:Limilabs.Mail.AttachmentRemoverConfiguration.ShouldRemoveDelegate">
            <summary>
            Should remove delegate.
            </summary>
            <param name="argument">MIME entity.</param>
            <returns>True if content should be removed, false otherwise.</returns>
            <see cref="P:Limilabs.Mail.AttachmentRemoverConfiguration.ShouldRemove"/>
        </member>
        <member name="P:Limilabs.Mail.AttachmentRemoverConfiguration.RemoveVisuals">
            <summary>
            Gets or sets the value indicating, if <see cref="P:Limilabs.Mail.IMail.Visuals"/> elements should be removed. Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.AttachmentRemoverConfiguration.RemoveAlternatives">
            <summary>
            Gets or sets the value indicating, if <see cref="P:Limilabs.Mail.IMail.Alternatives"/> elements should be removed. Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.AttachmentRemoverConfiguration.RemoveNonVisuals">
            <summary>
            Gets or sets the value indicating, if <see cref="P:Limilabs.Mail.IMail.NonVisuals"/> elements should be removed. Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.AttachmentRemoverConfiguration.ShouldRemove">
            <summary>
            Gets or sets the callback that is invoked for all canditates to be removed. Default callback return true.
            </summary>
            <remarks>
            Please note that even if this callback returns true, <see cref="P:Limilabs.Mail.AttachmentRemoverConfiguration.RemoveVisuals"/>, <see cref="P:Limilabs.Mail.AttachmentRemoverConfiguration.RemoveNonVisuals"/>, <see cref="P:Limilabs.Mail.AttachmentRemoverConfiguration.RemoveAlternatives"/> may prevent MIME entity to be removed.
            </remarks>
        </member>
        <member name="M:Limilabs.Mail.AttachmentRemoverConfiguration.#ctor">
            <summary>
            Creates new AttachmentRemoverConfiguration object with default settings.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.AttachmentReplacerConfiguration">
            <summary>
            Represents configuration for attachments' replacing method.
            </summary>
            <see cref="M:Limilabs.Mail.IMail.ReplaceAttachments(Limilabs.Mail.AttachmentReplacerConfiguration)"/>
        </member>
        <member name="T:Limilabs.Mail.AttachmentReplacerConfiguration.TagDelegate">
            <summary>
            Tag generation delegate.
            </summary>
            <param name="argument">Attachment object for which the tag should be generated.</param>
            <returns>Generated tag value.</returns>
            <see cref="P:Limilabs.Mail.AttachmentReplacerConfiguration.Tag"/>
        </member>
        <member name="T:Limilabs.Mail.AttachmentReplacerConfiguration.ShouldReplaceDelegate">
            <summary>
            Should replace delegate.
            </summary>
            <param name="argument">MIME entity.</param>
            <returns>True if content should be replaced, false otherwise.</returns>
            <see cref="P:Limilabs.Mail.AttachmentReplacerConfiguration.ShouldReplace"/>
        </member>
        <member name="P:Limilabs.Mail.AttachmentReplacerConfiguration.Template">
            <summary>
            Gets or sets the template for attachments that have name specified.
            You can use [FileName], [Size] and [Tag] placeholders.
            </summary>
            <remarks>
            Template sample:
            <pre>This file ('[FileName]') containing [Size] bytes of data was removed.</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.AttachmentReplacerConfiguration.NoFileNameTemplate">
            <summary>
            Gets or sets the template for attachments that have no name specified.
            You can use [FileName], [Size] and [Tag] placeholders.
            </summary>
            <remarks>
            Template sample:
            <pre>This file containing [Size] bytes of data was removed.</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.AttachmentReplacerConfiguration.Tag">
            <summary>
            Gets or sets tag generating function.
            You can use this property to generate unique id for replaced attachment,
            that can be used in <see cref="P:Limilabs.Mail.AttachmentReplacerConfiguration.Template"/> or <see cref="P:Limilabs.Mail.AttachmentReplacerConfiguration.NoFileNameTemplate"/> templates using [Tag] placeholder.
            </summary>
            <code>
            config.Tag = att => "http://example.com/1234/" + att.FileName;
            </code>
        </member>
        <member name="P:Limilabs.Mail.AttachmentReplacerConfiguration.ReplaceVisuals">
            <summary>
            Gets or sets the value indicating, if <see cref="P:Limilabs.Mail.IMail.Visuals"/> elements should also be replaced. Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.AttachmentReplacerConfiguration.ReplaceAlternatives">
            <summary>
            Gets or sets the value indicating, if <see cref="P:Limilabs.Mail.IMail.Alternatives"/> elements should also be replaced. Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.AttachmentReplacerConfiguration.ReplaceNonVisuals">
            <summary>
            Gets or sets the value indicating, if <see cref="P:Limilabs.Mail.IMail.NonVisuals"/> elements should be replaced. Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.AttachmentReplacerConfiguration.ShouldReplace">
            <summary>
            Gets or sets the callback that is invoked for all canditates to be replaced. Default callback return true.
            </summary>
            <remarks>
            Please note that even if this callback returns true, <see cref="P:Limilabs.Mail.AttachmentReplacerConfiguration.ReplaceVisuals"/>, <see cref="P:Limilabs.Mail.AttachmentReplacerConfiguration.ReplaceNonVisuals"/>, <see cref="P:Limilabs.Mail.AttachmentReplacerConfiguration.ReplaceAlternatives"/> may prevent MIME entity to be replaced.
            </remarks>
        </member>
        <member name="M:Limilabs.Mail.AttachmentReplacerConfiguration.#ctor">
            <summary>
            Creates new AttachmentReplacerConfiguration object with default settings.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.GlobalConfiguration">
            <summary>
            Represents global configuration settings.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.GlobalConfiguration.DnsServerAddress">
            <summary>
            Gets or sets DNS server address. 
            This address is used for DKIM queries.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.DKIMValidationConfiguration">
            <summary>
            Represents DKIM (DomainKeys Identified Mail) signature validation configuration.
            You can use <see cref="M:Limilabs.Mail.DKIMValidationConfiguration.First"/>, <see cref="M:Limilabs.Mail.DKIMValidationConfiguration.Specific(System.String,System.String)"/>, <see cref="M:Limilabs.Mail.DKIMValidationConfiguration.AtLeastOne"/> and <see cref="M:Limilabs.Mail.DKIMValidationConfiguration.All"/> helper methods to create this type.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.CheckDKIMSignature(Limilabs.Mail.DKIMValidationConfiguration)"/>
        </member>
        <member name="P:Limilabs.Mail.DKIMValidationConfiguration.IgnoreUnsignedFrom">
            <summary>
            Get or sets a Boolean value that indicates whether unsigned from header error should be ignored. Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIMValidationConfiguration.IgnoreInvalidLength">
            <summary>
            Get or sets a Boolean value that indicates whether incorect <see cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Length"/> parameter value should be ignored,
            for example when <see cref="P:Limilabs.Mail.DKIM.DKIMSignatureInfo.Length"/> value is greater that the length of the data that needs to be hashed.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIMValidationConfiguration.SpecificSelector">
            <summary>
            Get or sets the selector for <see cref="F:Limilabs.Mail.DKIMValidationMode.Specific"/> header validation.
            Consider using <see cref="M:Limilabs.Mail.DKIMValidationConfiguration.Specific(System.String,System.String)"/> static method instead of setting this field.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIMValidationConfiguration.SpecificDomain">
            <summary>
            Get or sets the domain for <see cref="F:Limilabs.Mail.DKIMValidationMode.Specific"/> header validation.
            Consider using <see cref="M:Limilabs.Mail.DKIMValidationConfiguration.Specific(System.String,System.String)"/> static method instead of setting this field.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.DKIMValidationConfiguration.Mode">
            <summary>
            Gets or sets the cvalue indincating how DKIM-Signature headers are validated.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.DKIMValidationConfiguration.#ctor">
            <summary>
            Creates new DKIMValidationConfiguration object.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.DKIMValidationConfiguration.First">
            <summary>
            Creates new DKIMValidationConfiguration object with <see cref="P:Limilabs.Mail.DKIMValidationConfiguration.Mode"/> set to <see cref="F:Limilabs.Mail.DKIMValidationMode.First"/>.
            </summary>
            <returns>New DKIMValidationConfiguration object.</returns>
        </member>
        <member name="M:Limilabs.Mail.DKIMValidationConfiguration.Specific(System.String,System.String)">
            <summary>
            Creates new DKIMValidationConfiguration object with <see cref="P:Limilabs.Mail.DKIMValidationConfiguration.Mode"/> set to <see cref="F:Limilabs.Mail.DKIMValidationMode.Specific"/>.
            </summary>
            <param name="selector">Public key DNS selector (s=).</param>
            <param name="domain">Public key DNS domain (d=).</param>
            <returns>New DKIMValidationConfiguration object.</returns>
        </member>
        <member name="M:Limilabs.Mail.DKIMValidationConfiguration.AtLeastOne">
            <summary>
            Creates new DKIMValidationConfiguration object with <see cref="P:Limilabs.Mail.DKIMValidationConfiguration.Mode"/> set to <see cref="F:Limilabs.Mail.DKIMValidationMode.AtLeastOne"/>.
            </summary>
            <returns>New DKIMValidationConfiguration object.</returns>
        </member>
        <member name="M:Limilabs.Mail.DKIMValidationConfiguration.All">
            <summary>
            Creates new DKIMValidationConfiguration object with <see cref="P:Limilabs.Mail.DKIMValidationConfiguration.Mode"/> set to <see cref="F:Limilabs.Mail.DKIMValidationMode.All"/>.
            </summary>
            <returns>New DKIMValidationConfiguration object.</returns>
        </member>
        <member name="T:Limilabs.Mail.EncryptionConfiguration">
            <summary>
            Represents S/MIME (Secure/Multipurpose Internet Mail Extensions) encryption configuration.
            </summary>
            <seealso cref="M:Limilabs.Mail.MailBuilder.EncryptWith(Limilabs.Mail.EncryptionConfiguration)"/>
        </member>
        <member name="P:Limilabs.Mail.EncryptionConfiguration.RecipientIdentifierType">
            <summary>
            Gets or sets the type of the identifier of the recipient. Default is <see cref="F:System.Security.Cryptography.Pkcs.SubjectIdentifierType.IssuerAndSerialNumber"/>
            </summary>
        </member>
        <member name="P:Limilabs.Mail.EncryptionConfiguration.Certificates">
            <summary>
            Gets the list of certificates that will be used to encrypt the message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.EncryptionConfiguration.Algorithm">
            <summary>
            Gets or sets the encryption algorithm. You can use one of the <see cref="T:Limilabs.Cryptography.CommonOids"/> static values.
            Default is 3DES (<see cref="F:Limilabs.Cryptography.CommonOids.TrippleDes"/>).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.EncryptionConfiguration.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates new EncryptionConfiguration instance.
            </summary>
            <param name="certificate">Certificate that will be used to encrypt the message.</param>
        </member>
        <member name="M:Limilabs.Mail.EncryptionConfiguration.#ctor">
            <summary>
            Creates new EncryptionConfiguration instance.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.LoadHtmlConfiguration">
            <summary>
            Represents HTML loading configuration.
            </summary>
            <seealso cref="M:Limilabs.Mail.MailBuilder.LoadHtml(System.String,Limilabs.Mail.LoadHtmlConfiguration)"/>
        </member>
        <member name="P:Limilabs.Mail.LoadHtmlConfiguration.ConvertLocalPaths">
            <summary>
            Gets or set the value indicating if local images should be converted to <see cref="P:Limilabs.Mail.MailBuilder.Visuals"/>.
             Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.LoadHtmlConfiguration.RootFolder">
            <summary>
            Gets or set the base folder to search images in. Default is ".".
            </summary>
        </member>
        <member name="P:Limilabs.Mail.LoadHtmlConfiguration.ConvertDataUris">
            <summary>
            Gets or set the value indicating if data uris should be converted to <see cref="P:Limilabs.Mail.MailBuilder.Visuals"/>.
             Default is false.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.LoadHtmlConfiguration.#ctor">
            <summary>
            Initializes new HTML loading configuration class.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MailFactory">
            <summary>
            Factory class used to create <see cref="T:Limilabs.Mail.IMail"/> instance.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailFactory.SetDefaults">
            <summary>
            Gets or set the value indicating whether default values (message-id, date) should be set.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailFactory.MimeConfiguration">
            <summary>
            Gets MIME configuration (automatic binhex, apple, uue, tnef, rfc822 processing).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MailFactory.CreateMail(System.Byte[])">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> from specified data.
            </summary>
            <remarks>
            No defaults are set regardless of <see cref="P:Limilabs.Mail.MailFactory.SetDefaults"/> value.
            </remarks>
            <param name="data">Byte array containing an email message.</param>
            <returns>New mail object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailFactory.CreateMail(Limilabs.Mail.MIME.MimeBase)">
            <summary>
            Creates <see cref="T:Limilabs.Mail.IMail"/> with specified MIME entity as root. 
            Sets default values for <see cref="P:Limilabs.Mail.IMail.Date"/> and <see cref="P:Limilabs.Mail.IMail.MessageID"/> when not defined and <see cref="P:Limilabs.Mail.MailFactory.SetDefaults"/> is set to true.
            </summary>
            <param name="root">Root of the <see cref="T:Limilabs.Mail.MimeDocument"/>.</param>
            <returns>New mime document.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailFactory.CreateMail(Limilabs.Mail.MimeDocument)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> using specified MIME document.
            Sets default values for <see cref="P:Limilabs.Mail.IMail.Date"/> and <see cref="P:Limilabs.Mail.IMail.MessageID"/> when not defined and <see cref="P:Limilabs.Mail.MailFactory.SetDefaults"/> is set to true.
            </summary>
            <param name="document">MIME document.</param>
            <returns>New <see cref="T:Limilabs.Mail.IMail"/> object.</returns>
        </member>
        <member name="T:Limilabs.Mail.MimeConfiguration">
            <summary>
            Represents MIME tree processing configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeConfiguration.ProcessTnefAutomatically">
            <summary>
            Gets or sets a value indicating if TNEF attachments (winmail.dat) should be processed.
            TNEF processing extracts attachments and RTF data from TNEF file and removes TNEF from attachments collections afterwards.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeConfiguration.ProcessUueAutomatically">
            <summary>
            Gets or sets a value indicating if inline UUE attachments should be extracted.
            Default is true.
            </summary>
            <seealso cref="P:Limilabs.Mail.MimeConfiguration.RemoveInlinedUue"/>
        </member>
        <member name="P:Limilabs.Mail.MimeConfiguration.RemoveInlinedUue">
            <summary>
            Gets or sets a value indicating if text representation of inline UUE attachments should be removed.
            Default is false. This property has no affect if <see cref="P:Limilabs.Mail.MimeConfiguration.ProcessUueAutomatically"/> is set to false.
            </summary>
            <seealso cref="P:Limilabs.Mail.MimeConfiguration.ProcessUueAutomatically"/>
        </member>
        <member name="P:Limilabs.Mail.MimeConfiguration.ProcessBinHexAutomatically">
            <summary>
            Gets or sets a value indicating if file stored in BinHex attachments (<see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationBinHex"/>) should be extracted.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeConfiguration.ProcessAppleAutomatically">
            <summary>
            Gets or sets a value indicating if files stored in AppleSingle (<see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationAppleFile"/>) and AppleDouble (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartAppleDouble"/>) entities should be extracted.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeConfiguration.ExtractRfc822Automatically">
            <summary>
            Gets or sets a value indicating if message (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822"/>, <see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobal"/>) being a single root should be extracted.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeConfiguration.CopyHeadersOnRfc822Extraction">
            <summary>
            Specifies if email headers from the outer message are copied to a extracted, inner email message.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeConfiguration.SMIMEConfiguration">
            <summary>
            Gets or sets S/MIME configuration (automatic decryption, signed message extraction, certificates used for decryption and signature validation).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MimeConfiguration.#ctor">
            <summary>
            Creates new MimeConfiguration object.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.IMailContainer">
            <summary>
            Represents MIME entity that contains email message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.IMailContainer.Message">
            <summary>
            Gets parsed email message from this MIME object.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.ISignedContainer">
            <summary>
            Represents SMIME entities that can store signed data and a signature.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.ISignedContainer.SetPlainDataAndSign(Limilabs.Mail.MIME.MimeBase,Limilabs.Mail.SignatureConfiguration)">
            <summary>
            Sets plain MIME entity and signs it using specified parameters.
            </summary>
            <param name="root">Plain MIME entity.</param>
            <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
        </member>
        <member name="M:Limilabs.Mail.MIME.ISignedContainer.GetSignedCms">
            <summary>
            Gets the SignedCms instance stored in this container
            </summary>
            <returns>SignedCms instance.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.ISignedContainer.ReSignWith(Limilabs.Mail.SignatureConfiguration)">
            <summary>
            Computes the signature again.
            </summary>
            <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeAppleSingle">
            <summary>
            Represents MIME entity containing <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationAppleFile"/> and <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationAppleSingle"/> data.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.ProcessAppleAutomatically"/>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeAppleSingle.AppleSingle">
            <summary>
            Gets apple single data stored in this MIME entity.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeBinHex">
            <summary>
            Represents MIME entity containing <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationBinHex"/> data.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.ProcessBinHexAutomatically"/>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeBinHex.BinHex">
            <summary>
            Gets BinHex data stored in this MIME entity.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeMessageGlobal">
            <summary>
            Represents MIME entity containing <see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobal"/> data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMessageGlobal"/> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMessageGlobal(Limilabs.Mail.IMail)"/> methods to create objects of this type.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageGlobal.Message">
            <summary>
            Gets or sets email message enclosed in this MIME object.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageGlobal.SafeFileName">
            <summary>
            Gets suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName"/> is false),
            tries to use <see cref="P:Limilabs.Mail.IMail.Subject"/> to create a file name or generates a file name in format "message.eml".
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeMessageGlobalHeaders">
            <summary>
            Represents MIME entity containing <see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobalHeaders"/> data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMessageGlobalHeaders"/> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMessageGlobalHeaders(Limilabs.Mail.IMail)"/> methods to create objects of this type.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageGlobalHeaders.Message">
            <summary>
            Gets or sets email message enclosed in this MIME object.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageGlobalHeaders.SafeFileName">
            <summary>
            Gets suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName"/> is false), 
            tries to use <see cref="P:Limilabs.Mail.IMail.Subject"/> to create a file name or generates a file name in format "message.eml".
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeMessagePartial">
            <summary>
            Represents MIME entity containing <see cref="F:Limilabs.Mail.Headers.ContentType.MessagePartial"/> data. (<a href="https://www.limilabs.com/mail/rfc/1521">RFC 1521</a>)
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessagePartial.Total">
            <summary>
            Gets or set the value indicating parts' total count.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessagePartial.Number">
            <summary>
            Gets or set the value indicating a sequence number of this part (1 based).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessagePartial.Id">
            <summary>
            Gets or set the unique identifier to be used to match the parts together.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeMixed">
            <summary>
            Implements 'multipart/mixed' MIME entity, e.g. email message containing attachments.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeRenderConfiguration">
            <summary>
            Represents MIME render configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeRenderConfiguration.Header">
            <summary>
            Gets or sets the value indicating how MIME headers are rendered.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeRenderConfiguration.#ctor">
            <summary>
            Creates new instance of MimeRenderConfiguration class.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeRfc822Headers">
            <summary>
            Represents MIME entity containing <see cref="F:Limilabs.Mail.Headers.ContentType.TextRfc822Headers"/> data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822Headers"/> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822Headers(Limilabs.Mail.IMail)"/> methods to create objects of this type.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeRfc822Headers.Message">
            <summary>
            Gets or sets email message enclosed in this MIME object.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeRfc822Headers.SafeFileName">
            <summary>
            Gets suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName"/> is false),
            tries to use <see cref="P:Limilabs.Mail.IMail.Subject"/> to create a file name or generates a file name in format "message.eml".
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.ContentTypeChooser.GetExtension(Limilabs.Mail.Headers.ContentType)">
            <returns>Extension without the dot</returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeRfc822">
            <summary>
            Represents MIME entity containing <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822"/> data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822"/> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822(Limilabs.Mail.IMail)"/> methods to create objects of this type.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeRfc822.Message">
            <summary>
            Gets or sets email message enclosed in this MIME object.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeRfc822.SafeFileName">
            <summary>
            Gets suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName"/> is false),
            tries to use <see cref="P:Limilabs.Mail.IMail.Subject"/> to create a file name or generates a file name in format "message.eml".
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeVCard">
            <summary>
            Represents MIME entity containing text/vcard data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeVCard"/> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeVCard(Limilabs.Mail.BusinessCard.VCard)"/> methods to create objects of this type.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeVCard.VCard">
            <summary>
            Gets or sets the VCard contained in this MIME entity.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeVCard.SafeFileName">
            <summary>
            Gets suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName"/> is false),
            tries to use <see cref="P:Limilabs.Mail.BusinessCard.VCard.FullName"/> to create a file name or generates a random file name in format "vcard.vcf".
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeDeliveryStatusNotification">
            <summary>
            Represents Delivery Status Notification (DSN) (message/delivery-status).
            Provides indications of successful delivery or delivery failure.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.ReportingMTA">
            <summary>
            Indicates the name of the Message Transfer Agent (MTA) which is reporting the results of delivery attempts described in this Delivery Status Notification (DSN).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.ReceivedFromMTA">
            <summary>
            Indicates the name of the Message Transfer Agent (MTA) from which the message was received.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.ArrivalDate">
            <summary>
            Indicates the date and time at which the message arrived at the Reporting MTA. 
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.Date">
            <summary>
            Indicates the date field. 
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.FirstRecipient">
            <summary>
            Gets all Delivery Status Notification for first recipient, or null if no recipient is found.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.Recipients">
            <summary>
            Gets all Delivery Status Notification for all recipient.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.XTnef2MimeAction">
            <summary>
            Gets or sets 'X-Tnef2Mime-Action' value.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.Item(System.String)">
            <summary>
            Gets any field defined in this Delivery Status Notification (DSN) header.
            </summary>
            <param name="name">Field name.</param>
            <returns>Field value</returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeMessageDispositionNotification">
            <summary>
            Represents Message Disposition Notifications (MDN) (message/disposition-notification)
            Provides notification of the "disposition" of a message -
            indicating, for example, whether it is read by a recipient or discarded before being read.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.FinalRecipient">
            <summary>
            Indicates the recipient.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.OriginalMessageID">
            <summary>
            Gets original message id ('Original-Message-ID' field). Without surrounding brackets (&lt; and &gt;)
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.ActionMode">
            <summary>
            Specifies if the disposition described by the <see cref="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.Type"/> was a result of an manual or automatic action.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.SendingMode">
            <summary>
            Specifies if the Message Delivery Notification (MDN) was sent manually or automatically.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.Type">
            <summary>
            Describes disposition type of the message. Such as <see cref="F:Limilabs.Mail.Headers.DispositonType.Displayed"/> or <see cref="F:Limilabs.Mail.Headers.DispositonType.Deleted"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMessageDispositionNotification.Item(System.String)">
            <summary>
            Gets or sets any field defined in this Message Delivery Notification (MDN).
            </summary>
            <param name="name">Field name.</param>
            <returns>Field value</returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification">
            <summary>
            Defines Delivery Status Notification (DSN) for a single recipient.
            <seealso cref="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.FirstRecipient"/>
            <seealso cref="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.Recipients"/>
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.Action">
            <summary>
            Indicates the action performed by the <see cref="P:Limilabs.Mail.MIME.MimeDeliveryStatusNotification.ReportingMTA"/> as a result of its attempt to deliver the message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.DiagnosticCode">
            <summary>
            For a "failed" or "delayed" recipient, contains the actual diagnostic code issued by the mail transport.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.Status">
            <summary>
            Contains a transport-independent status code which indicates the delivery status of the message to that recipient.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.OriginalRecipient">
            <summary>
            Indicates the original recipient address as specified by the sender of the message for which the DSN is being issued.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.FinalRecipient">
            <summary>
            Indicates the recipient for which this set of per-recipient fields applies.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.RecipientDeliveryStatusNotification.Item(System.String)">
            <summary>
            Gets any field defined in Delivery Status Notification (DSN) for this recipient.
            </summary>
            <param name="name">Field name.</param>
            <returns>Field value</returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeFactory">
            <summary>
            Factory class used to create  MIME entities.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.Split(System.Byte[],System.String@,System.Byte[]@)">
            <summary>
            Splits raw eml data in to MIME headers and MIME body.
            </summary>
            <param name="eml">Raw eml data.</param>
            <param name="headers">MIME headers.</param>
            <param name="body">MIME body.</param>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateFromFile(System.String)">
            <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeData"/> object (or derived object such as <see cref="T:Limilabs.Mail.MIME.MimeText"/> based on the file extension).
            Uploads data from specified file into newly created object.
            </summary>
            <param name="path">The file to read data from.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeData"/> object loaded from file.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText">
            <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeText"/> object using UTF8 encoding (<see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain"/>).
            </summary>
            <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeText"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText(System.String)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeText"/> object using UTF8 encoding and specified text (<see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain"/>).
            </summary>
            <param name="text">Text to fill new object with.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeText"/> object containing specified text.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeCalendar">
            <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeCalendar"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.TextCalendar"/>).
            </summary>
            <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeCalendar"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeCalendar(Limilabs.Mail.Appointments.Appointment)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeCalendar"/> object containing specified appointment (<see cref="F:Limilabs.Mail.Headers.ContentType.TextCalendar"/>).
            </summary>
            <param name="appointment">Appointment card to fill the new object with.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeCalendar"/> object containing specified appointment.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeVCard">
            <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeVCard"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.TextVCard"/>).
            </summary>
            <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeVCard"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeVCard(Limilabs.Mail.BusinessCard.VCard)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeVCard"/> object containing specified business card (<see cref="F:Limilabs.Mail.Headers.ContentType.TextVCard"/>).
            </summary>
            <param name="vCard">Business card to fill the new object with.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeVCard"/> object containing specified business card.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMessagePartial">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeMessagePartial"/> object representing message/partial message (<see cref="F:Limilabs.Mail.Headers.ContentType.MessagePartial"/>). 
            </summary>
            <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeMessagePartial"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeRfc822"/> object representing RFC822 message (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822"/>). 
            </summary>
            <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeRfc822"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822(Limilabs.Mail.IMail)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeRfc822"/> object representing RFC822 message (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822"/>). 
            </summary>
            <param name="email">Message to fill the new object with.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeRfc822"/> object containing specified message.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822Headers">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeRfc822"/> object representing RFC822 message headers (<see cref="F:Limilabs.Mail.Headers.ContentType.TextRfc822Headers"/>). 
            </summary>
            <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeRfc822Headers"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRfc822Headers(Limilabs.Mail.IMail)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeRfc822Headers"/> object representing RFC822 message headers (<see cref="F:Limilabs.Mail.Headers.ContentType.TextRfc822Headers"/>). 
            </summary>
            <param name="email">Message to fill the new object with.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeRfc822"/> object containing specified message.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMessageGlobal">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeMessageGlobal"/> object representing RFC822 message (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobal"/>). 
            </summary>
            <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeMessageGlobal"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMessageGlobal(Limilabs.Mail.IMail)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeMessageGlobal"/> object representing RFC822 message (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobal"/>). 
            </summary>
            <param name="email">Message to fill the new object with.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeMessageGlobal"/> object containing specified message.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMessageGlobalHeaders">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeMessageGlobalHeaders"/> object representing RFC822 message headers (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobalHeaders"/>). 
            </summary>
            <returns>New empty <see cref="T:Limilabs.Mail.MIME.MimeMessageGlobal"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMessageGlobalHeaders(Limilabs.Mail.IMail)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeMessageGlobalHeaders"/> object representing RFC822 message headers (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobalHeaders"/>). 
            </summary>
            <param name="email">Message to fill the new object with.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeMessageGlobalHeaders"/> object containing specified message.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData">
            <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeData"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationOctetStream"/>).
            </summary>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeData"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData(System.Byte[])">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeData"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationOctetStream"/>).
            </summary>
            <param name="data">Data to be placed in newly created object.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeData"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMultipart(Limilabs.Mail.Headers.ContentType)">
            <summary>
            Creates geenric empty <see cref="T:Limilabs.Mail.MIME.MimeMultipart"/> object.
            </summary>
            <param name="contentType">Content-Type of the created entity.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeMixed"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeMixed(Limilabs.Mail.MIME.MimeBase)">
            <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeMixed"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartMixed"/>).
            </summary>
            <param name="root">Root object.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeMixed"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeRelated(Limilabs.Mail.MIME.MimeBase)">
            <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeRelated"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartRelated"/>).
            </summary>
            <param name="root">Root object.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeRelated"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeAlternative">
            <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeAlternative"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartAlternative"/>).
            </summary>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeAlternative"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeAlternative(System.Collections.Generic.List{Limilabs.Mail.MIME.MimeBase})">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeAlternative"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartAlternative"/>) with specified parts.
            </summary>
            <param name="parts">Alternative objects.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeAlternative"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeReport">
            <summary>
            Creates new empty <see cref="T:Limilabs.Mail.MIME.MimeReport"/> object with (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartReport"/>).
            </summary>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeReport"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateManualDispositionNotification(Limilabs.Mail.Headers.DispositonType)">
            <summary>
            Creates new manual <see cref="T:Limilabs.Mail.MIME.MimeMessageDispositionNotification"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageDispositionNotification"/>).
            </summary>
            <param name="dispositon">Disposition type.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeReport"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateAutomaticDispositionNotification(Limilabs.Mail.Headers.DispositonType)">
            <summary>
            Creates new automatic <see cref="T:Limilabs.Mail.MIME.MimeMessageDispositionNotification"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageDispositionNotification"/>).
            </summary>
            <param name="dispositon">Disposition type.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeReport"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeSigned(Limilabs.Mail.MIME.MimeBase,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeSigned"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartSigned"/>).
            </summary>
            <param name="root">Root of the mime tree to sign.</param>
            <param name="certificate">Certificate used for signing.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeSigned"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeSigned(Limilabs.Mail.MIME.MimeBase,Limilabs.Mail.SignatureConfiguration)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimeSigned"/> object (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartSigned"/>).
            </summary>
            <param name="root">Root of the mime tree to sign.</param>
            <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimeSigned"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeFactory.CreatePkcs7Signature(System.Byte[])">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MIME.MimePkcs7Signature"/> object representing pkcs7 detached signature (<see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationXPkcs7Signature"/>).
            </summary>
            <param name="pkcs7SignatureData">Signature data.</param>
            <returns>New <see cref="T:Limilabs.Mail.MIME.MimePkcs7Signature"/> object.</returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimePkcs7Signature">
            <summary>
            Represents Pkcs7-signature.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeCalendar">
            <summary>
            Represents MIME entity containing text/calendar data.
            Please use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeCalendar"/> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeCalendar(Limilabs.Mail.Appointments.Appointment)"/> methods to create objects of this type.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeCalendar.Appointment">
            <summary>
            Gets or sets the appointment contained in this MIME entity.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeCalendar.SafeFileName">
            <summary>
            Gets suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName"/> is false),
            tries to use <see cref="P:Limilabs.Mail.Appointments.Event.Summary"/> to create a file name or generates a random file name in format "appointment.ics".
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeCalendar.ContentTypeMethod">
            <summary>
            Gets or sets content type method.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeCalendar.LoadFromFile(System.String)">
            <summary>
            Uploads data from specified file into this <see cref="T:Limilabs.Mail.MIME.MimeCalendar"/> entity.
            This method always resets <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> and <see cref="P:Limilabs.Mail.MIME.MimeCalendar.ContentTypeMethod"/> properties.
            </summary>
            <param name="path">The file to read data from.</param>
        </member>
        <member name="M:Limilabs.Mail.MIME.SignatureVerifier.CheckSigners(Limilabs.Mail.SignatureValidationConfiguration,System.Collections.Generic.List{System.String})">
            <summary>
            Checks if the content was signed by all persons that sent it.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.SignatureVerifier.CheckSigner(Limilabs.Mail.SignatureValidationConfiguration,System.String)">
            <summary>
            Checks if the content was signed by the person that sent it.
            </summary>
            <exception cref="T:Limilabs.Mail.SignatureException"><paramref name="fromAddress"/> is not in the signers list.</exception>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeReport">
            <summary>
            Represents 'Multipart/Report' MIME, entity e.g. multiple mail messages.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeReport.ReportType">
            <summary>
            Gets or sets the type of the report.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeReport.Description">
            <summary>
            Gets the human readable description of error. It may be in any MIME standards-track content-type, charset, or language.
            Where a description of the error is desired in several languages or several media, 
            a Multipart/Alternative construct may be used. (<a href="https://www.limilabs.com/mail/rfc/3462">RFC 3462</a>)
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeReport.DeliveryStatusNotification">
            <summary>
            Gets DSNs return indications of message delivery to the sender of that message.
            This property is filled when <see cref="P:Limilabs.Mail.MIME.MimeReport.ReportType"/> is <see cref="F:Limilabs.Mail.Headers.MimeReportType.DeliveryStatus"/>
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeReport.MessageDispositionNotification">
            <summary>
            Gets MDNs provide a notification of the "disposition" of a message - indicating, for example, whether it is read by a recipient, discarded before being read, etc.
            This property is filled when <see cref="P:Limilabs.Mail.MIME.MimeReport.ReportType"/> is <see cref="F:Limilabs.Mail.Headers.MimeReportType.DispositionNotification"/>
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeReport.GetMail">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> object from <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822"/> or <see cref="F:Limilabs.Mail.Headers.ContentType.TextRfc822Headers"/> type in <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Parts"/> collection.
            </summary>
            <returns>
            New <see cref="T:Limilabs.Mail.IMail"/> object or <c>null</c> if there was no attached email message.
            </returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeDigest">
            <summary>
            Implements 'multipart/digest' MIME entity, e.g. multiple email messages (<a href="https://www.limilabs.com/mail/rfc/2046">RFC 2046</a>).
            
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeDigest.ParseBody(Limilabs.Infrastructure.DataPart)">
            <summary>
            Sets default Content-Type for each part to "message/rfc822".
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeDigest.GetMail(System.Int32)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> object from specified part in <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Parts"/> collection.
            If <see cref="P:Limilabs.Mail.MIME.MimeBase.ContentType"/> for specified part is different than <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822"/> returns null.
            </summary>
            <param name="index">Part index in <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Parts"/> collection.</param>
            <returns>
            New <see cref="T:Limilabs.Mail.IMail"/> object or null if specified part is not is different than <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822"/>, <see cref="F:Limilabs.Mail.Headers.ContentType.TextRfc822Headers"/>, <see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobal"/> or <see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobalHeaders"/>.
            </returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeRelated">
            <summary>
            Represents 'multipart/related' MIME entity, e.g. HTML e-mail with embedded pictures. (<a href="https://www.limilabs.com/mail/rfc/2387">RFC 2387</a>).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeRelated.Root">
             <summary>
             Root mime object. This element should be processed first.
             <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Parts"/> collection contains this element.
             </summary>
             <remarks>
             E.g. if E-mail is HTML e-mail with embedded pictures, root will contain html body. All images will be placed in the 'parts' collection.
            </remarks>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeAlternative">
            <summary>
            Implements 'multipart/alternative' MIME entity, e.g. email message containing both: 'text/html' and 'text/plain' representations of the same information.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeAlternative.GetSimplestData">
            <summary>
            Gets the simplest data representation (first).
            </summary>
            <returns>'parts[0]' or <c>null</c> if 'parts.Count==0'.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeAlternative.GetBestData">
            <summary>
            Gets the most complicated data representation (last).
            </summary>
            <returns>'Parts[Parts.Count-1]' or <c>null</c> if 'parts.Count==0'.</returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeText">
            <summary>
            Represents MIME entity containing text data.
            You can use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText"/> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText(System.String)"/> to create objects of this type.
            </summary>
            <remarks>
            You should use <see cref="T:Limilabs.Mail.MIME.MimeData"/> when attaching binary files.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeText.Text">
            <summary>
            Gets or sets text data contained in this Mime object.
            Encoding is changed to UTF8 when setting.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeText.CharsetMatch">
            <summary>
            Gets the result of matching content-type charset to <see cref="P:Limilabs.Mail.MIME.MimeText.Encoding"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeText.Encoding">
            <summary>
            Gets or sets encoding used to encode text contained in this MIME entity.
            When setting this property, <see cref="P:Limilabs.Mail.MIME.MimeData.Data"/> property is re-set with value representing <see cref="P:Limilabs.Mail.MIME.MimeText.Text"/> in new encoding.
            </summary>
            <remarks>
            Encoding is stored as a charset field in content-type header. Default is system's default.
            </remarks>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeBase">
            <summary>
            Implements basic mime entity logic. All MIME classes, created by <see cref="T:Limilabs.Mail.MIME.MimeFactory"/> inherit from this class.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeBase.ContentType">
            <summary>
            Content type of the body.
            </summary>
            <remarks>
            <see cref="F:Limilabs.Mail.Headers.ContentType.TextPlain"/> is assumed when <see cref="P:Limilabs.Mail.MIME.MimeBase.HasContentType"/> is false.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeBase.HasContentType">
            <summary>
            Gets boolean value indicating, if content-type is explicitly set on this entity.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeBase.ContentTypeHeader">
            <summary>
            Represents 'Content-type' header.
            You can use this class to add additional options to content-type header.
            Use <see cref="P:Limilabs.Mail.MIME.MimeBase.ContentType" /> to get or set content-type only.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeBase.ContentLocation">
            <summary>
            Content location of this mime entity.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeBase.ContentId">
            <summary>
            Content-ID of this entity. Without enclosing '&lt;' and '&gt;'.
            You can use <see cref="T:Limilabs.Mail.Headers.ContentIdHelper"/> to extract content id from cid url.
            </summary>
            <remarks>E.g. 01@mobile</remarks>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeBase.ContentDisposition">
            <summary>
            'Content-Disposition' of the data.
            This object provides information on what you should do with the data.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeBase.Headers">
            <summary>
            MIME headers collection.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeBase.Render(System.IO.Stream)">
            <summary>
            Renders this MIME object.
            </summary>
            <param name="stream">Stream to render on.</param>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeBase.EstimateTransportSize">
            <summary>
            Gets the estimated transport size of this MIME entity.
            </summary>
            <returns>Estimated transport size of this MIME entity.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeBase.ToString">
            <summary>
            Returns content-type of this MIME object.
            </summary>
            <returns>Content-type of this MIME object (e.g. "text/plain").</returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeData">
            <summary>
            Represents MIME entity which contains raw byte data.
            You can use <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData"/> or <see cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData(System.Byte[])"/> to create objects of this type.
            </summary>
            <remarks>
            You should use <see cref="T:Limilabs.Mail.MIME.MimeText"/> when attaching text files.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.Data">
            <summary>
            Gets or sets byte array contained in this MIME object.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.Size">
            <summary>
            Gets size of data contained in this MIME object.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.FileName">
            <summary>
            Gets or sets suggested file name (<see cref="P:Limilabs.Mail.Headers.IContentDisposition.FileName"/> or <see cref="T:Limilabs.Mail.Headers.IContentTypeHeader"/>["name"]).
            May be <c>null</c> or empty. Consider using <see cref="P:Limilabs.Mail.MIME.MimeData.SafeFileName"/> as it is guaranteed to contain valid file name.
            </summary>
            <remarks>
              It is important that you should not blindly use the suggested filename.  
              The suggested filename SHOULD be checked (and possibly changed) to see that it conforms to local file system conventions,
              does not overwrite an existing file, and does not present a security problem.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.HasFileName">
            <summary>
            Gets a boolean value indicating if <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> is set.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.SafeFileName">
            <summary>
            Gets suggested file name. All special characters and path are removed.
            If the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> is not specified (<see cref="P:Limilabs.Mail.MIME.MimeData.HasFileName"/> is false) 
            generates random file name in format "att_d1be267b623941159a159158138a636e" and uses <see cref="T:Limilabs.Mail.Headers.ContentType"/> to establish correct extension.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.ContentTransferEncoding">
            <summary>
            Gets or sets 'Content-Transfer-Encoding' of the data.
            This object provides information on how the data was encoded for transport purposes.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.XTnef2MimeRenderingPosition">
            <summary>
            Gets X-Tnef2Mime-RenderingPosition header value. 
            This header is filled by TNEF to MIME parser with PR_RENDERING_POSITION MAPI value.
            It indicates where in the message text the attachment should be rendered (in characters).
            </summary>
            <remarks>
            This property should not be used with Rich Text Format (RTF) text. 
            The rendering position is indicated in RTF by an escape sequence called the object attachment placeholder. 
            This sequence consists of the string \objattph followed by a single character, normally a space, that will be replaced by the attachment rendering.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.XRtfRenderingPosition">
            <summary>
            Gets X-Rtf-RenderingPosition header value. 
            This header is filled by TNEF to MIME with PR_RENDERING_POSITION MAPI value or by MSG to MIME parser.
            It indicates where in the message text the attachment should be rendered (in characters).
            </summary>
            <remarks>
            This property should not be used with Rich Text Format (RTF) text. 
            The rendering position is indicated in RTF by an escape sequence called the object attachment placeholder. 
            This sequence consists of the string \objattph followed by a single character, normally a space, that will be replaced by the attachment rendering.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.XTnef2Mime">
            <summary>
            Gets X-Tnef2Mime header value. This header is added by TNEF to MIME parser.
            True means that this entity was extracted from <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationMsTnef"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.XUue2Mime">
            <summary>
            Gets X-Uue2Mime header value. This header is added by UUE to MIME extractor.
            True means that this entity was extracted from <see cref="P:Limilabs.Mail.IMail.Text"/>.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.ProcessUueAutomatically"/>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.XBinHex2Mime">
            <summary>
            Gets X-BinHex2Mime header value. This header is added by BinHex to MIME extractor.
            True means that this entity was extracted from <see cref="T:Limilabs.Mail.MIME.MimeBinHex"/>.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.ProcessBinHexAutomatically"/>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeData.XApple2Mime">
            <summary>
            Gets X-Apple2Mime header value. This header is added by Apple to MIME extractor.
            True means that this entity was extracted from <see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationAppleFile"/> or <see cref="F:Limilabs.Mail.Headers.ContentType.MultipartAppleDouble"/> entity.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.ProcessAppleAutomatically"/>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeData.EstimateTransportSize">
            <returns>Estimated transport size of this MIEM entity</returns>
            <summary>
            Gets the estimated transport size of this MIME entity.
            Bases on assumption that <see cref="F:Limilabs.Mail.Headers.MimeEncoding.Base64"/>, <see cref="F:Limilabs.Mail.Headers.MimeEncoding.UUE"/> and <see cref="F:Limilabs.Mail.Headers.MimeEncoding.XUUE"/> encoded files are 37% bigger in transport.
            </summary>
            <returns>Estimated transport size of this MIME entity.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeData.ParseBody(Limilabs.Infrastructure.DataPart)">
            <summary>
            Parses the body.
            </summary>
            <param name="body">Body to be parsed.</param>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeData.LoadFromFile(System.String)">
            <summary>
            Uploads data from specified file into this <see cref="T:Limilabs.Mail.MIME.MimeData"/> entity.
            This method always resets <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> property.
            </summary>
            <param name="path">The file to read data from.</param>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeData.Save(System.String)">
            <summary>
            Creates a new file with the specified name and saves <see cref="P:Limilabs.Mail.MIME.MimeData.Data"/> into it.
            </summary>
            <param name="path">The path and the name of the file to create.</param>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeData.Save(System.IO.Stream)">
            <summary>
            Writes <see cref="P:Limilabs.Mail.MIME.MimeData.Data"/> to specified stream. Stream must be open.
            </summary>
            <param name="stream">Stream to which <see cref="P:Limilabs.Mail.MIME.MimeData.Data"/> will be written.</param>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeData.GetMemoryStream">
            <summary>
            Creates new <see cref="T:System.IO.MemoryStream"/> for accessing <see cref="P:Limilabs.Mail.MIME.MimeData.Data"/> property.
            </summary>
            <returns>New <see cref="T:System.IO.MemoryStream"/> Object</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeData.SetFileName(System.String,System.Boolean)">
            <summary>
            Sets the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> and <see cref="P:Limilabs.Mail.MIME.MimeBase.ContentType"/> value if requested.
            </summary>
            <param name="fileName">Suggested file name.</param>
            <param name="guessContentType">True if <see cref="P:Limilabs.Mail.MIME.MimeBase.ContentType"/> should be set based on the file name extension.</param>
            <returns>Newly added attachment.</returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeMultipart">
            <summary>
            Base class for all multipart MIME entities ('multipart/*').
            </summary>
            <remarks>
            There are specialized classes for different multipart subtypes which derive from this class such as: <see cref="T:Limilabs.Mail.MIME.MimeAlternative"/>, <see cref="T:Limilabs.Mail.MIME.MimeRelated"/> or <see cref="T:Limilabs.Mail.MIME.MimeSigned"/>.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMultipart.Preamble">
            <summary>
            Gets or sets MIME multipart preamble. By default this value is null.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMultipart.Epilogue">
            <summary>
            Gets or sets MIME multipart preamble. By default this value is an empty string.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMultipart.Parts">
            <summary>
            Parts of the entity. 
            MIME parts inside multipart entity are separated by <see cref="P:Limilabs.Mail.MIME.MimeMultipart.Boundary"/> delimiter.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MIME.MimeMultipart.Boundary">
            <summary>
            Boundary delimiter. String which is separating parts of the multipart entity.
            Without additional '--' at the beginning. 
            E.g. '=_NextPart_000_0020_01C36F64.F2562350'.
            </summary>
            <remarks>
            <a href="https://www.limilabs.com/mail/rfc/2046">RFC 2046</a>: The "multipart" boundary delimiters and header fields are always represented as 7bit US-ASCII in any case.
            </remarks>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeMultipart.EstimateTransportSize">
            <summary>
            Gets the estimated transport size of this MIME entity.
            </summary>
            <returns>Estimated transport size of this MIME entity.</returns>
        </member>
        <member name="T:Limilabs.Mail.MIME.MimeSigned">
            <summary>
            Represents 'Multipart/Signed' MIME entity. 
            You can sign email messages using <see cref="M:Limilabs.Mail.MailBuilder.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)"/> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)"/> methods.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeSigned.GetSignedCms">
            <summary>
            Gets the SignedCms instance stored in this container
            </summary>
            <returns>SignedCms instance.</returns>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeSigned.CheckSignature(System.Boolean)">
            <summary>
            Verifies the digital signatures on the signed CMS/PKCS #7 message and, optionally, validates the signers' certificates.
            </summary>
            <param name="verifySignatureOnly">
            <paramref name="verifySignatureOnly"/>: A System.Boolean value that specifies whether only the digital signatures are verified 
            without the signers' certificates being validated. 
            If <paramref name="verifySignatureOnly"/> is <c>true</c>, only the digital signatures are verified. 
            If it is <c>false</c>, the digital signatures are verified, the signers' certificates are validated, 
            and the purposes of the certificates are validated. 
            The purposes of a certificate are considered valid if the certificate has no key usage or 
            if the key usage supports digital signatures or non-repudiation.
            </param>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeSigned.SetPlainDataAndSign(Limilabs.Mail.MIME.MimeBase,Limilabs.Mail.SignatureConfiguration)">
            <summary>
            Sets plain MIME entity and signs it using specified parameters.
            </summary>
            <param name="root">Plain MIME entity.</param>
            <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
        </member>
        <member name="M:Limilabs.Mail.MIME.MimeSigned.ReSignWith(Limilabs.Mail.SignatureConfiguration)">
            <summary>
            Computes the signature again.
            </summary>
            <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
        </member>
        <member name="P:Limilabs.Mail.MSG.IpmContact.Headers">
            <summary>
            The PR_TRANSPORT_MESSAGE_HEADERS property of a real MIME message contains the complete MIME structure of the message with none of the actual content.
            (Eg, all of the RFC822 and MIME headers, plus multipart boundary delimeters.)
            -or-
            Only headers
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MSG.Msg2IMailConfiguration">
            <summary>
            Represents <see cref="T:Limilabs.Mail.MSG.MsgConverter"/> settings for msg to <see cref="T:Limilabs.Mail.IMail"/> conversion.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MSG.Msg2IMailConfiguration.IgnoreHeaders">
            <summary>
            Gets or sets the value indicating if MSG headers should be copied to resulting email. Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MSG.Msg2IMailConfiguration.CreatePlainTextAutomatically">
            <summary>
            Gets or sets the value indicating if plain text should be created from HTML and/or RTF content. Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MSG.Msg2IMailConfiguration.SMIMEConfiguration">
            <summary>
            Gets or sets S/MIME decrypt configuration (automatic decryption, certificates used for decryption).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MSG.Msg2IMailConfiguration.#ctor">
            <summary>
            Creates new instance of Msg2MimeConverterConfiguration.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MSG.MsgConverter">
            <summary>
            Outlook .msg file format converter.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MSG.MsgConverter.Type">
            <summary>
            Gets the type of the contents of the MSG file (e.g. <see cref="F:Limilabs.Mail.MSG.MsgType.Contact"/>, <see cref="F:Limilabs.Mail.MSG.MsgType.Note"/>).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MSG.MsgConverter.IsMessage">
            <summary>
            Gets the value indicating if the MSG file type represents a message, and if <see cref="M:Limilabs.Mail.MSG.MsgConverter.CreateMessage"/> can be used.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MSG.MsgConverter.#ctor(System.String)">
            <summary>
            Creates new instance of this class.
            </summary>
            <param name="fileName">File name to load data from.</param>
        </member>
        <member name="M:Limilabs.Mail.MSG.MsgConverter.#ctor(System.IO.Stream)">
            <summary>
            Creates new instance of this class.
            </summary>
            <param name="stream">Stream to load data from.</param>
        </member>
        <member name="M:Limilabs.Mail.MSG.MsgConverter.CreateMessage">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> object from MSG data. 
            </summary>
            <exception cref="T:System.Exception"><see cref="P:Limilabs.Mail.MSG.MsgConverter.Type"/> property doesn't equal <see cref="F:Limilabs.Mail.MSG.MsgType.Note"/>.</exception>
            <returns>Newly created email message in MIME format.</returns>
        </member>
        <member name="M:Limilabs.Mail.MSG.MsgConverter.CreateMessage(Limilabs.Mail.MSG.Msg2IMailConfiguration)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> object from MSG data. 
            </summary>        
            <exception cref="T:System.Exception"><see cref="P:Limilabs.Mail.MSG.MsgConverter.Type"/> property doesn't equal <see cref="F:Limilabs.Mail.MSG.MsgType.Note"/>.</exception>
            <param name="configuration">Msg to MIME configuration settings.</param>
            <returns>Newly created email message in MIME format.</returns>
        </member>
        <member name="M:Limilabs.Mail.MSG.MsgConverter.CreateVCard">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.BusinessCard.VCard"/> object from MSG data.
            </summary>
            <returns>Newly created email message in iCal format.</returns>
        </member>
        <member name="M:Limilabs.Mail.MSG.MsgConverter.CreateAppointment">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.Appointments.Appointment"/> object from MSG data.
            </summary>
            <returns>Newly created appointment iCal format.</returns>
        </member>
        <member name="M:Limilabs.Mail.MSG.MsgConverter.Dispose">
            <summary>
            Releases all resources acquired by this object.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MSG.MsgType">
            <summary>
            Represents MSG file content type, such as <see cref="F:Limilabs.Mail.MSG.MsgType.Contact"/>, <see cref="F:Limilabs.Mail.MSG.MsgType.Post"/>, <see cref="F:Limilabs.Mail.MSG.MsgType.StickyNote"/>, <see cref="F:Limilabs.Mail.MSG.MsgType.Note"/>.
            </summary>
            <seealso cref="P:Limilabs.Mail.MSG.MsgConverter.Type"/>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.Note">
            <summary>
            Gets IPM.Note message type (email message).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.NoteSMIMEMultipartSigned">
            <summary>
            Gets IPM.Note.SMIME.MultipartSigned message type (signed email message).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.NoteSMIME">
            <summary>
            Gets IPM.Note.SMIME message type (signed email message).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ScheduleMeetingRequest">
            <summary>
            Gets IPM.Schedule.Meeting.Request message type (meeting request).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ScheduleMeetingResponseNegative">
            <summary>
            Gets IPM.Schedule.Meeting.Resp.Neg message type (negative meeting response).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ScheduleMeetingResponsePositive">
            <summary>
            Gets IPM.Schedule.Meeting.Resp.Pos message type (positive meeting response).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ScheduleMeetingResponseTentative">
            <summary>
            Gets IPM.Schedule.Meeting.Resp.Tent message type (tentative meeting response).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ScheduleMeetingCanceled">
            <summary>
            Gets IPM.Schedule.Meeting.Canceled message type (canceled meeting response).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ScheduleMeetingNotification">
            <summary>
            Gets IPM.Schedule.Meeting.Notification message type (meeting notification).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ScheduleMeetingNotificationForward">
            <summary>
            Gets IPM.Schedule.Meeting.Notification.Forward message type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ReportDR">
            <summary>
            Gets REPORT.IPM.Note.DR message type (tentative meeting response).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ReportNDR">
            <summary>
            Gets REPORT.IPM.Note.NDR message type (tentative meeting response).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.ReportDelayedDR">
            <summary>
            Gets REPORT.IPM.Note.Delayed.DR message type (tentative meeting response).
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.Sharing">
            <summary>
            Gets IPM.Sharing message type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.Contact">
            <summary>
            Gets IPM.Contact message type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.Post">
            <summary>
            Gets IPM.Post message type.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.MSG.MsgType.StickyNote">
            <summary>
            Gets IPM.StickyNote message type.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MSG.IpmNote.Headers">
            <summary>
            The PR_TRANSPORT_MESSAGE_HEADERS property of a real MIME message contains the complete MIME structure of the message with none of the actual content.
            (Eg, all of the RFC822 and MIME headers, plus multipart boundary delimeters.)
            -or-
            Only headers
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Rtf.Interpreter.Model.RtfTextFormat.SuperScript">
            <summary>
            Combines the setting for sub/super script: negative values are considered  equivalent to subscript, 
            positive values correspond to superscript. Same unit as font size.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Rtf.Interpreter.RtfInterpreterException">
            <summary>Thrown upon RTF specific error conditions.</summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Interpreter.RtfInterpreterException.#ctor">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Interpreter.RtfInterpreterException.#ctor(System.String)">
            <summary>Creates a new instance with the given message.</summary>
            <param name="message">the message to display</param>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Interpreter.RtfInterpreterException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance with the given message, based on the given cause.</summary>
            <param name="message">the message to display</param>
            <param name="cause">the original cause for this exception</param>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.Listeners.IRtfParserListener.ParseBegin">
            <summary>
            Called before any other of the methods upon starting parsing of new input.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.Listeners.IRtfParserListener.GroupBegin">
            <summary>
            Called when a new group began.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.Listeners.IRtfParserListener.TagFound(Limilabs.Mail.Rtf.Parser.Model.RtfTag)">
            <summary>
            Called when a new tag was found.
            </summary>
            <param name="tag">the newly found tag</param>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.Listeners.IRtfParserListener.TextFound(Limilabs.Mail.Rtf.Parser.Model.RtfText)">
            <summary>
            Called when a new text was found.
            </summary>
            <param name="text">the newly found text</param>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.Listeners.IRtfParserListener.GroupEnd">
            <summary>
            Called after a group ended.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.Listeners.IRtfParserListener.ParseSuccess">
            <summary>
            Called if parsing finished sucessfully.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.Listeners.IRtfParserListener.ParseFail(Limilabs.Mail.Rtf.RtfException)">
            <summary>
            Called if parsing failed.
            </summary>
            <param name="reason">the reason for the failure</param>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.Listeners.IRtfParserListener.ParseEnd">
            <summary>
            Called after parsing finished. Always called, also in case of a failure.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Rtf.Parser.RtfParserException">
            <summary>Thrown upon RTF specific error conditions.</summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.RtfParserException.#ctor">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.RtfParserException.#ctor(System.String)">
            <summary>Creates a new instance with the given message.</summary>
            <param name="message">the message to display</param>
        </member>
        <member name="M:Limilabs.Mail.Rtf.Parser.RtfParserException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance with the given message, based on the given cause.</summary>
            <param name="message">the message to display</param>
            <param name="cause">the original cause for this exception</param>
        </member>
        <member name="P:Limilabs.Mail.Rtf.Parser.RtfParserSettings.IgnoreContentAfterRootGroup">
            <summary>
            Determines whether to ignore all content after the root group ends.
            Set this to true when parsing content from streams which contain other data after the RTF 
            or if the writer of the RTF is known to terminate the actual RTF content with a null byte 
            (as some popular sources such as WordPad are known to behave).
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Rtf.RtfException">
            <summary>Thrown upon RTF specific error conditions.</summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.RtfException.#ctor">
            <summary>Creates a new instance.</summary>
        </member>
        <member name="M:Limilabs.Mail.Rtf.RtfException.#ctor(System.String)">
            <summary>Creates a new instance with the given message.</summary>
            <param name="message">the message to display</param>
        </member>
        <member name="M:Limilabs.Mail.Rtf.RtfException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance with the given message, based on the given cause.</summary>
            <param name="message">the message to display</param>
            <param name="cause">the original cause for this exception</param>
        </member>
        <member name="T:Limilabs.Mail.SignatureValidationConfiguration">
            <summary>
            Represents S/MIME (Secure/Multipurpose Internet Mail Extensions) signature validation configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SignatureValidationConfiguration.VerifySignatureOnly">
            <summary>
            Gets or sets a Boolean value that specifies whether only the digital signatures are verified without the signers' certificates being validated. 
            If set to <c>true</c>, only the digital signatures are verified. 
            If set to <c>false</c>, the digital signatures are verified, the signers' certificates are validated, and the purposes of the certificates are validated. 
            The purposes of a certificate are considered valid if the certificate has no key usage or if the key usage supports digital signatures or non repudiation.
            Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SignatureValidationConfiguration.SkipSignerCheck">
            <summary>
            Gets or sets a Boolean value that specifies whether to check if an email was signed by the person that sent it.
            Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SignatureValidationConfiguration.AddressComparisionMode">
            <summary>
            Gets or sets a Boolean value that specifies a way in which <see cref="P:Limilabs.Mail.IMail.From"/> and signature addresses are compared. 
            Default is <see cref="F:Limilabs.Mail.Headers.AddressComparisionMode.CaseSensitive"/>.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tnef.RtfDecompressor.ReadHeader">
            <summary>
            Reads header and validates checksum.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tnef.TnefMessage.MessageClass">
            <summary>
            IPM.Note
            Report.IPM.Note.IPNRN
            Report.IPM.Note.NDR
            IPM.Schedule.Meeting.Resp.Pos      Responses to accept meeting requests
            IPM.Schedule.Meeting.Resp.Neg      Responses to decline meeting requests
            IPM.Schedule.Meeting.Resp.Tent     Responses to tentatively accept meeting requests
            IPM.Schedule.Meeting.Request       Meeting requests
            IPM.Schedule.Meeting.Canceled      Meeting cancellations
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.BounceValidation.Text.ReadLinesUntil(System.String)">
            <summary>
            Both \r\n and \n line endings are recognized.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Tools.VERPAddress">
            <summary>
            Represents Variable Envelope Return Path (VERP) address (e.g. "list-owner+bob=recipient.com@sender.com").
            You can use <see cref="M:Limilabs.Mail.Tools.VERPAddress.Join"/> method to create VERP email address or <see cref="M:Limilabs.Mail.Tools.VERPAddress.Parse(System.String)"/> method to parse existing one.
            </summary>
            <seealso cref="M:Limilabs.Client.SMTP.SmtpMail.CreateUsingVERP(Limilabs.Mail.IMail)"/>
        </member>
        <member name="P:Limilabs.Mail.Tools.VERPAddress.ToAddress">
            <summary>
            Gets original email To address (e.g. "bob@recipient.com").
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.VERPAddress.FromAddress">
            <summary>
            Gets original email From address (e.g. "list-owner@sender.com").
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.VERPAddress.#ctor(System.String,System.String)">
            <summary>
            Creates new VERPAddress class instance.
            </summary>
            <param name="toAddress">Original email to address (e.g. "bob@recipient.com").</param>
            <param name="fromAddress">Original email from address (e.g. "list-owner@sender.com").</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.VERPAddress.Parse(System.String)">
            <summary>
            Parses existing VERP address (e.g. "list-owner+bob=recipient.com@sender.com").
            </summary>
            <param name="verpAddress">VERP address to parse (e.g. "list-owner+bob=recipient.com@sender.com").</param>
            <returns>New VERPAddress class instance with <see cref="P:Limilabs.Mail.Tools.VERPAddress.ToAddress"/> and <see cref="P:Limilabs.Mail.Tools.VERPAddress.FromAddress"/> properties set ("bob@recipient.com" and "list-owner@sender.com" accordingly).</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.VERPAddress.Join">
            <summary>
            Joins <see cref="P:Limilabs.Mail.Tools.VERPAddress.FromAddress"/> and <see cref="P:Limilabs.Mail.Tools.VERPAddress.ToAddress"/> to create VERP address (e.g. "list-owner+bob=recipient.com@sender.com").
            </summary>
            <seealso cref="M:Limilabs.Client.SMTP.SmtpMail.CreateUsingVERP(Limilabs.Mail.IMail)"/>
            <returns>Sender address, containing encoded recipient address (e.g. "list-owner+bob=recipient.com@sender.com").</returns>
        </member>
        <member name="T:Limilabs.Mail.Tools.NetMailMessageConverter">
            <summary>
            Converts System.Net.Mail.MailMessage instance to Mail.dll's <see cref="T:Limilabs.Mail.MailBuilder"/> or <see cref="T:Limilabs.Mail.IMail"/> instance.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.NetMailMessageConverter.CreateMailBuilder(System.Net.Mail.MailMessage)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MailBuilder"/> instance from System.Net.Mail.MailMessage.
            </summary>
            <param name="m">System.Net.Mail.MailMessage to process.</param>
            <returns><see cref="T:Limilabs.Mail.MailBuilder"/> instance.</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.NetMailMessageConverter.CreateIMail(System.Net.Mail.MailMessage)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> instance from System.Net.Mail.MailMessage.
            </summary>
            <param name="m">System.Net.Mail.MailMessage to process.</param>
            <returns><see cref="T:Limilabs.Mail.IMail"/> instance.</returns>
        </member>
        <member name="T:Limilabs.Mail.Tools.PartialMailJoiner">
            <summary>
            Represents partial email (<see cref="F:Limilabs.Mail.Headers.ContentType.MessagePartial"/>) joiner. 
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.PartialMailJoiner.IgnoreNumbers">
            <summary>
            Gets or sets the value indicating if the Contant-Type's header field property should be ingored. Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.PartialMailJoiner.IgnoreId">
            <summary>
            Gets or sets the value indicating if the Contant-Type's header id field should be ingored. Default is false.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.PartialMailJoiner.IgnoreFirstMessageHeaders">
            <summary>
            Gets or sets the value indicating if first message headers should be copied to the resulting message. Default is false.
            </summary>
            <remarks>
            (1) All of the header fields from the initial enclosing entity (part one), except those that start with "Content-" and the
            specific header fields "Message-ID", "Encrypted", and "MIME-Version", must be copied, in order, to the new message.
            (2) Only those header fields in the enclosed message which start with "Content-" and "Message-ID", "Encrypted", and "MIME-Version"
            must be appended, in order, to the header fields of the new message.  
            Any header fields in the enclosed message which do not start with "Content-" 
            (except for "Message-ID", "Encrypted", and "MIME-Version") will be ignored.
            (3) All of the header fields from the second and any subsequent messages will be ignored.
            </remarks>
        </member>
        <member name="M:Limilabs.Mail.Tools.PartialMailJoiner.Add(Limilabs.Mail.IMail)">
            <summary>
            Adds email part (<see cref="F:Limilabs.Mail.Headers.ContentType.MessagePartial"/>) to be joined.
            </summary>
            <param name="email">Email representing partial message.</param>
            <returns>True if all parts where added and messages can be joined using <see cref="M:Limilabs.Mail.Tools.PartialMailJoiner.Join"/> method, false otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.PartialMailJoiner.Join">
            <summary>
            Joins split email.
            </summary>
            <returns>Joined message.</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.PartialMailJoiner.JoinData">
            <summary>
            Joins split email.
            </summary>        
            <returns>Raw data of the joined message.</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.PartialMailJoiner.Join(System.Collections.Generic.List{Limilabs.Mail.IMail})">
            <summary>
            Joins split email.
            </summary>
            <param name="emails">Email messages containing MIME parts (<see cref="F:Limilabs.Mail.Headers.ContentType.MessagePartial"/>) to be joined.</param>
            <returns>Joined message.</returns>
        </member>
        <member name="T:Limilabs.Mail.Tools.MBox.MBoxMessage">
            <summary>
            Represents single message stored inside MBox file.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.MBox.MBoxMessage.EnvelopeSender">
            <summary>
            Gets envelope sender stored in MBox file.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.MBox.MBoxMessage.DeliveryDate">
            <summary>
            Gets delivery date stored in MBox file.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.MBox.MBoxMessage.Eml">
            <summary>
            Gets email data.
            </summary>
            <see cref="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.Byte[])"/>
        </member>
        <member name="T:Limilabs.Mail.Tools.MBox.MBoxReader">
            <summary>
            Represents MBox file reader.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.MBox.MBoxReader.#ctor(System.IO.Stream)">
            <summary>
            Creates new MBoxReader.
            </summary>
            <param name="stream">Stream to read from.</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.MBox.MBoxReader.ReadNext">
            <summary>
            Reads next message.
            </summary>
            <returns>Next message or null when no more messages are available.</returns>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.BayesianFilter.SpamBias">
            <summary>
            Gets or sets the overall probability that any given message is spam (Pr(S))
            </summary>
            <remarks>
            Not biased filter assumes 0.5.
            Recent statistics show that the current probability of any message being spam is 80%, at the very least: SpamBias = 0.8; HamBias = 0.2
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.BayesianFilter.HamBias">
            <summary>
            Gets or sets the overall probability that any given message is not spam (is "ham") (Pr(H))
            </summary>
            <remarks>
            Not biased filter assumes 0.5.
            Recent statistics show that the current probability of any message being spam is 80%, at the very least: SpamBias = 0.8; HamBias = 0.2
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.BayesianFilter.SpamThreshold">
            <summary>
            Gets or sets the spam threshold: IsSpam = SpamProbability > SpamThreshold
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Tools.Spam.BayesianMailFilter">
            <summary>
            Represents Bayesian spam filter.
            You can use <see cref="T:Limilabs.Mail.Tools.Spam.SpamFilterTeacher"/> to teach and assess the accuracy of the filter.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.BayesianMailFilter.SpamBias">
            <summary>
            Gets or sets the overall probability that any given message is spam (Pr(S))
            </summary>
            <remarks>
            Not biased filter assumes 0.5. Recent statistics show that the current probability of any message being spam is 80%, at the very least: SpamBias = 0.8; HamBias = 0.2
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.BayesianMailFilter.HamBias">
            <summary>
            Gets or sets the overall probability that any given message is not spam (is "ham") (Pr(H))
            </summary>
            <remarks>
            Not biased filter assumes 0.5. Recent statistics show that the current probability of any message being spam is 80%, at the very least: SpamBias = 0.8; HamBias = 0.2
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.BayesianMailFilter.SpamThreshold">
            <summary>
            Gets or sets the spam threshold: IsSpam = SpamProbability > SpamThreshold
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.LearnSpam(Limilabs.Mail.IMail)">
            <summary>
            Use this method to teach the filter that specified message is spam.
            </summary>
            <param name="email">Spam message</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.LearnHam(Limilabs.Mail.IMail)">
            <summary>
            Use this method to teach the filter that specified message is not spam (is ham).
            </summary>
            <param name="email">Not spam (ham) message</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.Examine(Limilabs.Mail.IMail)">
            <summary>
            Examines specified message checking the probability of the message being spam.
            </summary>
            <param name="email">Message to check.</param>
            <returns>Result including probability of the specified message being spam (between 0.0 and 1.0).</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.Save(System.String)">
            <summary>
            Saves all words used be the filter to specified file.
            </summary>
            <param name="path">The file to save to.</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.BayesianMailFilter.Load(System.String)">
            <summary>
            Loads all words used by the filter from specified file.
            </summary>
            <param name="path">The file to read from.</param>
        </member>
        <member name="T:Limilabs.Mail.Tools.Spam.ISpamFilter">
            <summary>
            Represents a spam filter.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.ISpamFilter.LearnSpam(Limilabs.Mail.IMail)">
            <summary>
            Use this method to teach the filter that specified message is spam.
            </summary>
            <param name="email">Spam message</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.ISpamFilter.LearnHam(Limilabs.Mail.IMail)">
            <summary>
            Use this method to teach the filter that specified message is not spam (is ham).
            </summary>
            <param name="email">Not spam (ham) message</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.ISpamFilter.Examine(Limilabs.Mail.IMail)">
            <summary>
            Examines specified message checking the probability of the message being spam.
            </summary>
            <param name="email">Message to check.</param>
            <returns>Result including probability of the specified message being spam (between 0.0 and 1.0).</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.MailKeywordExtractor.KeywordsFromID(System.String)">
            <param name="id">id@domain.com</param>
        </member>
        <member name="T:Limilabs.Mail.Tools.Spam.SpamFilterTeacher">
            <summary>
            You can use this class to teach spam filter (e.g. <see cref="T:Limilabs.Mail.Tools.Spam.BayesianMailFilter"/>) to recognize which messages are spam and which are not (are ham).
            During learning phase, both spam and not spam (ham) messages' count should be similar (100 or more).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.#ctor(Limilabs.Mail.Tools.Spam.ISpamFilter)">
            <summary>
            Creates new instance of the teacher class to teach specific filter.
            </summary>
            <param name="filter">Spam filter to teach.</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.TeachSpam(System.String)">
            <summary>
            Use this method to teach the filter which messages are spam.
            </summary>
            <param name="path">Path to the folder that contains spam messages.</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.TeachHam(System.String)">
            <summary>
            Use this method to teach the filter which messages are not spam (are ham).
            </summary>
            <param name="path">Path to the folder that contains not spam (ham) messages.</param>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.Test(System.String,System.String)">
            <summary>
            Use this method to test the filter.
            </summary>
            <param name="spamFolder">Path to the folder that contains spam messages to test the filter on.</param>
            <param name="hamFolder">Path to the folder that contains not spam (ham) messages to test to test the filter on.</param>
            <returns>Test results.</returns>
        </member>
        <member name="T:Limilabs.Mail.Tools.Spam.SpamResult">
            <summary>
            Represents result of the email examination performed by <see cref="T:Limilabs.Mail.Tools.Spam.BayesianMailFilter"/> class.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.SpamResult.Probability">
            <summary>
            Gets the probability (from 0.0 to 1.0) that the message is spam.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.SpamResult.IsSpam">
            <summary>
            Gets the value indicating if message is spam.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.SpamResult.IsHam">
            <summary>
            Gets the value indicating if message is ham.
            This property return negation of the <see cref="P:Limilabs.Mail.Tools.Spam.SpamResult.IsSpam"/> property (!IsSpam).
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Tools.Spam.SpamTestResults">
            <summary>
            Represents the result of spam filter test. 
            You can use <see cref="T:Limilabs.Mail.Tools.Spam.SpamFilterTeacher"/> to teach and assess the accuracy of the filter.
            </summary>
            <seealso cref="M:Limilabs.Mail.Tools.Spam.SpamFilterTeacher.Test(System.String,System.String)"/>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.SuccessCount">
            <summary>
            Gets the number of correct recognitions.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.TestsCount">
            <summary>
            Gets the count of all tests.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.FalsePositives">
            <summary>
            Gets file names of false positives (ham messages marked as spam).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.NotMarkedAsSpam">
            <summary>
            Gets file names of the failures (spam messages not marked as spam).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.Spam.SpamTestResults.Accuracy">
            <summary>
            Gets the filter accuracy (<see cref="P:Limilabs.Mail.Tools.Spam.SpamTestResults.SuccessCount"/>/<see cref="P:Limilabs.Mail.Tools.Spam.SpamTestResults.TestsCount"/>)
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.SpamTestResults.#ctor">
            <summary>
            Creates new SpamTestResults object.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.Spam.SpamTestResults.ToString">
            <summary>
            Returns string representing this object
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:Limilabs.Mail.Tools.Bounce">
            <summary>
            Recognizes common patterns of delivery failure emails.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.Bounce.Examine(Limilabs.Mail.IMail)">
            <summary>
            Examines specified email for delivery failure patterns.
            </summary>
            <param name="email">Email to examine.</param>
            <returns>Examination result. Please use <see cref="P:Limilabs.Mail.Tools.BounceResult.IsDeliveryFailure"/> to check if the email is a delivery failure notification.</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.Bounce.ExamineAll(Limilabs.Mail.IMail)">
            <summary>
            Examines specified email for delivery failure patterns.
            </summary>
            <param name="email">Email message to examine.</param>
            <returns>The list of found delivery failures.</returns>
        </member>
        <member name="T:Limilabs.Mail.Tools.BounceResult">
            <summary>
            Represents result of the email examination performed by <see cref="T:Limilabs.Mail.Tools.Bounce"/> class.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.BounceResult.IsDeliveryFailure">
            <summary>
            True if email is a delivery failure or deliver delay report
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.BounceResult.Recipient">
            <summary>
            Indicates the original recipient address as specified by the sender of the message for which the delivery failure report was issued. 
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.BounceResult.Reason">
            <summary>
            For a "failed" or "delayed" recipient, contains the actual diagnostic code issued by the mail transport.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.BounceResult.Action">
            <summary>
            Indicates the action performed as a result of attempt to deliver the message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.BounceResult.Status">
            <summary>
            Contains a transport-independent status code which indicates the delivery status of the message to that recipient.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.BounceResult.#ctor">
            <summary>
            Creates new BounceResult object.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Tools.AddressValidator">
            <summary>
             Validates email address.
             Uses Format, MX and SMTP validation.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.AddressValidator.SmtpConfiguration">
            <summary>
            Gets or sets SMTP configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.AddressValidator.From">
            <summary>
            Gets or sets the value of MAIL FROM address. By default, checked address is used.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.AddressValidator.#ctor">
            <summary>
            Initializes new instance of the AddressValidator class.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.AddressValidator.ValidateFormat(System.String)">
             <summary>
             Validates email address format only.
             </summary>
             <param name="address">Email address to validate (e.g. mail@example.com).</param>
            <returns>Result of the validation.</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.AddressValidator.Validate(System.String)">
            <summary>
             Validates email address (email format, existence of MX record, SMTP connection).
            </summary>
            <param name="address">Email address to validate (e.g. mail@example.com).</param>
            <returns>Result of the validation.</returns>
        </member>
        <member name="M:Limilabs.Mail.Tools.AddressValidator.ValidateMX(System.String)">
             <summary>
             Validates email address format and the existence of MX record.
             </summary>
             <param name="address">Email address to validate (e.g. mail@example.com).</param>
            <returns>Result of the validation.</returns>
        </member>
        <member name="T:Limilabs.Mail.Tools.SmtpAddressValidator">
            <summary>
            Smtp email address validator.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.SmtpAddressValidator.SmtpConfiguration">
            <summary>
            Gets or sets SMTP configuration.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.SmtpAddressValidator.From">
            <summary>
            Gets or sets the value of MAIL FROM address. By default, checked address is used.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.SmtpAddressValidator.#ctor">
            <summary>
            Initializes new instance of the AddressValidator class.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.SmtpAddressValidator.ValidateSmtp(System.String)">
            <summary>
             Validates email address (email format, existence of MX record, SMTP connection).
            </summary>
            <param name="address">Email address to validate (e.g. mail@example.com).</param>
            <returns>Result of the validation.</returns>
        </member>
        <member name="T:Limilabs.Mail.Tools.SmtpValidationResult">
            <summary>
            SmtpValidation result.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.SmtpValidationResult.Responses">
            <summary>
            Gets all SMTP server responses.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Tools.SmtpValidationResult.Status">
            <summary>
            Gets SmtpValidation status.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Tools.SmtpValidationResult.#ctor">
            <summary>
            Creates new SmtpValidationResult instance.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Tools.SmtpValidationStatus">
            <summary>
            SmtpValidation status.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Tools.SmtpValidationStatus.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Tools.SmtpValidationStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Tools.SmtpValidationStatus.NoMXRecord">
            <summary>
            No MX record found.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Tools.SmtpValidationStatus.SmtpError">
            <summary>
            Smtp error
            </summary>
        </member>
        <member name="T:Limilabs.Mail.Tools.AddressValidationResult">
            <summary>
            Represents result of the email address validation.
            </summary>
            <seealso cref="T:Limilabs.Mail.Tools.AddressValidator"/>
        </member>
        <member name="F:Limilabs.Mail.Tools.AddressValidationResult.Success">
            <summary>
            Email is valid.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Tools.AddressValidationResult.IncorrectFormat">
            <summary>
            Email has incorrect format.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Tools.AddressValidationResult.NoMXRecord">
            <summary>
            No MX record was found for the domain.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Tools.AddressValidationResult.SmtpRejection">
            <summary>
            SMTP server rejected email address.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Tools.AddressValidationResult.SmtpError">
            <summary>
            SMTP server returned an error.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.ReadReceiptBuilder">
            <summary>
            You can use this class to create a read receipt (MDN) email.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.ReadTextTemplate">
            <summary>
            Gets or sets plain text version of the read reply template.
            </summary>
            <remarks>
            Template sample: <pre>This is a confirmation that your message sent to [OriginalRecipient.Address] was displayed.</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.DeletedTextTemplate">
            <summary>
            Gets or sets plain text version of the read reply template.
            </summary>
            <remarks>
            Template sample: <pre>This is a confirmation that your message sent to [OriginalRecipient.Address] was deleted.</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.ProcessedTextTemplate">
            <summary>
            Gets or sets plain text version of the processed reply template.
            </summary>
            <remarks>
            Template sample: <pre>This is a confirmation that your message sent to [OriginalRecipient.Address] was processed.</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.DispatchedTextTemplate">
            <summary>
            Gets or sets plain text version of the dispatched reply template.
            </summary>
            <remarks>
            Template sample: <pre>This is a confirmation that your message sent to [OriginalRecipient.Address] was dispatched.</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.DeniedTextTemplate">
            <summary>
            Gets or sets plain text version of the denied reply template.
            </summary>
            <remarks>
            Template sample: <pre>This is a confirmation that your message sent to [OriginalRecipient.Address] was denied.</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.ReadSubjectTemplate">
            <summary>
            Gets or sets read reply template for the subject.
            </summary>
            <remarks>
            Template sample: <pre>Read: [Original.Subject]</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.DeletedSubjectTemplate">
            <summary>
            Gets or sets deleted reply template for the subject.
            </summary>
            <remarks>
            Template sample: <pre>Deleted: [Original.Subject]</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.ProcessedSubjectTemplate">
            <summary>
            Gets or sets processed reply template for the subject.
            </summary>
            <remarks>
            Template sample: <pre>Processed: [Original.Subject]</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.DispatchedSubjectTemplate">
            <summary>
            Gets or sets dispatched reply template for the subject.
            </summary>
            <remarks>
            Template sample: <pre>Dispatched: [Original.Subject]</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.DeniedSubjectTemplate">
            <summary>
            Gets or sets denied reply template for the subject.
            </summary>
            <remarks>
            Template sample: <pre>Denied: [Original.Subject]</pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReadReceiptBuilder.TemplateKeys">
            <summary>
            Gets a dictionary of additional template keys, that are used when rendering subject and text templates.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.#ctor(System.String,Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates new ReadReceiptBuilder object.
            </summary>
            <param name="originalMessageID">Message-id (<see cref="P:Limilabs.Mail.IMail.MessageID"/>) of the original email message.</param>
            <param name="notificationRecipient">Recipients of the notification (Authors of the original email message).</param>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.#ctor(System.String,System.Collections.Generic.List{Limilabs.Mail.Headers.MailBox})">
            <summary>
            Creates new ReadReceiptBuilder object.
            </summary>
            <param name="originalMessageID">Message-id (<see cref="P:Limilabs.Mail.IMail.MessageID"/>) of the original email message.</param>
            <param name="notificationRecipients">Recipients of the notification (Authors of the original email message).</param>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.#ctor(Limilabs.Mail.IMail)">
            <summary>
            Creates new ReadReceiptBuilder object.
            </summary>
            <param name="email">Original email message.</param>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.#ctor(Limilabs.Mail.IMail,System.Collections.Generic.List{Limilabs.Mail.Headers.MailBox})">
            <summary>
            Creates new ReadReceiptBuilder object.
            </summary>
            <param name="email">Original email message.</param>
            <param name="notificationRecipients">Recipients of the notification (Authors of the original email message).</param>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDeleted(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create read receipt for manually deleted email.
            </summary>
            <param name="from">From mailbox.</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDeletedAutomatically(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create read receipt for automatically deleted email.
            </summary>
            <param name="from">From mailbox.</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDisplayed(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create read receipt for manually displayed email.
            </summary>
            <param name="from">From mailbox.</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDisplayedAutomatically(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create read receipt for automatically displayed email.
            </summary>
            <param name="from">From mailbox.</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasProcessed(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create read receipt for manually processed email.
            </summary>
            <param name="from">From mailbox.</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasProcessedAutomatically(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create read receipt for automatically processed email.
            </summary>
            <param name="from">From mailbox.</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDispatched(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create read receipt for manually dispatched email.
            </summary>
            <param name="from">From mailbox.</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.WasDispatchedAutomatically(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create read receipt for automatically dispatched email.
            </summary>
            <param name="from">From mailbox.</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReadReceiptBuilder.Was(Limilabs.Mail.Headers.MailBox,Limilabs.Mail.Headers.DispositonType,System.Boolean)">
            <summary>
            Creates MailBuilder class that can be used to create read receipt for email.
            </summary>
            <param name="from">From mailbox.</param>
            <param name="disposition">Receipt disposition (e.g. <see cref="F:Limilabs.Mail.Headers.DispositonType.Processed"/>).</param>
            <param name="manual">Specifies automatic or manual receipt.</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="T:Limilabs.Mail.SignatureConfiguration">
            <summary>
            Represents S/MIME (Secure/Multipurpose Internet Mail Extensions) signature configuration.
            </summary>
            <seealso cref="M:Limilabs.Mail.MailBuilder.SignWith(Limilabs.Mail.SignatureConfiguration)"/>
        </member>
        <member name="P:Limilabs.Mail.SignatureConfiguration.Certificate">
            <summary>
            Gets or sets the certificate that will be used to sign the message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SignatureConfiguration.Algorithm">
            <summary>
            Gets or sets the signing algorithm. You can use one of the <see cref="T:Limilabs.Cryptography.CommonOids"/> static values.
            Default is SHA1 (<see cref="F:Limilabs.Cryptography.CommonOids.Sha1"/>).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SignatureConfiguration.IncludeOption">
            <summary>
            Gets or sets the option that controls whether the root and entire chain associated with the signing certificate are included with the created CMS/PKCS #7 message.
            Default is <see cref="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.WholeChain"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SignatureConfiguration.DetachedSignature">
            <summary>
            Gets or sets the value indicating if detached signature will be used. 
            Detached signature has better backward compability as S/MIME unaware clients are able to access the signed data. Default is true.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.SignatureConfiguration.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates new SignatureConfiguration instance.
            </summary>
            <param name="certificate">Certificate that will be used to sign the message.</param>
        </member>
        <member name="T:Limilabs.Mail.PDI.KeyValues">
            <summary>
            Represents key and values.
            </summary>
            <see cref="P:Limilabs.Mail.PDI.PdiHeader.KeyParameters"/>
            <see cref="P:Limilabs.Mail.PDI.PdiHeader.ValueParameters"/>
        </member>
        <member name="P:Limilabs.Mail.PDI.KeyValues.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.KeyValues.Values">
            <summary>
            Gets values.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.PDI.KeyValues.#ctor(System.String)">
            <summary>
            Creates new KeyValues object.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:Limilabs.Mail.PDI.KeyValues.#ctor(System.String,System.String)">
            <summary>
            Creates new KeyValues object.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Limilabs.Mail.PDI.KeyValues.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates new KeyValues object.
            </summary>
            <param name="key">Key.</param>
            <param name="values">Values.</param>
        </member>
        <member name="T:Limilabs.Mail.PDI.BasePdiEntity">
            <summary>
            Represents base PDI (Personal Data Interchange) entity.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.PDI.BasePdiEntity.RenderFinal">
            <summary>
            Renders this entity as a string.
            </summary>
            <returns>Rendered string.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.BasePdiEntity.GetHeader(System.String)">
            <summary>
            Gets header with specified key from this calendar entity.
            </summary>
            <param name="key">Header's key.</param>
            <returns><see cref="T:Limilabs.Mail.PDI.PdiHeader"/> object for this key, or <see langword="null"/> if specified key was not found.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.BasePdiEntity.GetHeaders(System.String)">
            <summary>
            Gets header with specified key from this calendar entity.
            </summary>
            <param name="key">Header's key.</param>
            <returns><see cref="T:Limilabs.Mail.PDI.PdiHeader"/> object for this key, or <see langword="null"/> if specified key was not found.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.BasePdiEntity.AddCustomHeader(Limilabs.Mail.PDI.PdiHeader)">
            <summary>
            Adds custom header to this entity.
            </summary>
            <param name="pdiHeader">Custom header to add.</param>
        </member>
        <member name="T:Limilabs.Mail.PDI.PdiHeader">
            <summary>
            Represents single calendar header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.PdiHeader.Group">
            <summary>
            Gets or sets header's group.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.PdiHeader.Key">
            <summary>
            Gets or sets header's key.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.PdiHeader.Value">
            <summary>
            Gets header's value.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.PdiHeader.RawValue">
            <summary>
            Gets or sets header's raw value.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.PdiHeader.BinaryValue">
            <summary>
            Gets header's binary value.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.PdiHeader.KeyParameters">
            <summary>
            Header key parameters. You can use <see cref="M:Limilabs.Mail.PDI.PdiHeader.GetKeyParameter(System.String)"/> and <see cref="M:Limilabs.Mail.PDI.PdiHeader.HasKeyParameter(System.String)"/> methods for easier access.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.PdiHeader.ValueParameters">
            <summary>
            You can use <see cref="M:Limilabs.Mail.PDI.PdiHeader.GetValueParameter(System.String)"/> and <see cref="M:Limilabs.Mail.PDI.PdiHeader.HasValueParameter(System.String)" /> methods for easier access.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.PdiHeader.IsEmpty">
            <summary>
            Gets information if the header is empty.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.PDI.PdiHeader.RawLine">
            <summary>
            Raw line that this object was parsed from.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.#ctor(System.String,System.String)">
            <summary>
            Creates new PdiHeader object with specified <see cref="P:Limilabs.Mail.PDI.PdiHeader.Key"/> and <see cref="P:Limilabs.Mail.PDI.PdiHeader.Value"/>.
            </summary>
            <param name="key">Header's key.</param>
            <param name="value">Header's raw value.</param>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.#ctor(System.String)">
            <summary>
            Creates new PdiHeader object with specified <see cref="P:Limilabs.Mail.PDI.PdiHeader.Key"/>.
            </summary>
            <param name="key">Header's key.</param>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.Render">
            <summary>
            Renders this header.
            </summary>
            <returns>Header rendered to string.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.HasKeyParameter(System.String)">
            <summary>
            Returns true if the specified header key parameter exists.
            </summary>
            <param name="parameterName">Name of the parameter to search for.</param>
            <returns>True if parameter exists false otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.GetKeyParameter(System.String)">
            <summary>
            Returns the value of the first key parameter or <see langword="null"/> if parameter does not exist.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>Value of the parameter or <see langword="null"/> when parameter does not exist.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.GetKeyParameters(System.String)">
            <summary>
            Returns the values of the specified header parameter or <see langword="null"/> when parameter does not exist.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>Values of the parameter or <see langword="null"/> when parameter does not exist.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.HasValueParameter(System.String)">
            <summary>
            Returns true if the specified header value parameter exists.
            </summary>
            <param name="parameterName">Name of the parameter to search for.</param>
            <returns>True if parameter exists false otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.GetValueParameter(System.String)">
            <summary>
            Returns the value of the of the first value parameter or <see langword="null"/> if parameter does not exist.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>Value of the parameter or <see langword="null"/> when parameter does not exist.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.GetValueParameters(System.String)">
            <summary>
            Returns the values of the specified header parameter or <see langword="null"/> when parameter does not exist.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>Values of the parameter or <see langword="null"/> when parameter does not exist.</returns>
        </member>
        <member name="M:Limilabs.Mail.PDI.PdiHeader.ToString">
            <summary>
            Returns contents of this header.
            </summary>
            <returns>Contents of this header.</returns>
        </member>
        <member name="T:Limilabs.Mail.Log">
            <summary>
            Represents Mail.dll log. Use <see cref="P:Limilabs.Mail.Log.Enabled"/> property to turn on logging.
            </summary>
            <remarks>
            You can use following xml in your configuration file to log to file:
            
            <code>
            <configuration>
                <system.diagnostics>
            
                    <trace autoflush="true"/>
               
                    <switches>
                        <add name="Mail.dll" value="Verbose"/>
                    </switches>
               
                    <sources>
                        <source name="Mail.dll">
                            <listeners>
                                <add name="MailLogFile"/>
                            </listeners>
                        </source>
                    </sources>
               
                    <sharedListeners>
                        <add name="MailLogFile" type="System.Diagnostics.TextWriterTraceListener" initializeData="c:\mail.log"/>
                    </sharedListeners>
            
                </system.diagnostics>
            </configuration>
            </code>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.Log.DataCutOffLength">
            <summary>
            Gets or sets the maximum amount of bytes to be logged when logging single data command for IMAP and SMTP.
            <see cref="F:System.Int32.MaxValue"/> is default.
            </summary>
        </member>
        <member name="E:Limilabs.Mail.Log.WriteLine">
            <summary>
            You can subscribe your logging library to this event.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.Log.Enabled">
            <summary>
            Gets or sets a value indicating whether logging is enabled or disabled.
            You can observe the log on standard VS output -or- subscribe to <see cref="E:Limilabs.Mail.Log.WriteLine"/> event -or- use application's config file to turn on logging and add your own listeners.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.ForwardBuilder">
            <summary>
            You can use this class to forward an email.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ForwardBuilder.TextReplyTemplate">
            <summary>
            Gets or sets plain text version of the reply template.
            </summary>
            <remarks>
            Template sample:
            <pre>
            [Text]
            
            On [Original.Date] [Original.Sender.Name] wrote:
            [QuoteText]
            </pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ForwardBuilder.HtmlReplyTemplate">
            <summary>
            Gets or sets HTML version of the reply template.
            </summary>
            <remarks>
            Template sample:
            <pre>
            [Html]
            &lt;br /&gt;&lt;br /&gt;
            On [Original.Date] [Original.Sender.Name] wrote:
            &lt;blockquote style=""margin-left: 1em; padding-left: 1em; border-left: 1px #ccc solid;""&gt;
            [QuoteHtml]
            &lt;/blockquote&gt;
            </pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ForwardBuilder.SubjectReplyTemplate">
            <summary>
            Gets or sets reply template for the subject.
            </summary>
            <remarks>
            Template sample:
            <pre>
            RE: [Original.Subject]
            </pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ForwardBuilder.TemplateKeys">
            <summary>
            Gets a dictionary of additional template keys, that are used when rendering subject and text templates.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ForwardBuilder.IncludeAttachments">
            <summary>
            Gets or sets the value that specifies if <see cref="P:Limilabs.Mail.IMail.NonVisuals"/> collection is copied to resulting email.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ForwardBuilder.Text">
            <summary>
            Gets or sets plain text version of the reply. Please remember that setting <see cref="P:Limilabs.Mail.ForwardBuilder.Html"/> will override plain text.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ForwardBuilder.Html">
            <summary>
            Gets or sets HTML version of the reply. Extracts plain text from HTML and also sets <see cref="P:Limilabs.Mail.ForwardBuilder.Text"/> property.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ForwardBuilder.CreatePlainTextAutomatically">
            <summary>
            Gets or sets a value indicating if plain text version of a body is extracted from HTML when <see cref="P:Limilabs.Mail.ForwardBuilder.Html"/> property is set.
            Default is true.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.ForwardBuilder.#ctor(Limilabs.Mail.IMail)">
            <summary>
            Creates new ForwardBuilder object.
            </summary>
            <param name="email">Original email to reply to.</param>
        </member>
        <member name="M:Limilabs.Mail.ForwardBuilder.Forward(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References"/>, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo"/>, <see cref="P:Limilabs.Mail.MailBuilder.Text"/>, and <see cref="P:Limilabs.Mail.MailBuilder.Html"/> properties.
            </summary>
            <param name="from">From mailbox used for forwarding (the address from which the forward will be sent).</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ForwardBuilder.Forward(System.String)">
            <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References"/>, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo"/>, <see cref="P:Limilabs.Mail.MailBuilder.Text"/>, and <see cref="P:Limilabs.Mail.MailBuilder.Html"/> properties.
            </summary>
            <param name="fromAddress">From address used for forwarding (the address from which the forward will be sent).</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="T:Limilabs.Mail.BasicConstant">
            <summary>
            Base class for all constant values.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.BasicConstant.Name">
            <summary>
            Gets the name of the constant.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.BasicConstant.Equals(Limilabs.Mail.BasicConstant)">
            <summary>
             Determines whether the specified <see cref="T:Limilabs.Mail.BasicConstant"/> object is equal to the current one.
             Names are compared case insensitive.
            </summary>
             <param name="other">The <see cref="T:Limilabs.Mail.BasicConstant"/> to compare with the current <see cref="T:Limilabs.Mail.BasicConstant"/></param>
             <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.Mail.BasicConstant.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Limilabs.Mail.BasicConstant.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>A hash code for the current <see cref="T:Limilabs.Mail.BasicConstant"/>.</returns>
        </member>
        <member name="M:Limilabs.Mail.BasicConstant.op_Equality(Limilabs.Mail.BasicConstant,Limilabs.Mail.BasicConstant)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Mail.BasicConstant"/> objects are equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Limilabs.Mail.BasicConstant.op_Inequality(Limilabs.Mail.BasicConstant,Limilabs.Mail.BasicConstant)">
            <summary>
            Determines whether two <see cref="T:Limilabs.Mail.BasicConstant"/> objects are not equal.
            </summary>
            <param name="left">First object to compare.</param>
            <param name="right">Second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are not equal; otherwise, <see langword="true"/>.</returns>
        </member>
        <member name="M:Limilabs.Mail.BasicConstant.ToString">
            <summary>
            Returns the <see cref="P:Limilabs.Mail.BasicConstant.Name"/> of this object.
            </summary>
            <returns><see cref="P:Limilabs.Mail.BasicConstant.Name"/> of this object.</returns>
        </member>
        <member name="T:Limilabs.Mail.SMIMEConfiguration">
            <summary>
            Represents S/MIME decrypt configuration (automatic decryption, certificates used for decryption).
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.SMIMEConfiguration"/>
        </member>
        <member name="P:Limilabs.Mail.SMIMEConfiguration.DecryptAutomatically">
            <summary>
            Specifies if S/MIME encrypted messages should be decrypted automatically.
            Decryption searches through <see cref="P:Limilabs.Mail.SMIMEConfiguration.Certificates"/> collection and <see cref="F:System.Security.Cryptography.X509Certificates.StoreName.My"/> store to find appropriate certificate.
            Default is true.
            </summary>
            <summary>
            Specifies if S/MIME encrypted messages should be decrypted automatically.
            Decryption searches through <see cref="P:Limilabs.Mail.SMIMEConfiguration.Certificates"/> collection and <see cref="F:System.Security.Cryptography.X509Certificates.StoreName.My"/> store to find appropriate certificate.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SMIMEConfiguration.ExtractSignedAutomatically">
            <summary>
            Specifies if S/MIME signed messages should be extracted automatically.
            This settings affects signed emails that use pkcs7-mime signed-data (not detached signatures).
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SMIMEConfiguration.Certificates">
            <summary>
            Gets or sets the list of certificates used for decryption.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SMIMEConfiguration.Certificate">
            <summary>
            Gets or sets certificate used for decryption.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.SMIMEConfiguration.CopyHeadersOnDecryption">
            <summary>
            Specifies if email headers from the outer message are copied to a decrypted, inner email message.
            Default is false.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.SMIMEConfiguration.#ctor">
            <summary>
            Initializes new S/MIME configuration class.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.SMIMEConfiguration.#ctor(System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Initializes new S/MIME configuration class.
            </summary>
            <param name="certificates">Certificates used for decryption.</param>
        </member>
        <member name="M:Limilabs.Mail.SMIMEConfiguration.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Initializes new S/MIME configuration class.
            </summary>
            <param name="certificate">Certificate used for decryption.</param>
        </member>
        <member name="T:Limilabs.Mail.GenericPriority">
            <summary>
            Generic priority of the message.
            Message priority can be stored used three different headers: <see cref="P:Limilabs.Mail.IMail.Priority"/>,  <see cref="P:Limilabs.Mail.IMail.Importance"/> and <see cref="P:Limilabs.Mail.IMail.XPriority"/>.
            This enum is used by <seealso cref="M:Limilabs.Mail.IMail.GetGenericPriority"/> method, which checks all those headers.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.PriorityHigh"/>
            <seealso cref="M:Limilabs.Mail.IMail.PriorityLow"/>
        </member>
        <member name="F:Limilabs.Mail.GenericPriority.Low">
            <summary>
            Message has low priority.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.GenericPriority.Normal">
            <summary>
            Message has normal priority.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.GenericPriority.High">
            <summary>
            Message has high priority.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.ReplyBuilder">
            <summary>
            You can use this class to create a reply from specified email.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ReplyBuilder.TextReplyTemplate">
            <summary>
            Gets or sets plain text version of the reply template.
            </summary>
            <remarks>
            Template sample:
            <pre>
            [Text]
            
            On [Original.Date] [Original.Sender.Name] wrote:
            [QuoteText]
            </pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReplyBuilder.HtmlReplyTemplate">
            <summary>
            Gets or sets HTML version of the reply template.
            </summary>
            <remarks>
            Template sample:
            <pre>
            [Html]
            &lt;br /&gt;&lt;br /&gt;
            On [Original.Date] [Original.Sender.Name] wrote:
            &lt;blockquote style=""margin-left: 1em; padding-left: 1em; border-left: 1px #ccc solid;""&gt;
            [QuoteHtml]
            &lt;/blockquote&gt;
            </pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReplyBuilder.SubjectReplyTemplate">
            <summary>
            Gets or sets reply template for the subject.
            </summary>
            <remarks>
            Template sample:
            <pre>
            RE: [Original.Subject]
            </pre>
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.ReplyBuilder.TemplateKeys">
            <summary>
            Gets a dictionary of additional template keys, that are used when rendering subject and text templates.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ReplyBuilder.IncludeAttachments">
            <summary>
            Gets or sets the value that specifies if <see cref="P:Limilabs.Mail.IMail.NonVisuals"/> collection is copied to resulting email.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ReplyBuilder.CreatePlainTextAutomatically">
            <summary>
            Gets or sets a value indicating if plain text version of a body is extracted from HTML when <see cref="P:Limilabs.Mail.ReplyBuilder.Html"/> property is set.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ReplyBuilder.Text">
            <summary>
            Gets or sets plain text version of the reply. Please remember that setting <see cref="P:Limilabs.Mail.ReplyBuilder.Html"/> will override plain text.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.ReplyBuilder.Html">
            <summary>
            Gets or sets HTML version of the reply. Extracts plain text from HTML and also sets <see cref="P:Limilabs.Mail.ReplyBuilder.Text"/> property.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.ReplyBuilder.#ctor(Limilabs.Mail.IMail)">
            <summary>
            Creates new ReplyBuilder object.
            </summary>
            <param name="email">Original email to reply to.</param>
        </member>
        <member name="M:Limilabs.Mail.ReplyBuilder.ReplyToAll(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References"/>, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo"/>, <see cref="P:Limilabs.Mail.MailBuilder.Text"/>, and <see cref="P:Limilabs.Mail.MailBuilder.Html"/> properties.
            </summary>
            <param name="from">From mailbox used for replying (the address from which the reply will be sent).</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReplyBuilder.Reply(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References"/>, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo"/>, <see cref="P:Limilabs.Mail.MailBuilder.Text"/>, and <see cref="P:Limilabs.Mail.MailBuilder.Html"/> properties.
            </summary>
            <param name="from">From mailbox used for replying (the address from which the reply will be sent).</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReplyBuilder.Reply(System.String)">
            <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References"/>, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo"/>, <see cref="P:Limilabs.Mail.MailBuilder.Text"/>, and <see cref="P:Limilabs.Mail.MailBuilder.Html"/> properties.
            </summary>
            <param name="fromAddress">From address used for replying (the address from which the reply will be sent).</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="M:Limilabs.Mail.ReplyBuilder.ReplyToAll(System.String)">
            <summary>
            Creates MailBuilder class that can be used to create an actual email.
            This method copies attachments, sets <see cref="P:Limilabs.Mail.MailBuilder.References"/>, <see cref="P:Limilabs.Mail.MailBuilder.InReplyTo"/>, <see cref="P:Limilabs.Mail.MailBuilder.Text"/>, and <see cref="P:Limilabs.Mail.MailBuilder.Html"/> properties.
            </summary>
            <param name="fromAddress">From address used for replying (the address from which the reply will be sent).</param>
            <returns>MailBuilder class that can be used to create an actual email.</returns>
        </member>
        <member name="T:Limilabs.Mail.Licensing.LicenseHelper">
            <summary>
            Utility class for license related functions.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Licensing.LicenseHelper.UseMachineKeyStore(System.Boolean)">
            <summary>
            Sets a value indicating whether the key should be persisted in the computer's key store instead of the user profile store.
            </summary>
            <param name="value"><c>true</c> if the key should be persisted in the computer key store; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Limilabs.Mail.Licensing.LicenseHelper.GetLicensePath">
            <summary>
            Returns the file path used to load the license file.
            </summary>
            <returns>License file path.</returns>
        </member>
        <member name="M:Limilabs.Mail.Licensing.LicenseHelper.GetLicenseStatus">
            <summary>
            Gets the status of the license file.
            </summary>
            <returns>License file status.</returns>
        </member>
        <member name="T:Limilabs.Mail.Licensing.LicenseStatus">
            <summary>
            Represents the status of license validation.
            </summary>
            <seealso cref="M:Limilabs.Mail.Licensing.LicenseHelper.GetLicenseStatus"/>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.NotLoaded">
            <summary>
            There was no attempt to load and check the license file yet.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.NoLicenseFile">
            <summary>
            There is no license file in appropriate folder. 
            Please check the value of <see cref="M:Limilabs.Mail.Licensing.LicenseHelper.GetLicensePath"/> method and place your license there.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.Invalid">
            <summary>
            License was loaded, but is invalid.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.InvalidXml">
            <summary>
            License was loaded, but the XML is invalid.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.InvalidSignature">
            <summary>
            License was loaded, but it has invalid signature.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.InvalidLicenseXml">
            <summary>
            License was loaded, but the XML is not a license.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.Exception">
            <summary>
            License was loaded, but an exception occurred.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.Valid">
            <summary>
            License was loaded and is valid.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.Revoked">
            <summary>
            Valid license was loaded, but was it revoked.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.LicenseStatus.VersionNotCovered">
            <summary>
            Your license doesn't cover this version - it was released after your support expired.
            </summary>
        </member>
        <member name="F:Limilabs.Mail.Licensing.PleasePurchaseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Licensing.PleasePurchaseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Limilabs.Mail.Licensing.PleasePurchaseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Limilabs.Mail.MimeDocumentFactory">
            <summary>
            Factory class used to create <see cref="T:Limilabs.Mail.MimeDocument"/> instance.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeDocumentFactory.SetDefaults">
            <summary>
            Gets or set the value indicating whether default values (MIME-Version) should be set.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeDocumentFactory.MimeConfiguration">
            <summary>
            Gets MIME configuration (automatic binhex, apple, uue, tnef, rfc822 processing).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MimeDocumentFactory.#ctor">
            <summary>
            Creates new MimeDocumentFactory object.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MimeDocumentFactory.CreateMimeDocument(System.Byte[])">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.MimeDocument"/> from specified data.
            </summary>
            <remarks>
            No defaults are set regardless of <see cref="P:Limilabs.Mail.MimeDocumentFactory.SetDefaults"/> value.
            </remarks>
            <param name="data">Byte array containing a MIME document.</param>
            <returns>New mime document.</returns>
        </member>
        <member name="M:Limilabs.Mail.MimeDocumentFactory.CreateMimeDocument(Limilabs.Mail.MIME.MimeBase)">
            <summary>
            Creates <see cref="T:Limilabs.Mail.MimeDocument"/> with specified MIME entity as root. 
            Sets default value for <see cref="P:Limilabs.Mail.MimeDocument.MimeVersion"/> when not defined and <see cref="P:Limilabs.Mail.MimeDocumentFactory.SetDefaults"/> is set to true.
            </summary>
            <param name="root">Root of the <see cref="T:Limilabs.Mail.MimeDocument"/>.</param>
            <returns>New mime document.</returns>
        </member>
        <member name="T:Limilabs.Mail.HtmlException">
            <summary>
            Represents an error that occurred during html parsing.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.HtmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of HtmlException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="T:Limilabs.Mail.IMail">
            <summary>
            This class provides simple access to email message.
            Use <see cref="T:Limilabs.Mail.MailBuilder"/> class to create this object.
            It is possible to access entire MIME tree using <see cref="T:Limilabs.Mail.MimeDocument"/> property.
            </summary>
            <seealso cref="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.Byte[])"/>
            <seealso cref="M:Limilabs.Mail.MailBuilder.CreateFromEmlFile(System.String)"/>
        </member>
        <member name="P:Limilabs.Mail.IMail.Document">
            <summary>
            Gets the entire <see cref="T:Limilabs.Mail.MimeDocument"/> object associated with this email message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.Subject">
            <summary>
            Gets or sets the subject of this email message ('Subject' header). May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.MimeVersion">
            <summary>
            Gets or sets MIME version of this email message ('MIME-version' header).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.MessageID">
            <summary>
            Gets or sets id of this email message ('Message-ID' header). Does not include surrounding brackets (&lt; and &gt;).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.InReplyTo">
            <summary>
            Gets or sets the message-id of the parent email message ('In-Reply-To' header). Does not contain surrounding brackets (&lt; and &gt;).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.References">
            <summary>
            Gets the ids of the referenced email messages. Does not include surrounding brackets (&lt; and &gt;).
            This collection can be modified. May be empty.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.IsReply">
            <summary>
            Gets the boolean value indicating if this message is a reply.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.IsForward">
            <summary>
            Gets the boolean value indicating if this message was forwarded.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.IsPartial">
            <summary>
            Gets the boolean value indicating if this message was split (MIME document root is of type <see cref="T:Limilabs.Mail.MIME.MimeMessagePartial"/>).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.PartialId">
            <summary>
            Gets the unique identifier to be used to match the parts together.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.From">
            <summary>
            Gets the author(s) of this email message ('From' header). 
            This collection can be modified. If it's empty, email message is NOT <a href="https://www.limilabs.com/mail/rfc/2822">RFC 2822</a> compliant.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.Sender">
            <summary>
            Gets or sets mailbox of the agent responsible for the actual transmission of this email message ('Sender' header).
            If 'Sender' is <c>null</c>, it returns first item from <see cref="P:Limilabs.Mail.IMail.From"/> collection.
            </summary>
            <remarks>
            'Sender' is not required if <see cref="P:Limilabs.Mail.IMail.From"/> property contains only one <see cref="T:Limilabs.Mail.Headers.MailBox"/>.
            'Sender' property is needed when message is from more than one person (<see cref="P:Limilabs.Mail.IMail.From"/> contains more than one mailbox).
            In such case Sender provides information which mailbox is responsible for the actual transmission.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.SenderHeader">
            <summary>
            Gets or sets mailbox of the agent responsible for the actual transmission of this email message ('Sender' header).
            </summary>
            <remarks>
            'Sender' is not required if <see cref="P:Limilabs.Mail.IMail.From"/> property contains only one <see cref="T:Limilabs.Mail.Headers.MailBox"/>.
            'Sender' property is needed when message is from more than one person (<see cref="P:Limilabs.Mail.IMail.From"/> contains more than one mailbox).
            In such case Sender provides information which mailbox is responsible for the actual transmission.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.ReplyTo">
            <summary>
            Gets the address(es) to which the author of this email message suggests that replies be sent ('Reply-to' header).
            In this collection you can find <see cref="T:Limilabs.Mail.Headers.MailBox"/> which represents single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> which represents group of email addresses.
            This collection can be modified. May be empty.
            </summary>
            <remarks>
            The Reply-To value should not be used by any server. It is meant for client side use.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.To">
            <summary>
            Gets the address(es) of the primary recipient(s) of this email message ('To' header).
            In this collection you can find <see cref="T:Limilabs.Mail.Headers.MailBox"/> which represents single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> which represents group of email addresses.
            This collection can be modified. May be empty.
            </summary>
            <remarks>
            You can use Linq's <code>To.SelectMany(address => address.GetMailboxes())</code> to retrieve <see cref="T:Limilabs.Mail.Headers.MailBox"/> list.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.Cc">
            <summary>
            Gets the address(es) of others who are to receive this email message ('CC', Carbon Copy header), even tough the content of the message may not be directed at them. 
            In this collection you can find <see cref="T:Limilabs.Mail.Headers.MailBox"/> which represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> which represents group of email addresses.
            This collection can be modified. May be empty.
            </summary>
            <remarks>
            You can use Linq's <code>Cc.SelectMany(address => address.GetMailboxes())</code> to retrieve <see cref="T:Limilabs.Mail.Headers.MailBox"/> list.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.Bcc">
            <summary>
            Gets the address(es) of others who are to receive this email message ('BCC', Blind Carbon Copy header), even tough the content of the message may not be directed at them. 
            In this collection you can find <see cref="T:Limilabs.Mail.Headers.MailBox"/> which represents single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> which represents group of email addresses.
            This collection can be modified. May be empty.
            BCC header is not rendered when <see cref="M:Limilabs.Mail.IMail.Render"/> method is used, however it is rendered when message is saved using <see cref="M:Limilabs.Mail.IMail.Save(System.String)"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.EnvelopeTo">
            <summary>
            Gets or sets the address of the recipient taken from the SMTP envelope (SMTP "RCTP FROM").
            </summary>
            <remarks>
            If the recipient in the SMTP envelope ("RCTP TO") is not included in the CC list, 
            some mail servers add this header as an aid to clients which would otherwise not be able to display the envelope recipients. 
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.RcptTo">
            <summary>
            Gets or sets the address of the recipient taken from the SMTP envelope (SMTP "RCTP FROM").
            </summary>
            <remarks>
            If the recipient in the SMTP envelope ("RCTP TO") is not included in the CC list, 
            some mail servers add this header as an aid to clients which would otherwise not be able to display the envelope recipients. 
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.XRcptTo">
            <summary>
            Gets or sets the address of the recipient taken from the SMTP envelope (SMTP "RCTP FROM").
            </summary>
            <remarks>
            If the recipient in the SMTP envelope ("RCTP TO") is not included in the CC list, 
            some mail servers add this header as an aid to clients which would otherwise not be able to display the envelope recipients. 
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.EnvelopeFrom">
            <summary>
            Gets or sets the address of the sender taken from the SMTP envelope (SMTP "MAIL FROM").
            </summary>
            <remarks>
            If the sender in the SMTP envelope ("MAIL FROM") is not the same as the senders in the "From" or "Sender" RFC 2822 header fields, 
            some mail servers add this header as an aid to clients which would otherwise not be able to display the envelope sender.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.XEnvelopeFrom">
            <summary>
            Gets or sets the address of the sender taken from the SMTP envelope (SMTP "MAIL FROM").
            </summary>
            <remarks>
            If the sender in the SMTP envelope ("MAIL FROM") is not the same as the senders in the "From" or "Sender" RFC 2822 header fields, 
            some mail servers add this header as an aid to clients which would otherwise not be able to display the envelope sender.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.NotificationTo">
            <summary>
            Gets the disposition notifications addresses ('Disposition-Notification-To' header). This collection can be modified. May be empty.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.RequestReadReceipt"/>
        </member>
        <member name="P:Limilabs.Mail.IMail.ReturnReceiptTo">
            <summary>
            Gets return receipt addresses ('Return-Receipt-To' header). This collection can be modified. May be empty.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.RequestReadReceipt"/>
        </member>
        <member name="P:Limilabs.Mail.IMail.XConfirmReadingTo">
            <summary>
            Gets confirm reading addresses ('X-Confirm-Reading-To' header). This collection can be modified. May be empty.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.RequestReadReceipt"/>
        </member>
        <member name="P:Limilabs.Mail.IMail.ReturnPath">
            <summary>
            Gets or sets return path address ('Return-Path' header). Does not include brackets (&lt; and &gt;).
            </summary>
            <remarks>
            All bounces that occur during the SMTP session should go back to the Return-Path value.
            The recipient's mail server is supposed to add a Return-Path header to the top of the email.
            If Return-Path header already exists in the email, then that header should be replaced by the recipient's mail server.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.Date">
            <summary>
            Gets or sets the send date of this email message ('Date' header). 
            May be <c>null</c> in case of parsing error.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.ListArchive">
            <summary>
            Gets URL list of mailing list archive ('List-Archive' header). This collection can be modified. May be empty.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.ListHelp">
            <summary>
             Gets URL list for mailing list information ('List-Help' header). This collection can be modified. May be empty.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.ListID">
            <summary>
            Gets or sets mailing list identifier ('List-Id' header).May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.ListOwner">
            <summary>
            Gets URL list for mailing list owner's mailbox ('List-Owner' header). This collection can be modified. May be empty.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.ListPost">
            <summary>
            Gets URL list for mailing list posting ('List-Post' header). This collection can be modified. May be empty.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.ListSubscribe">
            <summary>
            Gets URL list for mailing list subscription ('List-Subscribe' header). This collection can be modified. May be empty.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.ListUnsubscribe">
            <summary>
            Gets list of URLs ("http://www.example.com/unsubscribe") or emails ("mailto:unsubscribe@lexample.com") for mailing list unsubscription ('List-Unsubscribe' header). 
            This collection can be modified. May be empty.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.Importance">
            <summary>
            Gets or sets the importance of this email message ('Importance' header).
            Consider using <see cref="M:Limilabs.Mail.IMail.GetGenericPriority"/> as it also checks <see cref="P:Limilabs.Mail.IMail.Priority"/> and <see cref="P:Limilabs.Mail.IMail.XPriority"/> properties.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.PriorityHigh"/> <seealso cref="M:Limilabs.Mail.IMail.PriorityLow"/>
        </member>
        <member name="P:Limilabs.Mail.IMail.Priority">
            <summary>
            Gets or sets the priority of this email message ('Priority' header).
            Consider using <see cref="M:Limilabs.Mail.IMail.GetGenericPriority"/> as it also checks <see cref="P:Limilabs.Mail.IMail.Importance"/> and <see cref="P:Limilabs.Mail.IMail.XPriority"/> properties.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.PriorityHigh"/> <seealso cref="M:Limilabs.Mail.IMail.PriorityLow"/>
        </member>
        <member name="P:Limilabs.Mail.IMail.XPriority">
            <summary>
            Gets or sets the X-Priority of this email message ('X-Priority' header) (Outlook specific).
            Value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            Consider using <see cref="M:Limilabs.Mail.IMail.GetGenericPriority"/> as it also checks <see cref="P:Limilabs.Mail.IMail.Priority"/> and <see cref="P:Limilabs.Mail.IMail.Importance"/> properties.
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.PriorityHigh"/> <seealso cref="M:Limilabs.Mail.IMail.PriorityLow"/>
        </member>
        <member name="P:Limilabs.Mail.IMail.Sensitivity">
            <summary>
            Gets or sets the sensitivity of this email message ('Sensitivity' header)
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.Received">
            <summary>
            Gets the list of all 'received' headers added to this email message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.XTnef2MimeMessageClass">
            <summary>
            Gets or sets the 'X-Tnef2Mime-MessageClass' value. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.XMsg2Mime">
            <summary>
            Gets or sets the 'X-Msg2Mime' value. It represents information if this email was created from MSG data.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.XMsg2MimeCreationTime">
            <summary>
            Gets or sets the 'X-Msg2Mime-Creation-Time' value. It represents PR_CREATION_TIME. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.XMsg2MimeMessageDeliveryTime">
            <summary>
            Gets or sets the 'X-Msg2Mime-Message-Delivery-Time' value. It represents PR_MESSAGE_DELIVERY_TIME. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.XMsg2MimeClientSubmitTime">
            <summary>
            Gets or sets the 'X-Msg2Mime-Client-Submit-Time' value. It represents PR_CLIENT_SUBMIT_TIME. May be <c>null</c>.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.Headers">
            <summary>
            MIME headers collection for root MIME entity.
            </summary>
            <remarks>Same as using Document.Root.Headers</remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.Html">
            <summary>
            Gets HTML version of this email message. 
            You can use <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml"/> method to extract plain text from HTML content.
            You can also use <see cref="M:Limilabs.Mail.IMail.GetBodyAsText"/> or <see cref="M:Limilabs.Mail.IMail.GetBodyAsHtml"/> to obtain body in a specific format.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.Rtf">
            <summary>
            Gets RTF version of this email message. 
            RTF may be extracted from a TNEF attachment (winmail.dat) a proprietary e-mail attachment format used by Microsoft Outlook and Microsoft Exchange Server.
            </summary>       
        </member>
        <member name="P:Limilabs.Mail.IMail.Text">
            <summary>
            Gets plain text version of this email message.
            For some HTML emails plain text may be not defined, you can use <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml"/> method to extract plain text from HTML content.
            You can also use <see cref="M:Limilabs.Mail.IMail.GetBodyAsText"/> or <see cref="M:Limilabs.Mail.IMail.GetBodyAsHtml"/> to obtain body in a specific format.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.TextData">
            <summary>
            Gets the object representing 'text/plain' body of this email message. May be <c>null</c> if no text/plain data is present. 
            You may use <see cref="P:Limilabs.Mail.IMail.Text"/> as a shortcut to retrieve plain text.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.HtmlData">
            <summary>
            Gets the object representing 'text/html' body of this email message. May be <c>null</c> if no HTML data is present.
            You may use <see cref="P:Limilabs.Mail.IMail.Html"/> as a shortcut to retrieve HTML text.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.RtfData">
            <summary>
            Gets the object representing 'text/rtf' or 'application/rtf' body of this email message. May be <c>null</c> if no RTF data is present.
            You may use <see cref="P:Limilabs.Mail.IMail.Rtf"/> as a shortcut to retrieve RTF text.
            </summary>
            <remarks>
            This object may be created by TNEF to MIME parser from a TNEF attachment (winmail.dat) a proprietary e-mail attachment format used by Microsoft Outlook and Microsoft Exchange Server.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.HtmlDataString">
            <summary>
            Gets HTML data of this email message. You can use <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml"/> method to extract plain text from HTML content.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.TextDataString">
            <summary>
            Gets plain text data from this email message.
            For some HTML emails plain text may be not defined, you can use <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml"/> method to extract plain text from HTML content.
            You can also use <see cref="M:Limilabs.Mail.IMail.GetBodyAsText"/> or <see cref="M:Limilabs.Mail.IMail.GetBodyAsHtml"/> to obtain body in a specific format.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.IsRtf">
            <summary>
            Returns true if body of this email message is specified in RTF format. You can use <see cref="P:Limilabs.Mail.IMail.Rtf"/> property to access RTF version of the body.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.IsHtml">
            <summary>
            Returns true if body of this email message is specified in HTML format. You can use <see cref="P:Limilabs.Mail.IMail.Html"/> property to access HTML version of the body.
            </summary>
            <remarks>This property is not always negation of <see cref="P:Limilabs.Mail.IMail.IsText"/> property. Both <see cref="P:Limilabs.Mail.IMail.IsText"/> and <see cref="P:Limilabs.Mail.IMail.IsHtml"/> may be true or false simultaneously.</remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.IsText">
            <summary>
            Returns true if body of this email message is specified in plain text format. You can use <see cref="P:Limilabs.Mail.IMail.Text"/> property to access plain text version of the body.
            </summary>
            <remarks>This property is not always negation of <see cref="P:Limilabs.Mail.IMail.IsHtml"/> property. Both <see cref="P:Limilabs.Mail.IMail.IsText"/> and <see cref="P:Limilabs.Mail.IMail.IsHtml"/> may be true or false simultaneously.</remarks>
        </member>
        <member name="P:Limilabs.Mail.IMail.Visuals">
            <summary>
            Gets the list of all visual elements (<see cref="P:Limilabs.Mail.MIME.MimeBase.ContentDisposition"/>.Value equal to <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Inline"/>) in this email message.
            E.g. Images embedded inside HTML email.
            You can use Visuals[string cid] to find the picture embedded in the HTML body using its content id ('Content-ID' header).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.NonVisuals">
            <summary>
            Gets the list of all non visual elements (<see cref="P:Limilabs.Mail.MIME.MimeBase.ContentDisposition"/>.Value equal to <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Attachment"/>) in this email message.
            E.g. Attached data files.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.Alternatives">
            <summary>
            Gets the list of alternative elements in this email message.
            E.g. <see cref="T:Limilabs.Mail.MIME.MimeCalendar"/> if message is an appointment invitation.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.Attachments">
            <summary>
            Gets the list of all attachments in this email message.
            Including <see cref="P:Limilabs.Mail.IMail.Alternatives"/>, <see cref="P:Limilabs.Mail.IMail.Visuals"/> (<see cref="F:Limilabs.Mail.Headers.MimeDisposition.Inline"/>) and <see cref="P:Limilabs.Mail.IMail.NonVisuals"/> (<see cref="F:Limilabs.Mail.Headers.MimeDisposition.Attachment"/>).
            </summary>
            <seealso cref="M:Limilabs.Mail.IMail.ExtractAttachmentsFromInnerMessages" />
        </member>
        <member name="P:Limilabs.Mail.IMail.Appointments">
            <summary>
            Gets the list of all appointments in this email message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.VCards">
            <summary>
            Gets the list of all vCards in this email message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.ReadReceipts">
            <summary>
            Gets the list of all Message Disposition Notifications (MDNs) in this email message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.DeliveryStatuses">
            <summary>
            Gets the list of all Delivery Status Notifications (DSNs) in this email message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.IsDKIMSigned">
            <summary>
            Indicates if this email message has been DKIM (DomainKeys Identified Mail) signed.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.DKIMSignatureInfo">
            <summary>
            Gets DKIM signature information from the first 'DKIM-Signature' header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.DKIMSignatureInfos">
            <summary>
            Gets DKIM signature information.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.IsEncrypted">
            <summary>
            Indicates if this email message has been encrypted.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.NeedsDecryption">
            <summary>
            Indicates if this email message needs to be decrypted.
            You can use <see cref="M:Limilabs.Mail.IMail.Decrypt"/>, <see cref="M:Limilabs.Mail.IMail.Decrypt(System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate2})"/>, <see cref="M:Limilabs.Mail.IMail.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2)"/> to decrypt a message.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.IMail.Decrypt">
            <summary>
            Decrypts the message. 
            Searches through <see cref="F:System.Security.Cryptography.X509Certificates.StoreName.My"/> certificate store to find appropriate certificate.
            You can use <see cref="P:Limilabs.Mail.MailBuilder.SMIMEConfiguration"/> to specify certificates and automatic email decryption.
            </summary>
            <returns>Decrypted email message.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Decrypt(System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>
            Decrypts the message.
            Searches through specified certificates and <see cref="F:System.Security.Cryptography.X509Certificates.StoreName.My"/> certificate store to find appropriate certificate.
            </summary>
            <param name="certificates">Certificates used for decryption.</param>
            <returns>Decrypted email message.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Decrypt(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Decrypts the message using specified certificate for decryption.
            Uses the specified certificate and <see cref="F:System.Security.Cryptography.X509Certificates.StoreName.My"/> certificate store to find appropriate certificate.
            </summary>
            <param name="certificate">Certificate used for decryption.</param>
            <returns>Decrypted email message.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Decrypt(Limilabs.Mail.SMIMEConfiguration)">
            <summary>
            Decrypts the message using specified S/MIME configuration.
            </summary>
            <param name="configuration">S/MIME configuration.</param>
            <returns>Decrypted email message.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Decrypt(Limilabs.Mail.MimeConfiguration)">
            <summary>
            Decrypts the message using specified MIME and S/MIME configuration.
            </summary>
            <param name="configuration">Mime configuration.</param>
            <returns>Decrypted email message.</returns>
        </member>
        <member name="P:Limilabs.Mail.IMail.IsSigned">
            <summary>
            Indicates if this email message has been signed.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMail.NeedsSignedExtraction">
            <summary>
            Indicates if this email message needs signed message extraction.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.IMail.CheckSignature(System.Boolean)">
            <summary>
            Verifies the digital signatures on the signed CMS/PKCS #7 email message and, optionally, validates the signers' certificates.
            Checks also if the content was signed by the person that sent it.
            </summary>
            <param name="verifySignatureOnly">
            A System.Boolean value that specifies whether only the digital signatures are verified 
            without the signers' certificates being validated. 
            If <paramref name="verifySignatureOnly"/> is <c>true</c>, only the digital signatures are verified. 
            If it is <c>false</c>, the digital signatures are verified, the signers' certificates are validated, 
            and the purposes of the certificates are validated. 
            The purposes of a certificate are considered valid if the certificate has no key usage or 
            if the key usage supports digital signatures or non repudiation.
            </param>
        </member>
        <member name="M:Limilabs.Mail.IMail.CheckSignature(Limilabs.Mail.SignatureValidationConfiguration)">
            <summary>
            Verifies the digital signatures on the signed CMS/PKCS #7 email message and, optionally, validates the signers' certificates.
            Checks also if the content was signed by the person that sent it.
            </summary>
            <param name="configuration">Signature validation configuration.</param>        
        </member>
        <member name="M:Limilabs.Mail.IMail.GetSignedCms">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.Pkcs.SignedCms"/> object for signed emails.
            </summary>
            <returns><see cref="T:System.Security.Cryptography.Pkcs.SignedCms"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.GetEnvelopedCms">
            <summary>
            Gets the <see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms"/> object for encrypted emails.
            </summary>
            <returns><see cref="T:System.Security.Cryptography.Pkcs.EnvelopedCms"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.ReSignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Computes the signature again.
            </summary>
            <param name="certificate">Certificate used for signing.</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.ReSignWith(Limilabs.Mail.SignatureConfiguration)">
            <summary>
            Computes the signature again.
            </summary>
            <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.ExtractSigned">
            <summary>
            Extracts signed message.
            </summary>
            <returns>Extracted email message.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.ExtractSigned(Limilabs.Mail.SMIMEConfiguration)">
            <summary>
            Extracts signed message using specified S/MIME configuration.
            </summary>
            <param name="configuration">S/MIME configuration.</param>
            <returns>Extracted email message.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.ExtractSigned(Limilabs.Mail.MimeConfiguration)">
            <summary>
            Extracts signed message using specified MIME and S/MIME configuration.
            </summary>
            <param name="configuration">Mime configuration.</param>
            <returns>Decrypted email message.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.CheckDKIMSignature">
            <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message. Queries DNS server to get the public key.
            </summary>
            <returns>True if signature was valid, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.CheckDKIMSignature(Limilabs.Mail.DKIMValidationConfiguration)">
            <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message. Queries DNS server to get the public key.
            </summary>
            <param name="configuration">DKIM validation configuration.</param>
            <returns>True if signature was valid, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.CheckDKIMSignature(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message.
            </summary>
            <param name="rsa">RSA class containing public key used for signature validation.</param>
            <returns>True if signature was valid, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.CheckDKIMSignature(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIMValidationConfiguration)">
            <summary>
            Verifies the DKIM (DomainKeys Identified Mail) digital signature on this message.
            </summary>
            <param name="rsa">RSA class containing public key used for signature validation.</param>
            <param name="configuration">DKIM validation configuration.</param>
            <returns>True if signature was valid, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String)">
            <summary>
            Signs this message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="selector">Public key DNS selector (s=).</param>
            <param name="domain">Public key DNS domain (d=).</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)">
            <summary>
            Signs this message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="signatureInfo">DKIM signature information.</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.RenderEml">
            <summary>
            Renders mail message using eml format.
            BCC header is not rendered. 
            </summary>
            <returns>Message in eml format.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.RenderEml(System.Boolean)">
            <summary>
            Renders mail message using eml format. 
            </summary>
            <param name="renderBcc">Specifies if BCC header should be rendered.</param>
            <returns>Message in eml format.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Render">
            <summary>
            Renders mail message using eml format. 
            BCC header is not rendered.
            </summary>
            <returns>Message in eml format.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Render(Limilabs.Mail.Headers.AddressHeaderRenderMode)">
            <summary>
            Renders mail message using eml format. 
            </summary>
            <param name="bccRenderMode">Specifies how BCC header should be rendered.</param>
            <returns>Message in eml format.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Render(System.IO.Stream)">
            <summary>
            Render mail message using eml format to specified stream. 
            BCC header is rendered.
            </summary>
            <param name="stream">Stream to render on.</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.Render(System.IO.Stream,Limilabs.Mail.Headers.AddressHeaderRenderMode)">
            <summary>
            Render mail message using eml format to specified stream.
            </summary>
            <param name="stream">Stream to render on.</param>
            <param name="bccRenderMode">Specifies how BCC header should be rendered.</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.EstimateTransportSize">
            <summary>
            Gets the estimated transport size of this message.
            </summary>
            <returns>Estimated transport size of this message.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Save(System.String)">
            <summary>
            Saves email using eml format to specified file. 
            BCC header is rendered.
            </summary>
            <param name="path">File to write to.</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.GetBodyAsHtml">
            <summary>
            Returns body in HTML format. If <see cref="P:Limilabs.Mail.IMail.IsHtml"/> is false this method uses <see cref="P:Limilabs.Mail.IMail.Text"/> property to create valid HTML.
            </summary>
            <returns>Body of the message in HTML format.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.GetBodyAsHtml(System.Boolean)">
            <summary>
            Returns body in HTML format. If <see cref="P:Limilabs.Mail.IMail.IsHtml"/> is false this method uses <see cref="P:Limilabs.Mail.IMail.Text"/> property to create valid HTML.
            When inlineVisuals is set to true, all visual elements are inlined using 'data:' URI scheme.
            </summary>
            <param name="inlineVisuals">Specifies if visuals should be inlined using 'data:' URI scheme.</param>
            <returns>Body of the message in HTML format.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.GetBodyAsText">
            <summary>
            Returns body in plain text format. Uses <see cref="P:Limilabs.Mail.IMail.Text"/>, <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml"/> or <see cref="M:Limilabs.Mail.IMail.GetTextFromRtf"/>.
            </summary>
            <returns>Body of the message as plain text.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.GetBodyAsText(System.Boolean)">
            <summary>
            Returns body in plain text format. Uses <see cref="P:Limilabs.Mail.IMail.Text"/>, <see cref="M:Limilabs.Mail.IMail.GetTextFromHtml"/> or <see cref="M:Limilabs.Mail.IMail.GetTextFromRtf"/>.
            </summary>
             <param name="includeTextFromVisuals">Specifies if text/plain or text/html inline parts should be added.</param>
            <returns>Body of the message as plain text.</returns>
            <remarks>
            This method is helpful for processing Apple Mail messages, which often have email text split across several text/plain parts.
            </remarks>
        </member>
        <member name="M:Limilabs.Mail.IMail.GetTextFromHtml">
            <summary>
            Extracts plain text from <see cref="P:Limilabs.Mail.IMail.Html"/>. This text may be different from what is actually stored in the email's <see cref="P:Limilabs.Mail.IMail.Text"/> property.
            </summary>
            <returns>HTML body converted to plain text.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.GetTextFromRtf">
            <summary>
            Extracts plain text from <see cref="P:Limilabs.Mail.IMail.Rtf"/>. This text may be different from what is actually stored in the email's <see cref="P:Limilabs.Mail.IMail.Text"/> property.
            </summary>
            <returns>RTF body converted to plain text.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.SaveHtmlAs(System.String)">
            <summary>
            Saves HTML version of the message as regular HTML file.
            Saves all visual elements as files to the same folder.
            If the message is plain text only, this method uses <see cref="M:Limilabs.Mail.IMail.GetBodyAsHtml"/> to create HTML from plain text.
            </summary>
            <param name="fileName">Name of the resulting HTML file (e.g. "c:\\example\\email.html").</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.SaveHtmlAs(System.String,System.Boolean)">
            <summary>
            Saves HTML version of the message as regular HTML file.
            When inlineVisuals is set to true: all visual elements are inlined using data: URI scheme, instead of being saved to disk.
            If the message is plain text only, this method uses <see cref="M:Limilabs.Mail.IMail.GetBodyAsHtml"/> to create HTML from plain text.
            </summary>
            <param name="fileName">Name of the resulting HTML file (e.g. "c:\\example\\email.html").</param>
            <param name="inlineVisuals">Specifies if visuals should be inlined using data: URI scheme, or saved to disk.</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.PriorityHigh">
            <summary>  
            Sets <see cref="P:Limilabs.Mail.IMail.XPriority"/> to 1, <see cref="P:Limilabs.Mail.IMail.Priority"/> to <see cref="F:Limilabs.Mail.Headers.MimePriority.Urgent"/> and
            <see cref="P:Limilabs.Mail.IMail.Importance"/> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.High"/>
            </summary>
        </member>
        <member name="M:Limilabs.Mail.IMail.PriorityLow">
            <summary>  
            Sets <see cref="P:Limilabs.Mail.IMail.XPriority"/> to 5, <see cref="P:Limilabs.Mail.IMail.Priority"/> to <see cref="F:Limilabs.Mail.Headers.MimePriority.NonUrgent"/> and
            <see cref="P:Limilabs.Mail.IMail.Importance"/> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.Low"/>
            </summary>
        </member>
        <member name="M:Limilabs.Mail.IMail.RequestReadReceipt">
            <summary> 
            This method copies <see cref="P:Limilabs.Mail.IMail.From"/> or <see cref="P:Limilabs.Mail.IMail.ReplyTo"/> addresses to all read receipts lists.
            Read receipts are stored using <see cref="P:Limilabs.Mail.IMail.NotificationTo"/>, <see cref="P:Limilabs.Mail.IMail.ReturnReceiptTo"/> and <see cref="P:Limilabs.Mail.IMail.XConfirmReadingTo"/> headers.
            </summary>
            <remarks>
            Read receipt requests may not always be honored because:
            <list>
            <item>Email client may not recognize the special Disposition-Notification-To header; </item>
            <item>Email client may not implement that functionality; </item>
            <item>End user may have that functionality turned off; </item>
            <item>End user may optionally not choose to send one for your particular email; </item>
            </list>
            </remarks>
        </member>
        <member name="M:Limilabs.Mail.IMail.GetReadReceiptAddresses">
            <summary>
            Gets addresses to which read receipt should be send.
            It uses <seealso cref="P:Limilabs.Mail.IMail.ReturnReceiptTo"/>, <see cref="P:Limilabs.Mail.IMail.NotificationTo"/> and <see cref="P:Limilabs.Mail.IMail.XConfirmReadingTo"/> header.
            Duplicates are removed. It returs an empty list, if read receipt was not requested.
            </summary>
            <returns>Addresses to which read receipt should be send or an empty list, if read receipt was not requested.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.GetGenericPriority">
            <summary>
            Gets message priority.
            It checks following headers in the specified order: <see cref="P:Limilabs.Mail.IMail.Priority"/>, <see cref="P:Limilabs.Mail.IMail.Importance"/>, <see cref="P:Limilabs.Mail.IMail.XPriority"/>.
            </summary>
            <returns>Priority of the message.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Reply">
            <summary>
            Creates <see cref="T:Limilabs.Mail.ReplyBuilder"/> configured to reply to this email.
            </summary>
            <returns>ReplyBuilder that can be used to create a reply.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.Forward">
            <summary>
            Creates <see cref="T:Limilabs.Mail.ForwardBuilder"/> configured to forward this email.
            </summary>
            <returns>ForwardBuilder that can be used to create a forwarded email.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.ExtractAttachmentsFromInnerMessages">
            <summary>
            Extracts attachments from this message and all attached messages (<see cref="T:Limilabs.Mail.MIME.MimeRfc822"/> objects with <see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822" /> content type).
            </summary>
            <returns>
            List of all attachments in this email message and all attached messages. 
            It contains both <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Attachment"/> and <see cref="F:Limilabs.Mail.Headers.MimeDisposition.Inline"/> attachments (<see cref="P:Limilabs.Mail.IMail.Attachments"/> collection).
            </returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.ToBuilder">
            <summary>
            Creates new, fully initialized <see cref="T:Limilabs.Mail.MailBuilder"/> instance, with all data imported from this email object.
            </summary>
            <returns>New, fully initialized MailBuilder instance.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMail.RemoveAttachments">
            <summary>
            Removes all attachments (NonVisuals) and visual elements from this email.
            Same as invoking RemoveAttachments(new AttachmentRemoverConfiguration()).
            </summary>
        </member>
        <member name="M:Limilabs.Mail.IMail.RemoveAttachments(Limilabs.Mail.AttachmentRemoverConfiguration)">
            <summary>
            Removes attachments and visual elements from this email, according to configuration settings.
            </summary>
            <param name="configuration">Specifies configuration options, such as if visual elements should be removed.</param>
        </member>
        <member name="M:Limilabs.Mail.IMail.ReplaceAttachments">
            <summary>
            Replaces all attachments (NonVisuals) and visual elements with text indicating that attachment/visual was removed.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.IMail.ReplaceAttachments(Limilabs.Mail.AttachmentReplacerConfiguration)">
            <summary>
            Replaces attachments and visual elements with text indicating that attachment/visual was removed, according to configuration settings.
            </summary>
            <param name="configuration">Specifies configuration options, such as text templates.</param>
        </member>
        <member name="T:Limilabs.Mail.MailBuilder">
            <summary>
            Provides methods for <see cref="T:Limilabs.Mail.IMail"/> object creation.
            You should use <see cref="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.Byte[])"/> if you already have an eml data downloaded via <see cref="T:Limilabs.Client.POP3.Pop3"/> or <see cref="T:Limilabs.Client.IMAP.Imap"/> client.
            You should use other properties and <see cref="M:Limilabs.Mail.MailBuilder.Create"/> method to create message that you'll send using <see cref="T:Limilabs.Client.SMTP.Smtp"/> client.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.NonVisuals">
            <summary>
            Gets the list of all non visual elements. You can use <see cref="M:Limilabs.Mail.MailBuilder.AddAttachment(System.Byte[])"/> method to add attachment to this collection.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Visuals">
            <summary>
            Gets the list of all visual elements. You can use <see cref="M:Limilabs.Mail.MailBuilder.AddVisual(System.Byte[])"/> method to add attachment to this collection.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Alternatives">
            <summary>
            Gets the list of all alternative elements. You can use <see cref="M:Limilabs.Mail.MailBuilder.AddAlternative(System.Byte[])"/> or <see cref="M:Limilabs.Mail.MailBuilder.AddAppointment(Limilabs.Mail.Appointments.Appointment)"/> methods to add attachment to this collection.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Text">
            <summary>
            Gets or sets plain text version of the email. Please remember that setting <see cref="P:Limilabs.Mail.MailBuilder.Html"/> will override plain text.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Html">
            <summary>
            Gets or sets HTML version of the email. 
            If value is not empty extracts plain text from HTML and overrides <see cref="P:Limilabs.Mail.MailBuilder.Text"/> property.
            </summary>
            <see cref="P:Limilabs.Mail.MailBuilder.CreatePlainTextAutomatically"/>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Rtf">
            <summary>
            Gets or sets RTF version of the email. 
            If value is not empty extracts plain text from RTF and overrides <see cref="P:Limilabs.Mail.MailBuilder.Text"/> property.
            </summary>
            <see cref="P:Limilabs.Mail.MailBuilder.CreatePlainTextAutomatically"/>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Subject">
            <summary>
            Gets or sets subject of a message ('Subject' header).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.MessageID">
            <summary>
            Gets or sets id of a email message ('Message-ID' header). Does not include surrounding brackets (&lt; and &gt;).
            If not set or set to null generated automatically.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.References">
            <summary>
            Gets unique ids (<see cref="P:Limilabs.Mail.IMail.MessageID"/>) of the referenced email messages ('References' header). Does not include brackets (&lt; and &gt;).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.InReplyTo">
            <summary>
            Gets or sets the id of the parent email message ('In-Reply-To' header). Does not include surrounding brackets (&lt; and &gt;).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.From">
            <summary>
            Gets the author(s) of this email message ('From' header).
            If it's empty, email message is NOT <a href="https://www.limilabs.com/mail/rfc/2822">RFC 2822</a> compliant.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Sender">
            <summary>
            Gets or sets mailbox of the agent responsible for the actual transmission of this email message ('Sender' header).
            </summary>
            <remarks>
            'Sender' is not required if <see cref="P:Limilabs.Mail.MailBuilder.From"/> property contains only one <see cref="T:Limilabs.Mail.Headers.MailBox"/>.
            'Sender' property is needed when message is from more than one person (<see cref="P:Limilabs.Mail.MailBuilder.From"/> contains more than one mailbox).
            In such case Sender provides information which mailbox is responsible for the actual transmission.
            </remarks>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.ReplyTo">
            <summary>
            Gets email address(es) to which the author of this email message suggests that replies be sent ('Reply-to' header).
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox"/> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> to represent group of email addresses.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.To">
            <summary>
            Gets address(es) of the primary recipient(s) of this email message ('To' header).
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox"/> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> to represent group of email addresses.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Cc">
            <summary>
            Gets the address(es) of others who are to receive this email message ('CC', Carbon Copy header), even tough the content of the message may not be directed at them. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox"/> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> to represent group of email addresses.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Bcc">
            <summary>
            Gets the address(es) of others who are to receive this email message ('BCC', Blind Carbon Copy header), even tough the content of the message may not be directed at them. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox"/> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> to represent group of email addresses.
            BCC header is not rendered when <see cref="M:Limilabs.Mail.IMail.Render"/> method is used, however it is rendered when message is saved using <see cref="M:Limilabs.Mail.IMail.Save(System.String)"/> method.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.EnvelopeTo">
            <summary>
            Gets or sets the address of the recipient taken from the SMTP envelope (SMTP "RCTP FROM").
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.RcptTo">
            <summary>
            Gets or sets the address of the recipient taken from the SMTP envelope (SMTP "RCTP FROM").
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.XRcptTo">
            <summary>
            Gets or sets the address of the recipient taken from the SMTP envelope (SMTP "RCTP FROM").
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.EnvelopeFrom">
            <summary>
            Gets or sets the address of the sender taken from the SMTP envelope (SMTP "MAIL FROM").
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.XEnvelopeFrom">
            <summary>
            Gets or sets the address of the sender taken from the SMTP envelope (SMTP "MAIL FROM").
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.NotificationTo">
            <summary>
            Gets the disposition notifications address(es) ('Disposition-Notification-To' header). 
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.RequestReadReceipt"/> method instead of adding addresses to this property.
            </summary>
            <seealso cref="M:Limilabs.Mail.MailBuilder.RequestReadReceipt"/>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.ReturnReceiptTo">
            <summary>
            Gets return receipt address(es) ('Return-Receipt-To' header).
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.RequestReadReceipt"/> method instead of adding addresses to this property.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.XConfirmReadingTo">
            <summary>
            Gets confirm reading address(es) ('X-Confirm-Reading-To' header).
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.RequestReadReceipt"/> method instead of adding addresses to this property.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.ReturnPath">
            <summary>
            Gets or sets return path address ('Return-Path' header). Does not include brackets (&lt; and &gt;).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Date">
            <summary>
            Gets or sets the send date of a email message ('Date' header).
            If null, <see cref="P:Limilabs.Mail.IMail.Date"/> is set automatically to current date and time when <see cref="M:Limilabs.Mail.MailBuilder.Create"/> method is used.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Importance">
            <summary>
            Gets or sets the importance of a email message ('Importance' header).
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.PriorityHigh"/> or <see cref="M:Limilabs.Mail.MailBuilder.PriorityLow"/> methods instead of setting this field.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Priority">
            <summary>
            Gets or sets the priority of a email message ('Priority' header).
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.PriorityHigh"/> or <see cref="M:Limilabs.Mail.MailBuilder.PriorityLow"/> methods instead of setting this field.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.XPriority">
            <summary>
            Gets or sets the X-Priority of this email message ('X-Priority' header) (Outlook specific).
            Value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            Consider using <see cref="M:Limilabs.Mail.MailBuilder.PriorityHigh"/> or <see cref="M:Limilabs.Mail.MailBuilder.PriorityLow"/> methods instead of setting this field.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.Sensitivity">
            <summary>
            Gets or sets the sensitivity of a email message ('Sensitivity' header).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.SetDefaults">
            <summary>
            Gets or set the value indicating whether default values (<see cref="P:Limilabs.Mail.MailBuilder.MessageID"/>, <see cref="P:Limilabs.Mail.MailBuilder.Date"/>, <see cref="P:Limilabs.Mail.MailBuilder.Sender"/>) should be set.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.SMIMEConfiguration">
            <summary>
            Gets or sets S/MIME configuration (automatic decryption, signed message extraction, certificates used for decryption and signature validation).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.MimeConfiguration">
            <summary>
            Gets MIME configuration (automatic binhex, apple, uue, tnef, rfc822 processing).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.ProcessTnefAutomatically">
            <summary>
            Gets or sets a value indicating if TNEF attachments (winmail.dat) should be processed.
            TNEF processing extracts attachments and RTF data from TNEF file and removes TNEF from attachments collections afterwards.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.ProcessUueAutomatically">
            <summary>
            Gets or sets a value indicating if inline UUE attachments should be extracted.
            Default is true.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.RemoveInlinedUue"/>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.RemoveInlinedUue">
            <summary>
            Gets or sets a value indicating if text representation of inline UUE attachments should be removed from <see cref="P:Limilabs.Mail.MailBuilder.Text"/>.
            Default is false. This property has no affect if <see cref="P:Limilabs.Mail.MailBuilder.ProcessUueAutomatically"/> is set to false.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.ProcessUueAutomatically"/>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.ProcessBinHexAutomatically">
            <summary>
            Gets or sets a value indicating if file stored in BinHex attachments (<see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationBinHex"/>) should be extracted.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.ProcessAppleAutomatically">
            <summary>
            Gets or sets a value indicating if files stored in AppleSingle (<see cref="F:Limilabs.Mail.Headers.ContentType.ApplicationAppleFile"/>) and AppleDouble (<see cref="F:Limilabs.Mail.Headers.ContentType.MultipartAppleDouble"/>) entities should be extracted.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.ExtractRfc822Automatically">
            <summary>
            Gets or sets a value indicating if message (<see cref="F:Limilabs.Mail.Headers.ContentType.MessageRfc822"/>, <see cref="F:Limilabs.Mail.Headers.ContentType.MessageGlobal"/>) being a single root should be extracted.
            Default is true.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailBuilder.CreatePlainTextAutomatically">
            <summary>
            Gets or sets a value indicating if plain text version of a body is extracted from HTML when <see cref="P:Limilabs.Mail.MailBuilder.Html"/> ot <see cref="P:Limilabs.Mail.MailBuilder.Rtf"/> property is set.
            Default is true.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.#ctor">
            <summary>
            Creates new MailBuilder object.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddCustomHeader(System.String,System.String)">
            <summary>
            Adds custom header that will be added to <see cref="T:Limilabs.Mail.IMail"/> object after creation.
            </summary>
            <param name="header">Header name.</param>
            <param name="value">Header value.</param>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Signs the message.
            </summary>
            <param name="certificate">Certificate used for signing.</param>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.SignWith(Limilabs.Mail.SignatureConfiguration)">
            <summary>
            Signs the message.
            </summary>
            <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.EncryptWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Encrypts the message using specified certificate.
            You can call this method multiple times to use several certificates for encryption.
            General rule is that both sender and receiver should be able to decrypt the message.
            </summary>
            <param name="certificate">Certificate to use for encryption.</param>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.EncryptWith(Limilabs.Mail.EncryptionConfiguration)">
            <summary>
            Encrypts the message using specified encryption configuration.
            </summary>
            <param name="configuration">Encryption configuration: such as certificates, algorithm etc.</param>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String)">
            <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            You can call this method multiple times to have several DKIM signatures present in the resulting message.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="publicKeyDnsSelector">DNS public key domain selector.</param>
            <param name="publicKeyDnsDomain">DNS public key domain.</param>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)">
            <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            You can call this method multiple times to have several DKIM signatures present in the resulting message.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="signatureInfo">DKIM signature information.</param>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.PriorityHigh">
            <summary>  
            Sets <see cref="P:Limilabs.Mail.MailBuilder.XPriority"/> to 1, <see cref="P:Limilabs.Mail.MailBuilder.Priority"/> to <see cref="F:Limilabs.Mail.Headers.MimePriority.Urgent"/> and <see cref="P:Limilabs.Mail.MailBuilder.Importance"/> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.High"/>
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.PriorityLow">
            <summary>  
            Sets <see cref="P:Limilabs.Mail.MailBuilder.XPriority"/> to 5, <see cref="P:Limilabs.Mail.MailBuilder.Priority"/> to <see cref="F:Limilabs.Mail.Headers.MimePriority.NonUrgent"/> and <see cref="P:Limilabs.Mail.MailBuilder.Importance"/> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.Low"/>
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.RequestReadReceipt">
            <summary> 
            This method copies <see cref="P:Limilabs.Mail.MailBuilder.From"/> or <see cref="P:Limilabs.Mail.MailBuilder.ReplyTo"/> addresses to all read receipts lists, just before email is created (using <see cref="M:Limilabs.Mail.MailBuilder.Create"/> method).
            Read receipts are stored using <see cref="P:Limilabs.Mail.IMail.NotificationTo"/>, <see cref="P:Limilabs.Mail.IMail.ReturnReceiptTo"/> and <see cref="P:Limilabs.Mail.IMail.XConfirmReadingTo"/> headers.
            </summary>
            <remarks>
            Read receipt requests may not always be honored because:
            <list>
            <item>Email client may not recognize the special Disposition-Notification-To header; </item>
            <item>Email client may not implement that functionality; </item>
            <item>End user may have that functionality turned off; </item>
            <item>End user may optionally not choose to send one for your particular email; </item>
            </list>
            </remarks>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddAttachment(System.String)">
            <summary>
            Adds attachment. Data are read from the specified file.
            </summary>
            <param name="path">The file to read data from.</param>
            <returns>Newly added attachment.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddAttachment(System.Byte[])">
            <summary>
            Adds attachment with specified data.
            </summary>
            <param name="data">Data that will be contained in newly added attachment.</param>
            <returns>Newly added attachment.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddAttachment(Limilabs.Mail.MIME.MimeData)">
            <summary>
            Adds attachment.
            </summary>
            <param name="attachment">Attachment to add.</param>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData"/>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData(System.Byte[])"/>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText"/>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText(System.String)"/>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddVisual(System.String)">
            <summary>
            Adds visual object. Data are read from the specified file.
            </summary>
            <param name="path">The file to read data from.</param>
            <returns>Newly added visual object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddVisual(System.Byte[])">
            <summary>
            Adds visual object with specified data.
            </summary>
            <param name="data">Data that will be contained in newly added visual object.</param>
            <returns>Newly added visual object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddVisual(Limilabs.Mail.MIME.MimeData)">
            <summary>
            Adds visual object. 
            </summary>
            <param name="visual">Visual attachment to add.</param>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData"/>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData(System.Byte[])"/>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText"/>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText(System.String)"/>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddAlternative(System.Byte[])">
            <summary>
            Adds alternative view for this message.
            </summary>
            <param name="data">Data that will be contained in newly added alternative view.</param>
            <returns>Newly added alternative view.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddAlternative(Limilabs.Mail.MIME.MimeBase)">
            <summary>
            Adds alternative view for this message.
            </summary>
            <param name="alternativeView">Alternative view to add.</param>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData"/>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeData(System.Byte[])"/>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText"/>
            <seealso cref="M:Limilabs.Mail.MIME.MimeFactory.CreateMimeText(System.String)"/>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddAppointment(Limilabs.Mail.Appointments.Appointment)">
            <summary>
            Adds specified appointment as alternative view for this message. 
            </summary>
            <param name="appointment">Appointment to add.</param>
            <returns>Newly created MimeCalendar object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.AddVCard(Limilabs.Mail.BusinessCard.VCard)">
            <summary>
            Adds specified VCARD as attachment to this message. 
            </summary>
            <param name="vCard">VCard business card to add.</param>
            <returns>Newly created MimeVCard object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.Create">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> using builder configuration.
            </summary>
            <returns>New <see cref="T:Limilabs.Mail.IMail"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.CreateFromDocument(Limilabs.Mail.MimeDocument)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> using specified MIME document.
            </summary>
            <param name="document">MIME document.</param>
            <returns>New <see cref="T:Limilabs.Mail.IMail"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.String)">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> using specified eml raw data string.
            </summary>
            <param name="eml">Raw eml data string.</param>
            <returns>New <see cref="T:Limilabs.Mail.IMail"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.CreateFromEml(System.Byte[])">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> using specified eml raw data.
            </summary>
            <param name="eml">Raw eml data.</param>
            <returns>New <see cref="T:Limilabs.Mail.IMail"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.CreateFromEmlFile(System.String)">
            <summary>
            Loads raw eml data from file and creates new <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <remarks>Usually email files have *.eml extension.</remarks>
            <param name="path">The file to read raw eml data from.</param>
            <returns>New <see cref="T:Limilabs.Mail.IMail"/> object.</returns>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.LoadHtml(System.String)">
            <summary>
            Sets HTML version of the message.
            Modifies passed HTML, so that img tags reference inline images.
            Adds all images that can be found on disk to <see cref="P:Limilabs.Mail.MailBuilder.Visuals"/> collection.
            Extracts plain text from HTML and overrides <see cref="P:Limilabs.Mail.MailBuilder.Text"/> property.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.Html"/>
            <param name="html">HTML to be set.</param>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.LoadHtml(System.String,System.String)">
            <summary>
            Sets HTML version of the message.
            Modifies passed HTML, so that img tags reference inline images.
            Adds all images that can be found on disk to <see cref="P:Limilabs.Mail.MailBuilder.Visuals"/> collection.
            Extracts plain text from HTML and overrides <see cref="P:Limilabs.Mail.MailBuilder.Text"/> property.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.Html"/>
            <param name="html">HTML to be set.</param>
            <param name="rootFolder">Base folder to search images in.</param>
        </member>
        <member name="M:Limilabs.Mail.MailBuilder.LoadHtml(System.String,Limilabs.Mail.LoadHtmlConfiguration)">
            <summary>
            Sets HTML version of the message.
            Modifies passed HTML, so that img tags reference inline images.
            Adds all images that can be found on disk to <see cref="P:Limilabs.Mail.MailBuilder.Visuals"/> collection.
            Extracts plain text from HTML and overrides <see cref="P:Limilabs.Mail.MailBuilder.Text"/> property.
            </summary>
            <seealso cref="P:Limilabs.Mail.MailBuilder.Html"/>
            <param name="html">HTML to be set.</param>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="T:Limilabs.Mail.SignatureException">
            <summary>
            Represents an error that occurred during signature validation or signing.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.SignatureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of ImapResponseException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="T:Limilabs.Mail.Fluent.IFluentAttachment">
            <summary>
            Represents attachment configuration.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentAttachment.SetFileName(System.String)">
            <summary>
            Sets the attachment's file name.
            </summary>
            <param name="fileName">FileName of the attachment.</param>
            <returns>Attachment configuration</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentAttachment.SetFileName(System.String,System.Boolean)">
            <summary>
            Sets the <see cref="P:Limilabs.Mail.MIME.MimeData.FileName"/> and <see cref="P:Limilabs.Mail.MIME.MimeBase.ContentType"/> value if requested.
            </summary>
            <param name="fileName">Suggested file name.</param>
            <param name="guessContentType">True if <see cref="P:Limilabs.Mail.MIME.MimeBase.ContentType"/> should be set based on the file name extension.</param>
            <returns>Newly added attachment.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentAttachment.SetContentId(System.String)">
            <summary>
            Sets the attachment's Content-Id.
            </summary>
            <param name="contentId">Content-Id of the attachment.</param>
            <returns>Attachment configuration</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentAttachment.SetContentType(Limilabs.Mail.Headers.ContentType)">
            <summary>
            Sets the attachment's Content-type.
            </summary>
            <param name="contentType">Content-Type of the attachment.</param>
            <returns>Attachment configuration</returns>
        </member>
        <member name="T:Limilabs.Mail.Fluent.IFluentMail">
            <summary>
            Email configuration.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Text(System.String)">
            <summary>
            Sets plain text version of the email. Please remember that using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Html(System.String)"/> method will override plain text.
            </summary>
            <param name="text">Plain text version of email body.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Html(System.String)">
            <summary>
            Sets HTML version of the email. 
            If <paramref name="html"/> is not empty extracts plain text from HTML and overrides <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Text(System.String)"/>.
            </summary>
            <param name="html">HTML version of email body.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.From(System.String)">
            <summary>
            Sets the author of this email ('From' header).
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="address">Email address of the email's author.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.From(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Sets the author of this email ('From' header).
            </summary>
            <param name="from">Email's author.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Sender(System.String)">
            <summary>
            Sets mailbox of the agent responsible for the actual transmission of this email message ('Sender' header).
            </summary>
            <param name="address">Email address of the email's sender.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Sender(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Sets mailbox of the agent responsible for the actual transmission of this email message ('Sender' header).
            </summary>
            <param name="from">Email's sender.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.ReplyTo(System.String)">
            <summary>
            Sets email address(es) to which the author of this email message suggests that replies be sent ('Reply-to' header).
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="address">Reply-To email address.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.ReplyTo(Limilabs.Mail.Headers.MailAddress)">
            <summary>
            Sets email address(es) to which the author of this email message suggests that replies be sent ('Reply-to' header).
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox"/> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> to represent group of email addresses.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="replyTo">Reply-To mailbox.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.To(System.String)">
            <summary>
            Sets address(es) of the primary recipient(s) of this email message ('To' header).
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="address">Email address of the email recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.To(Limilabs.Mail.Headers.MailAddress)">
            <summary>
            Sets address(es) of the primary recipient(s) of this email message ('To' header).
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox"/> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> to represent group of email addresses.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="to">Email recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Cc(System.String)">
            <summary>
            Sets the address(es) of others who are to receive this email message ('CC', Carbon Copy header), even tough the content of the message may not be directed at them. 
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="address">CC recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Cc(Limilabs.Mail.Headers.MailAddress)">
            <summary>
            Sets the address(es) of others who are to receive this email message ('CC', Carbon Copy header), even tough the content of the message may not be directed at them. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox"/> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> to represent group of email addresses.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="cc">Email address of the CC recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Bcc(System.String)">
            <summary>
            Sets the address(es) of others who are to receive this email message ('BCC', Blind Carbon Copy header), even tough the content of the message may not be directed at them. 
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="address">Email address of the BCC recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Bcc(Limilabs.Mail.Headers.MailAddress)">
            <summary>
            Sets the address(es) of others who are to receive this email message ('BCC', Blind Carbon Copy header), even tough the content of the message may not be directed at them. 
            You can use <see cref="T:Limilabs.Mail.Headers.MailBox"/> to represent single mailbox, or <see cref="T:Limilabs.Mail.Headers.MailGroup"/> to represent group of email addresses.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="bcc">BCC recipient.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.NotificationTo(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Sets the disposition notifications address(es) ('Disposition-Notification-To' header). 
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt"/> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="notification">Disposition-Notification-To mailbox.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.NotificationTo(System.String)">
            <summary>
            Sets the disposition notifications address(es) ('Disposition-Notification-To' header). 
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt"/> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="address">Disposition-Notification-To email address.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.ReturnReceiptTo(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Sets return receipt address(es) ('Return-Receipt-To' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt"/> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="returnReceiptTo">Return-Receipt-To mailbox.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.ReturnReceiptTo(System.String)">
            <summary>
            Sets return receipt address(es) ('Return-Receipt-To' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt"/> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="address">Return-Receipt-To email address.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.XConfirmReadingTo(Limilabs.Mail.Headers.MailBox)">
            <summary>
            Sets confirm reading address(es) ('X-Confirm-Reading-To' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt"/> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="confirmReadingTo">X-Confirm-Reading-To mailbox.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.XConfirmReadingTo(System.String)">
            <summary>
            Sets confirm reading address(es) ('X-Confirm-Reading-To' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt"/> method instead of using this method.
            This method can be used multiple times to set many addresses.
            </summary>
            <param name="address">X-Confirm-Reading-To email address.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.RequestReadReceipt">
            <summary> 
            This method copies From or ReplyTo addresses to all read receipts lists.
            Read receipts are stored using <see cref="P:Limilabs.Mail.IMail.NotificationTo"/>, <see cref="P:Limilabs.Mail.IMail.ReturnReceiptTo"/> and <see cref="P:Limilabs.Mail.IMail.XConfirmReadingTo"/> headers.
            </summary>
            <remarks>
            Read receipt requests may not always be honored because:
            <list>
            <item>Email client may not recognize the special Disposition-Notification-To header; </item>
            <item>Email client may not implement that functionality; </item>
            <item>End user may have that functionality turned off; </item>
            <item>End user may optionally not choose to send one for your particular email; </item>
            </list>
            </remarks>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Priority(Limilabs.Mail.Headers.MimePriority)">
            <summary>
            Sets the priority of a email message ('Priority' header).
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityHigh"/> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityLow"/> methods instead of using this method.
            </summary>
            <param name="mimePriority">Message's priority.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.XPriority(System.Int32)">
            <summary>
            Sets the X-Priority of this email message ('X-Priority' header) (Outlook specific).
            Value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityHigh"/> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityLow"/> methods instead of using this method.
            </summary>
            <param name="priority">Message's priority value ranges from "1" to "5" where "1" is the highest priority, "3" is normal, and "5" is the lowest priority.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Importance(Limilabs.Mail.Headers.MimeImportance)">
            <summary>
            Sets the importance of the message.
            Consider using <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityHigh"/> or <see cref="M:Limilabs.Mail.Fluent.IFluentMail.PriorityLow"/> methods instead of using this method.
            </summary>
            <param name="mimeImportance">Message's importance.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Sensitivity(Limilabs.Mail.Headers.MimeSensitivity)">
            <summary>
            Sets the sensitivity of a email message ('Sensitivity' header).
            </summary>
            <param name="sensitivity">Message's sensitivity.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.PriorityHigh">
            <summary>  
            Sets <see cref="M:Limilabs.Mail.Fluent.IFluentMail.XPriority(System.Int32)"/> to 1, <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Priority(Limilabs.Mail.Headers.MimePriority)"/> to <see cref="F:Limilabs.Mail.Headers.MimePriority.Urgent"/> and
            <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Importance(Limilabs.Mail.Headers.MimeImportance)"/> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.High"/>
            </summary>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.PriorityLow">
            <summary>  
            Sets <see cref="M:Limilabs.Mail.Fluent.IFluentMail.XPriority(System.Int32)"/> to 5, <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Priority(Limilabs.Mail.Headers.MimePriority)"/> to <see cref="F:Limilabs.Mail.Headers.MimePriority.NonUrgent"/> and
            <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Importance(Limilabs.Mail.Headers.MimeImportance)"/> to <see cref="F:Limilabs.Mail.Headers.MimeImportance.Low"/>
            </summary>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.MessageID(System.String)">
            <summary>
            Sets id of a email message ('Message-ID' header). If not set or set to null generated automatically.
            </summary>
            <param name="messageId">Message id without surrounding brackets.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.References(System.String)">
            <summary>
            Adds unique id (<see cref="P:Limilabs.Mail.IMail.MessageID"/>) of the referenced email message ('References' header).
            </summary>
            <param name="messageId">Referenced message id without surrounding brackets.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.InReplyTo(System.String)">
            <summary>
            Sets the id of the parent email message ('In-Reply-To' header).
            </summary>
            <param name="messageId">Referenced message id without surrounding brackets.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Subject(System.String)">
            <summary>
            Sets subject of a message ('Subject' header).
            </summary>
            <param name="subject">Subject of the message.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Date(System.DateTime)">
            <summary>
            Sets the send date of a email message ('Date' header).
            If null, <see cref="P:Limilabs.Mail.IMail.Date"/> is set automatically to current date and time when <see cref="M:Limilabs.Mail.Fluent.IFluentMail.Create"/> method is used.
            </summary>
            <param name="date">Date of the message.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddCustomHeader(System.String,System.String)">
            <summary>
            Adds custom header.
            </summary>
            <param name="header">Header name.</param>
            <param name="value">Header value.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddAttachment(System.String)">
            <summary>
            Adds a attachment to the message.
            </summary>
            <param name="path">The file to read data from.</param>
            <returns>Email configuration for this attachment.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddAttachment(System.Byte[])">
            <summary>
            Adds a attachment to the message.
            </summary>
            <param name="data">Data of the attachment.</param>
            <returns>Email configuration for this attachment.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddVisual(System.String)">
            <summary>
            Adds a visual attachment to the message.
            </summary>
            <param name="path">The file to read data from.</param>
            <returns>Email configuration for this attachment.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddVisual(System.Byte[])">
            <summary>
            Adds a visual attachment to the message.
            </summary>
            <param name="data">Data of the visual attachment.</param>
            <returns>Email configuration for this attachment.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddAlternative(Limilabs.Mail.MIME.MimeBase)">
            <summary>
            Adds alternative view for this message.
            </summary>
            <param name="alternativeView">Alternative view to add.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddAppointment(Limilabs.Mail.Appointments.Appointment)">
            <summary>
            Adds specified appointment as alternative view for this message. 
            </summary>
            <param name="appointment">Appointment to add.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.AddVCard(Limilabs.Mail.BusinessCard.VCard)">
            <summary>
            Adds specified VCARD as attachment to this message. 
            </summary>
            <param name="vCard">VCard business card to add.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.SignWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Signs the message.
            </summary>
            <param name="certificate">Certificate used for signing.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.SignWith(Limilabs.Mail.SignatureConfiguration)">
            <summary>
            Signs the message.
            </summary>
            <param name="configuration">Signature configuration: such as certificate, algorithm etc.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.EncryptWith(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Encrypts the message using specified certificate.
            You can call this method multiple times to use several certificates for encryption.
            General rule is that both sender and receiver should be able to decrypt the message.
            </summary>
            <param name="certificate">Certificate to use for encryption.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.EncryptWith(Limilabs.Mail.EncryptionConfiguration)">
            <summary>
            Encrypts the message using specified encryption configuration.
            General rule is that both sender and receiver should be able to decrypt the message.
            </summary>
            <param name="configuration">Encryption configuration: such as certificates, algorithm etc.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.String)">
            <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="publicKeyDnsSelector">DNS public key domain selector.</param>
            <param name="publicKeyDnsDomain">DNS public key domain.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.DKIMSign(System.Security.Cryptography.RSACryptoServiceProvider,Limilabs.Mail.DKIM.DKIMSignatureInfo)">
            <summary>
            Signs the message using DKIM (DomainKeys Identified Mail) signature.
            </summary>
            <param name="rsa">RSA class containing private key used for signing.</param>
            <param name="signatureInfo">DKIM signature information.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Create">
            <summary>
            Creates new <see cref="T:Limilabs.Mail.IMail"/> object.
            </summary>
            <returns>Email object.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.UsingNewSmtp">
            <summary>
            Creates new SMTP configuration for this message with localhost set as a server.
            </summary>
            <returns>Email configuration for SMTP server connection.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.UsingNewSmtp(System.String)">
            <summary>
            Creates new SMTP configuration for this message with specified server address.
            </summary>
            <param name="server">Server address.</param>
            <returns>Email configuration for SMTP server connection.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.IFluentMail.Send(Limilabs.Client.SMTP.Smtp)">
            <summary>
            Sends the message using provided SMTP client instance.
            </summary>
            <returns>Result of the sending operation. You can examine <see cref="P:Limilabs.Client.SMTP.ISendMessageResult.Status"/> property to check if the operation succeed.</returns>
            <remarks>
            SMTP client connection should be already opened and user logged in if required.
            </remarks>
            <param name="client">SMTP client instance used for sending.</param>
        </member>
        <member name="T:Limilabs.Mail.Fluent.INewSmtp">
            <summary>
            Represents SMTP connection configuration.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Fluent.INewSmtp.Server(System.String)">
            <summary>
            Sets host name. IP address can also be used.
            You can use <see cref="M:Limilabs.Mail.Fluent.INewSmtp.OnPort(System.Int32)"/> method to specify non default port.
            </summary>
            <param name="serverName">Host name or IP address.</param>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.INewSmtp.WithSSL">
            <summary>
            Instructs to use secure SSL connection.
            Changes port to default SSL port (465) for SMTP protocol.
            </summary>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.INewSmtp.WithSSL(Limilabs.Client.ServerCertificateValidateEventHandler)">
            <summary>
            Instructs to use secure SSL connection.
            Changes port to default SSL port (465) for SMTP protocol.
            </summary>
            <param name="certificateValidateEventHandler">Event which is called for custom server validation.</param>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.INewSmtp.OnPort(System.Int32)">
            <summary>
            Sets the port on which connection will be made.
            </summary>
            <param name="port">Port number.</param>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.INewSmtp.WithCredentials(System.String,System.String)">
            <summary>
            Sets the SMTP server credentials.
            </summary>
            <param name="user">User name.</param>
            <param name="password">User's password.</param>
            <returns>SMTP connection configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.INewSmtp.Send">
            <summary>
            Sends the message.
            </summary>
            <returns>Result of the sending operation. You can examine <see cref="P:Limilabs.Client.SMTP.ISendMessageResult.Status"/> property to check if the operation succeed.</returns>
            <remarks>
            SMTP connection is created, opened, and closed.
            </remarks>
        </member>
        <member name="T:Limilabs.Mail.Fluent.Mail">
            <summary>
            Allows creation and sending emails using fluent interface syntax.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Fluent.Mail.Text(System.String)">
            <summary>
            Creates new plain text email.
            </summary>
            <param name="text">Email content.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="M:Limilabs.Mail.Fluent.Mail.Html(System.String)">
            <summary>
            Creates new HTML email.
            </summary>
            <param name="html">Email content in HTML format.</param>
            <returns>Email configuration.</returns>
        </member>
        <member name="T:Limilabs.Mail.IMimeDataReadOnlyCollection">
            <summary>
            Interface for read-only access to MimeData collection.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMimeDataReadOnlyCollection.Item(System.String)">
            <summary>
            Gets or set <see cref="T:Limilabs.Mail.MIME.MimeData"/> object with specified content-id.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMimeDataReadOnlyCollection.Item(System.Int32)">
            <summary>
            Gets or set <see cref="T:Limilabs.Mail.MIME.MimeData"/> object at specified index.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.IMimeDataReadOnlyCollection.Count">
            <summary>
            Gets the number of elements stored in the collection.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.IMimeDataReadOnlyCollection.ForEach(System.Action{Limilabs.Mail.MIME.MimeData})">
            <summary>
            Performs specified action on each element of the collection.
            </summary>
            <param name="action">Action that will be performed on each element of the collection.</param>
        </member>
        <member name="M:Limilabs.Mail.IMimeDataReadOnlyCollection.Find(System.Predicate{Limilabs.Mail.MIME.MimeData})">
             <summary>
             Finds first element that matches specified predicate.
             </summary>
             <param name="predicate">Predicate used to find an element.</param>
            <returns>Found element.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMimeDataReadOnlyCollection.FindAll(System.Predicate{Limilabs.Mail.MIME.MimeData})">
             <summary>
             Finds all elements that matches specified predicate.
             </summary>
             <param name="predicate">Predicate used to find elements.</param>
            <returns>Found elements.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMimeDataReadOnlyCollection.Contains(Limilabs.Mail.MIME.MimeData)">
            <summary>
            Determines whether element is in this collection.
            </summary>
            <param name="item">Element to check.</param>
            <returns>Boolean value indicating whether element is in this collection.</returns>
        </member>
        <member name="M:Limilabs.Mail.IMimeDataReadOnlyCollection.ToList">
            <summary>
            Creates a new list that contains all elements from this collection.
            </summary>
            <returns>New list that contains elements from this collection.</returns>
        </member>
        <member name="T:Limilabs.Mail.MailException">
            <summary>
            Represents an error that occurred during e-mail parsing.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MailException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of MailException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="T:Limilabs.Mail.MimeDocument">
            <summary>
            Represents MIME document tree.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeDocument.Root">
            <summary>
            Reference to the top most MIME object in this document.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeDocument.MimeVersion">
            <summary>
            Gets or sets MIME version ('MIME-version' header).
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeDocument.DKIMSignatureInfo">
            <summary>
            Gets DKIM signature information from the first 'DKIM-Signature' header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeDocument.DKIMSignatureInfos">
            <summary>
            Gets DKIM signature information.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MimeDocument.Headers">
            <summary>
            MIME headers collection for root MIME entity.
            </summary>
            <remarks>Same as using Root.Headers</remarks>
        </member>
        <member name="M:Limilabs.Mail.MimeDocument.AddListener(Limilabs.Mail.Headers.Listeners.BaseHeader)">
            <summary>
            Adds new header listener.
            </summary>
            <param name="listener">Header listener. This object will be notified when header changes.</param>
        </member>
        <member name="M:Limilabs.Mail.MimeDocument.Render(System.IO.Stream)">
            <summary>
            Renders the document.
            </summary>
            <param name="stream">Stream to render on.</param>
        </member>
        <member name="M:Limilabs.Mail.MimeDocument.EstimateTransportSize">
            <summary>
            Gets the estimated transport size of this MIME document.
            </summary>
            <returns>Estimated transport size of this MIME document.</returns>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.NotificationTo">
            <summary>
            'Disposition-Notification-To' header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.ReturnReceiptTo">
            <summary>
            'Return-Receipt-To' header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.XConfirmReadingTo">
            <summary>
            'X-Confirm-Reading-To' header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.ReturnPath">
            <summary>
            'Return-Path' header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.Importance">
            <summary>
            'Importance' header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.Priority">
            <summary>
            'Priority' header.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.XPriority">
            <summary>
            'X-Priority' field, "1" is the highest priority, "3" is normal, and "5" is the lowest priority.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.Sensitivity">
            <summary>
            'Sensitivity' field
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.Received">
            <summary>
            List of all 'received' headers in this message.
            </summary>
        </member>
        <member name="P:Limilabs.Mail.MailMessage.XTnef2MimeMessageClass">
            <summary>
            Gets or sets the value ('X-Tnef2Mime-MessageClass' header). May be <c>null</c>.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MailMessage.RequestReadReceipt">
            <summary>
            'Disposition-Notification-To'
            'Return-Receipt-To'
            'X-Confirm-Reading-To'
            </summary>
        </member>
        <member name="M:Limilabs.Mail.MailMessage.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:Limilabs.Mail.Templates.ITemplateDataProvider">
            <summary>
            Inherit this interface if you need to implemeting a custom template data provider.
            </summary>
            <seealso cref="M:Limilabs.Mail.Templates.Template.DataFrom(Limilabs.Mail.Templates.ITemplateDataProvider)"/>
            <seealso cref="M:Limilabs.Mail.Templates.Template.PermanentDataFrom(Limilabs.Mail.Templates.ITemplateDataProvider)"/>
        </member>
        <member name="M:Limilabs.Mail.Templates.ITemplateDataProvider.GetValue(System.String)">
            <summary>
            Gets the value for specified key.
            </summary>
            <param name="name">Name of the key to get value for.</param>
            <returns>Value for specified key.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.ITemplateDataProvider.HasValue(System.String)">
            <summary>
            Returns a boolean value indicating if this provider can return a value for specified key.
            </summary>
            <param name="name">Name of the key.</param>
            <returns>True if this provider can return a value for specified key.</returns>
        </member>
        <member name="T:Limilabs.Mail.Templates.Template">
            <summary>
            Represents the template that can be used to create email messages.
            </summary>
            <remarks>
            <code>
            string text = Template
                .LoadFromFile("template.txt")
                .DataFrom(reportData)
                .Render();
            </code>
            Template sample:
            <pre>
            Hi [FirstName] [LastName],
            
            On [PurchaseDate:yyyy/MM/dd HH:mm] you purchased following items:
            [foreach OrderItems]
                - [Id] [Name] [Price]
            [end]
            \[ escaped square brackets \]
            </pre>
            </remarks>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.Create(System.String)">
            <summary>
            Creates new template using specified template text.
            </summary>
            <param name="templateText">Template's text.</param>
            <returns>New template.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.FromFile(System.String)">
            <summary>
            Loads a template from file.
            </summary>
            <param name="path">The file to read data from.</param>
            <returns>Loaded template.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.ClearDataSources">
            <summary>
            Clears all data sources for this template.
            </summary>
            <returns>Current template.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.DataFrom(System.Object)">
            <summary>
            Specifies object that will be used as a data source for this template.
            If the method is called more than once, only last object is used.
            </summary>
            <param name="data">Data source for this template.</param>
            <returns>Current template.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.DataFrom(System.Collections.IDictionary)">
            <summary>
            Specifies IDictionary that will be used as a data source for this template.
            If the method is called more than once, only last object is used as the template data source.
            </summary>
            <param name="data">IDictionary sata source for this template.</param>
            <returns>Current template.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.DataFrom(Limilabs.Mail.Templates.ITemplateDataProvider)">
            <summary>
            Specifies ITemplateDataProvider that will be used as a data source for this template.
            If the method is called more than once, only last object is used as the template data source.
            </summary>
            <param name="provider">ITemplateDataProvider sata source for this template.</param>
            <returns>Current template.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.PermanentDataFrom(System.Object)">
            <summary>
            Specifies object that will be used as a data source for this template.
            If the method is called more than once, all objects are used.
            </summary>
            <param name="data">Data source for this template.</param>
            <returns>Current template.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.PermanentDataFrom(System.Collections.IDictionary)">
            <summary>
            Specifies <see cref="T:System.Collections.IDictionary"/> that will be used as a data source for this template.
            If the method is called more than once, all objects are checked and used as the template data source.
            </summary>
            <param name="data">IDictionary data source for this template.</param>
            <returns>Current template.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.PermanentDataFrom(Limilabs.Mail.Templates.ITemplateDataProvider)">
            <summary>
            Specifies ITemplateDataProvider that will be used as a data source for this template.
            If the method is called more than once, all objects are checked and used as the template data source.
            </summary>
            <param name="provider">ITemplateDataProvider sata source for this template.</param>
            <returns>Current template.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.Render">
            <summary>
            Renders the template.
            </summary>
            <returns>Rendered template.</returns>
        </member>
        <member name="P:Limilabs.Mail.Templates.Template.Item(System.String)">
            <summary>
            Gets or sets custom keys used by this template.
            </summary>
            <param name="key">Key name.</param>
            <returns>Value to be used when template is rendered.</returns>
        </member>
        <member name="M:Limilabs.Mail.Templates.Template.AddKey(System.String,System.String)">
            <summary>
            Adds a custom key used by this template.
            </summary>
            <param name="key">Key name.</param>
            <param name="value">Value to be used when template is rendered.</param>
            <returns>Current template.</returns>
        </member>
        <member name="T:Limilabs.Mail.Templates.TemplateException">
            <summary>
            Represents an error that occurred during template parsing.
            </summary>
        </member>
        <member name="M:Limilabs.Mail.Templates.TemplateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes new instance of TemplateException with serialized data.
            </summary>
            <param name="info">Serialized object data.</param>
            <param name="context">Contextual information.</param>
        </member>
        <member name="M:Limilabs.Mail.Templates.TemplateParser.MoveOneForward">
            <summary>
            Moves index one step forward, this method is aware of the escaped chars.
            </summary>
            <returns>False if end is reached, true if we can move forward again.</returns>
        </member>
        <member name="M:Limilabs.Parsers.QuotedListTokenizer.MoveOneForward">
            <summary>
            Moves index one step forward, this method is aware of the escaped strings.
            </summary>
            <returns>False if end is reached, <c>true</c> if we can move forward again.</returns>
        </member>
        <member name="M:Limilabs.Parsers.DataPartWalker.MoveOneForward">
            <returns>False if end is reached, true if we can move forward again.</returns>
        </member>
        <member name="M:Limilabs.Parsers.StringWalker.MoveOneForward">
            <returns>False if end is reached, true if we can move forward again.</returns>
        </member>
        <member name="T:Limilabs.Zlib.CRC32">
            <summary>
              Computes a CRC-32. The CRC-32 algorithm is parameterized - you
              can set the polynomial and enable or disable bit
              reversal. This can be used for GZIP, BZip2, or ZIP.
            </summary>
            <remarks>
              This type is used internally by DotNetZip; it is generally not used
              directly by applications wishing to create, read, or manipulate zip
              archive files.
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.CRC32.TotalBytesRead">
            <summary>
              Indicates the total number of bytes applied to the CRC.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
              Get the CRC32 for the given (word,byte) combo.  This is a
              computation defined by PKzip for PKZIP 2.0 (weak) encryption.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.UpdateCRC(System.Byte)">
            <summary>
              Process one byte in the CRC.
            </summary>
            <param name = "b">the byte to include into the CRC .  </param>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.UpdateCRC(System.Byte,System.Int32)">
            <summary>
              Process a run of N identical bytes into the CRC.
            </summary>
            <remarks>
              <para>
                This method serves as an optimization for updating the CRC when a
                run of identical bytes is found. Rather than passing in a buffer of
                length n, containing all identical bytes b, this method accepts the
                byte value and the length of the (virtual) buffer - the length of
                the run.
              </para>
            </remarks>
            <param name = "b">the byte to include into the CRC.  </param>
            <param name = "n">the number of times that byte should be repeated. </param>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
              Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
              This is useful when using a divide-and-conquer approach to
              calculating a CRC.  Multiple threads can each calculate a
              CRC32 on a segment of the data, and then combine the
              individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.#ctor">
            <summary>
              Create an instance of the CRC32 class using the default settings: no
              bit reversal, and a polynomial of 0xEDB88320.
            </summary>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.#ctor(System.Boolean)">
            <summary>
              Create an instance of the CRC32 class, specifying whether to reverse
              data bits or not.
            </summary>
            <param name='reverseBits'>
              specify true if the instance should reverse data bits.
            </param>
            <remarks>
              <para>
                In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                want a CRC32 with compatibility with BZip2, you should pass true
                here. In the CRC-32 used by GZIP and PKZIP, the bits are not
                reversed; Therefore if you want a CRC32 with compatibility with
                those, you should pass false.
              </para>
            </remarks>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.#ctor(System.Int32,System.Boolean)">
             <summary>
               Create an instance of the CRC32 class, specifying the polynomial and
               whether to reverse data bits or not.
             </summary>
             <param name='polynomial'>
               The polynomial to use for the CRC, expressed in the reversed (LSB)
               format: the highest ordered bit in the polynomial value is the
               coefficient of the 0th power; the second-highest order bit is the
               coefficient of the 1 power, and so on. Expressed this way, the
               polynomial for the CRC-32C used in IEEE 802.3, is 0xEDB88320.
             </param>
             <param name='reverseBits'>
               specify true if the instance should reverse data bits.
             </param>
            
             <remarks>
               <para>
                 In the CRC-32 used by BZip2, the bits are reversed. Therefore if you
                 want a CRC32 with compatibility with BZip2, you should pass true
                 here for the <c>reverseBits</c> parameter. In the CRC-32 used by
                 GZIP and PKZIP, the bits are not reversed; Therefore if you want a
                 CRC32 with compatibility with those, you should pass false for the
                 <c>reverseBits</c> parameter.
               </para>
             </remarks>
        </member>
        <member name="M:Limilabs.Zlib.CRC32.Reset">
            <summary>
              Reset the CRC-32 class - clear the CRC "remainder register."
            </summary>
            <remarks>
              <para>
                Use this when employing a single instance of this class to compute
                multiple, distinct CRCs on multiple, distinct data blocks.
              </para>
            </remarks>
        </member>
        <member name="T:Limilabs.Zlib.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().  The stream uses the default CRC32
                algorithm, which implies a polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
              The constructor allows the caller to specify how to handle the
              underlying stream at close.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read.
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
              <para>
                Instances returned from this constructor will leave the underlying
                stream open upon Close().
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close().
            </summary>
            <remarks>
              <para>
                The stream uses the default CRC32 algorithm, which implies a
                polynomial of 0xEDB88320.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean,Limilabs.Zlib.CRC32)">
            <summary>
              A constructor allowing the specification of the length of the stream
              to read, as well as whether to keep the underlying stream open upon
              Close(), and the CRC32 instance to use.
            </summary>
            <remarks>
              <para>
                The stream uses the specified CRC32 instance, which allows the
                application to specify how the CRC gets calculated.
              </para>
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the <c>CrcCalculatorStream</c>; false otherwise.</param>
            <param name="crc32">the CRC32 instance to use to calculate the CRC32</param>
        </member>
        <member name="P:Limilabs.Zlib.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
               Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
               This is either the total number of bytes read, or the total number of
               bytes written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:Limilabs.Zlib.CrcCalculatorStream.Crc">
            <summary>
              Provides the current CRC for all blocks slurped in.
            </summary>
            <remarks>
              <para>
                The running total of the CRC is kept as data is written or read
                through the stream.  read this property after all reads or writes to
                get an accurate CRC for the entire stream.
              </para>
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.CrcCalculatorStream.LeaveOpen">
            <summary>
              Indicates whether the underlying stream will be left open when the
              <c>CrcCalculatorStream</c> is Closed.
            </summary>
            <remarks>
              <para>
                Set this at any point before calling <see cref="M:Limilabs.Zlib.CrcCalculatorStream.Close"/>.
              </para>
            </remarks>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="P:Limilabs.Zlib.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.CrcCalculatorStream.CanSeek">
            <summary>
              Indicates whether the stream supports seeking.
            </summary>
            <remarks>
              <para>
                Always returns false.
              </para>
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.CrcCalculatorStream.Length">
            <summary>
              Returns the length of the underlying stream.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.CrcCalculatorStream.Position">
            <summary>
              The getter for this property returns the total bytes read.
              If you use the setter, it will throw
            <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeking is not supported on this stream. This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            This method always throws
            <see cref="T:System.NotSupportedException"/>
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:Limilabs.Zlib.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="T:Limilabs.Zlib.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see
               href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
               cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see
               href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:Limilabs.Zlib.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:Limilabs.Zlib.ZlibStream" />
             <seealso cref="T:Limilabs.Zlib.GZipStream" />
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,Limilabs.Zlib.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,Limilabs.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                Application code won't call this code directly.  This method may be
                invoked in two distinct scenarios.  If disposing == true, the method
                has been called directly or indirectly by a user's code, for example
                via the public Dispose() method. In this case, both managed and
                unmanaged resources can be referenced and disposed.  If disposing ==
                false, the method has been called by the runtime from inside the
                object finalizer and this method should not reference other objects;
                in that case only unmanaged resources must be referenced or
                disposed.
              </para>
            </remarks>
            <param name="disposing">
              true if the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Limilabs.Zlib.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Limilabs.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Limilabs.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Limilabs.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:Limilabs.Zlib.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Limilabs.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Limilabs.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:Limilabs.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Limilabs.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Limilabs.Zlib.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:Limilabs.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:Limilabs.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Limilabs.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Limilabs.Zlib.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Limilabs.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:Limilabs.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Limilabs.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Limilabs.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Limilabs.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="T:Limilabs.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see
               href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:Limilabs.Zlib.ZlibStream"/> and <see cref="T:Limilabs.Zlib.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:Limilabs.Zlib.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:Limilabs.Zlib.DeflateStream" />
             <seealso cref="T:Limilabs.Zlib.ZlibStream" />
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="F:Limilabs.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,Limilabs.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:Limilabs.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:Limilabs.Zlib.GZipStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,Limilabs.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,Limilabs.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Limilabs.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Limilabs.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Limilabs.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Limilabs.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Limilabs.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Limilabs.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:Limilabs.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Limilabs.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Limilabs.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Limilabs.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Limilabs.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="M:Limilabs.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:Limilabs.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation.
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:Limilabs.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:Limilabs.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:Limilabs.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream.
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:Limilabs.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:Limilabs.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Limilabs.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Limilabs.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library.
            </summary>
        </member>
        <member name="M:Limilabs.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s">the message for the exception.</param>
        </member>
        <member name="M:Limilabs.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Limilabs.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
            
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="T:Limilabs.Zlib.Adler">
             <summary>
             Computes an Adler-32 checksum.
             </summary>
             <remarks>
             The Adler checksum is similar to a CRC checksum, but faster to compute, though less
             reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
             is a required part of the "ZLIB" standard.  Applications will almost never need to
             use this class directly.
             </remarks>
            
             <exclude/>
        </member>
        <member name="M:Limilabs.Zlib.Adler.Adler32(System.UInt32,System.Byte[],System.Int32,System.Int32)">
            <summary>
              Calculates the Adler32 checksum.
            </summary>
            <remarks>
              <para>
                This is used within ZLIB.  You probably don't need to use this directly.
              </para>
            </remarks>
            <example>
               To compute an Adler32 checksum on a byte array:
             <code>
               var adler = Adler.Adler32(0, null, 0, 0);
               adler = Adler.Adler32(adler, buffer, index, length);
             </code>
            </example>
        </member>
        <member name="T:Limilabs.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:Limilabs.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.#ctor(Limilabs.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.Inflate(Limilabs.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.Info("\n============================================");
                 Console.Info("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIICommonEncodings.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.InitializeDeflate(Limilabs.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.InitializeDeflate(Limilabs.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.InitializeDeflate(Limilabs.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.InitializeDeflate(Limilabs.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.Deflate(Limilabs.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.Info("\n============================================");
                Console.Info("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.SetDeflateParams(Limilabs.Zlib.CompressionLevel,Limilabs.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="T:Limilabs.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:Limilabs.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:Limilabs.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see
             href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see
             cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see
             href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:Limilabs.Zlib.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:Limilabs.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:Limilabs.Zlib.DeflateStream" />
             <seealso cref="T:Limilabs.Zlib.GZipStream" />
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c>
               will use the default compression level. The "captive" stream will be
               closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the
             compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,Limilabs.Zlib.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.#ctor(System.IO.Stream,Limilabs.Zlib.CompressionMode,Limilabs.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify
               whether the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive
               stream remain open after the deflation or inflation occurs.  By
               default, after <c>Close()</c> is called on the stream, the captive
               stream is also closed. In some cases this is not desired, for example
               if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be
               re-read after compression.  Specify true for the <paramref
               name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after
             inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is
             effective only when mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="P:Limilabs.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Limilabs.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Limilabs.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
              Dispose the stream.
            </summary>
            <remarks>
              <para>
                This may or may not result in a <c>Close()</c> call on the captive
                stream.  See the constructors that have a <c>leaveOpen</c> parameter
                for more information.
              </para>
              <para>
                This method may be invoked in two distinct scenarios.  If disposing
                == true, the method has been called directly or indirectly by a
                user's code, for example via the public Dispose() method. In this
                case, both managed and unmanaged resources can be referenced and
                disposed.  If disposing == false, the method has been called by the
                runtime from inside the object finalizer and this method should not
                reference other objects; in that case only unmanaged resources must
                be referenced or disposed.
              </para>
            </remarks>
            <param name="disposing">
              indicates whether the Dispose method was invoked by user code.
            </param>
        </member>
        <member name="P:Limilabs.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Limilabs.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="P:Limilabs.Zlib.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see
               cref="T:System.NotSupportedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
            
             <param name="buffer">
             The buffer into which the read data should be placed.</param>
            
             <param name="offset">
             the offset within that data array to put the first byte read.</param>
            
             <param name="count">the number of bytes to read.</param>
            
             <returns>the number of bytes read</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
             <summary>
             Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
             </summary>
             <param name="offset">
               The offset to seek to....
               IF THIS METHOD ACTUALLY DID ANYTHING.
             </param>
             <param name="origin">
               The reference specifying how to apply the offset....  IF
               THIS METHOD ACTUALLY DID ANYTHING.
             </param>
            
             <returns>nothing. This method always throws.</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="value">
              The new value for the stream length....  IF
              THIS METHOD ACTUALLY DID ANYTHING.
            </param>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Limilabs.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Limilabs.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Limilabs.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Limilabs.Zlib.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Limilabs.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Limilabs.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Limilabs.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:Limilabs.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Limilabs.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Limilabs.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Limilabs.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Limilabs.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
    </members>
</doc>
