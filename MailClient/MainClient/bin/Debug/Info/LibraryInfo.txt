MailKit - это кроссплатформенная библиотека почтовых клиентов, созданная поверх MimeKit.
Особенности:
	+ SASL Аутентификация
		- CRAM-MD5
		- DIGEST-MD5
		- LOGIN
		- NTLM
		- PLAIN
		- SCRAM-SHA-1
		- SCRAM-SHA-256
		- XOAUTH2 (частичная поддержка - нужно получить токены авторизации самостоятельно)
	+ Proxy поддержка
		- SOCKS4/4a
		- SOCKS5
		- HTTP
	+ SMTP Клиент
		- Поддерживает все механизмы SASL, перечисленные выше.
		- Поддерживает SSL-завернутые соединения по протоколу «smtps».
		- Поддерживает клиентские сертификаты SSL / TLS.
		- Поддерживает следующие расширения:
			# SIZE
			# DSN
			# AUTH
			# 8BITMIME
			# PIPELINING
			# BINARYMIME
			# CHUNKING
			# STARTTLS
			# SMTPUTF8
		- Все API могут быть отменены.
		- Доступны асинхронные API.
	+ POP3 Клиент
		- Поддерживает все механизмы SASL, перечисленные выше.
		- Также поддерживает аутентификацию через APOP и USER/ PASS.
		- Поддерживает SSL-завернутые соединения через протокол «pops».
		- Поддерживает клиентские сертификаты SSL / TLS.
		- Поддерживает следующие расширения:
			# TOP
			# UIDL
			# EXPIRE
			# LOGIN-DELAY
			# PIPELINING
			# SASL
			# STLS
			# UTF8
			# UTF8=USER
			# LANG
		- Все API могут быть отменены.
		- Доступны асинхронные API.
	+ IMAP4 Клиент
		- Поддерживает все механизмы SASL, перечисленные выше.
		- Поддерживает SSL-завернутые соединения по протоколу «imaps».
		- Поддерживает клиентские сертификаты SSL / TLS.
		- Поддерживает следующие расширения:
			# ACL
			# QUOTA
			# LITERAL+
			# IDLE
			# NAMESPACE
			# ID
			# CHILDREN
			# LOGINDISABLED
			# STARTTLS
			# MULTIAPPEND
			# UNSELECT
			# UIDPLUS
			# CONDSTORE
			# ESEARCH
			# SASL-IR
			# COMPRESS
			# WITHIN
			# ENABLE
			# QRESYNC
			# SORT
			# THREAD
			# LIST-EXTENDED
			# ESORT
			# METADATA / METADATA-SERVER
			# NOTIFY
			# FILTERS
			# LIST-STATUS
			# SORT=DISPLAY
			# SPECIAL-USE / CREATE-SPECIAL-USE
			# SEARCH=FUZZY
			# MOVE
			# UTF8=ACCEPT / UTF8=ONLY
			# LITERAL-
			# APPENDLIMIT
			# STATUS=SIZE
			# OBJECTID
			# XLIST
			# X-GM-EXT1 (X-GM-MSGID, X-GM-THRID, X-GM-RAW and X-GM-LABELS)
		- Все API могут быть отменены.
		- Доступны асинхронные API.
	+ Сортировка и обработка сообщений на стороне клиента.


Все другие реализации клиента .NET IMAP, которые я мог найти, страдают от основных архитектурных проблем, таких как игнорирование неожиданных неотмеченных ответов, предполагая, что буквенные строковые токены никогда не будут использоваться ни для чего, кроме тел сообщений (хотя на самом деле их можно использовать для довольно любой строковый токен в ответе), предполагая, что способ найти конец тела сообщения в ответе FETCH - это сканирование ") UID"и неправильная обработка имен почтовых ящиков с международными символами, чтобы просто назвать несколько.

IMAP требует много времени, потраченного на кропотливое чтение и перечитывание спецификаций IMAP (а также спецификаций MIME), чтобы понять все тонкости протокола и большую часть (все?) Других библиотек Open Source .NET IMAP, в По крайней мере, были написаны разработчиками, которые заботились только о том, чтобы это работало для их простых нужд. В этом нет ничего плохого, но в Интернете полно полуработающих, не RFC-совместимых реализаций IMAP, поэтому настало время написать тщательно разработанную и реализованную клиентскую библиотеку IMAP.

Для POP3 библиотеки, такие как OpenPOP.NET, на самом деле довольно приличные, хотя синтаксический анализатор MIME слишком строг - генерирует исключения каждый раз, когда встречает параметр Content-Type или Content-Disposition, о котором он еще не знает, что, если Вы читаете список рассылки, это проблема, с которой постоянно сталкиваются пользователи OpenPOP.NET. У MailKit Pop3Client, конечно, нет этой проблемы. Он также анализирует сообщения непосредственно из сокета вместо загрузки сообщения в большой строковый буфер перед его синтаксическим анализом, поэтому вы, вероятно, обнаружите, что MailKit не только работает быстрее (MIME-анализатор MailKit , MimeKit , анализирует сообщения с диска в 25 раз быстрее, чем OpenPOP. Парсер NET), но также использует гораздо меньше памяти.

Для SMTP большинство разработчиков используют System.Net.Mail.SmtpClient, который более или менее удовлетворительно отвечает их потребностям и поэтому, вероятно, не входит в их список потребностей. Однако реализация SmtpClient, включенная в MailKit, является гораздо лучшим вариантом, если требуется межплатформенная поддержка или если разработчик хочет иметь возможность сохранять и повторно загружать сообщения MIME перед отправкой их через SMTP. SmtpClient MailKit также поддерживает PIPELINING, что должно улучшить производительность отправки сообщений (хотя это может быть не очень заметно).